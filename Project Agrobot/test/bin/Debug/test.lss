
bin\Debug\test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  0000069e  00000732  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000069e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  00000752  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000012  00000000  00000000  00000755  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000078  00000000  00000000  000007a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00000ef6  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000d2d  00000000  00000000  00001716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00000423  00000000  00000000  00002443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000000d4  00000000  00000000  00002868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    0000058a  00000000  00000000  0000293c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 00000148  00000000  00000000  00002ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	ee e9       	ldi	r30, 0x9E	; 158

000000fc <.Loc.4>:
  fc:	f6 e0       	ldi	r31, 0x06	; 6

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a0 32       	cpi	r26, 0x20	; 32

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <L0^A>:
 10e:	0e 94 27 02 	call	0x44e	; 0x44e <main>
 112:	0c 94 4d 03 	jmp	0x69a	; 0x69a <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <init>:
    ~0x9C, ~0x7A, ~0x9E, ~0x8E
};


void init (void)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62

00000122 <.Loc.1>:
	// Initialiseer de pinnen voor datain, shiftclk en latchclk als output
	DDR_SDI    |= (1 << SDI_BIT);
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	fc 01       	movw	r30, r24
 128:	20 81       	ld	r18, Z
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	91 e0       	ldi	r25, 0x01	; 1

0000012e <.Loc.2>:
 12e:	20 62       	ori	r18, 0x20	; 32
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18

00000134 <.Loc.3>:
	DDR_SFTCLK |= (1 << SFTCLK_BIT);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	fc 01       	movw	r30, r24
 13a:	20 81       	ld	r18, Z
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	91 e0       	ldi	r25, 0x01	; 1

00000140 <.Loc.4>:
 140:	20 61       	ori	r18, 0x10	; 16
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18

00000146 <.Loc.5>:
	DDR_LCHCLK |= (1 << LCHCLK_BIT);
 146:	83 e3       	ldi	r24, 0x33	; 51
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	20 81       	ld	r18, Z
 14e:	83 e3       	ldi	r24, 0x33	; 51
 150:	90 e0       	ldi	r25, 0x00	; 0

00000152 <.Loc.6>:
 152:	20 62       	ori	r18, 0x20	; 32
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18

00000158 <.Loc.7>:

	// Maak shiftclk en latchclk laag
	PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	fc 01       	movw	r30, r24
 15e:	20 81       	ld	r18, Z

00000160 <.Loc.8>:
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	91 e0       	ldi	r25, 0x01	; 1

00000164 <.Loc.9>:
 164:	2f 7e       	andi	r18, 0xEF	; 239
 166:	fc 01       	movw	r30, r24
 168:	20 83       	st	Z, r18

0000016a <.Loc.10>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
 16a:	84 e3       	ldi	r24, 0x34	; 52
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	fc 01       	movw	r30, r24
 170:	20 81       	ld	r18, Z

00000172 <.Loc.11>:
 172:	84 e3       	ldi	r24, 0x34	; 52
 174:	90 e0       	ldi	r25, 0x00	; 0

00000176 <.Loc.12>:
 176:	2f 7d       	andi	r18, 0xDF	; 223
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18

0000017c <.Loc.13>:
}
 17c:	00 00       	nop
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <send_data>:

void send_data(char data)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	00 d0       	rcall	.+0      	; 0x18a <L0^A>

0000018a <L0^A>:
 18a:	0f 92       	push	r0
 18c:	0f 92       	push	r0
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	8d 83       	std	Y+5, r24	; 0x05

00000194 <.LBB13>:
	for (unsigned i = 0; i < 8; i++)
 194:	1a 82       	std	Y+2, r1	; 0x02
 196:	19 82       	std	Y+1, r1	; 0x01

00000198 <.Loc.16>:
 198:	39 c0       	rjmp	.+114    	; 0x20c <.L3>

0000019a <.L6>:
	// Herhaal voor alle bits in een char
	{
		// Bepaal de waarde van de bit die je naar het schuifregister
		// wil sturen
		int bit = data & 1;
 19a:	8d 81       	ldd	r24, Y+5	; 0x05
 19c:	08 2e       	mov	r0, r24
 19e:	00 0c       	add	r0, r0
 1a0:	99 0b       	sbc	r25, r25

000001a2 <.Loc.18>:
 1a2:	81 70       	andi	r24, 0x01	; 1
 1a4:	99 27       	eor	r25, r25
 1a6:	9c 83       	std	Y+4, r25	; 0x04
 1a8:	8b 83       	std	Y+3, r24	; 0x03

000001aa <.Loc.19>:
		data >>= 1;
 1aa:	8d 81       	ldd	r24, Y+5	; 0x05
 1ac:	85 95       	asr	r24
 1ae:	8d 83       	std	Y+5, r24	; 0x05

000001b0 <.Loc.20>:

		// Maak de juiste pin hoog of laag op basis van de bepaalde waarde
		// van het bit
		if (bit)
 1b0:	8b 81       	ldd	r24, Y+3	; 0x03
 1b2:	9c 81       	ldd	r25, Y+4	; 0x04
 1b4:	00 97       	sbiw	r24, 0x00	; 0
 1b6:	51 f0       	breq	.+20     	; 0x1cc <.L4>

000001b8 <.Loc.21>:
		{
			PORT_SDI |= (1 << SDI_BIT);
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	fc 01       	movw	r30, r24
 1be:	20 81       	ld	r18, Z
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	91 e0       	ldi	r25, 0x01	; 1

000001c4 <.Loc.22>:
 1c4:	20 62       	ori	r18, 0x20	; 32
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
 1ca:	09 c0       	rjmp	.+18     	; 0x1de <.L5>

000001cc <.L4>:
		}
		else
		{
			PORT_SDI &= ~(1 << SDI_BIT);
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 81       	ld	r18, Z

000001d4 <.Loc.24>:
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	91 e0       	ldi	r25, 0x01	; 1

000001d8 <.Loc.25>:
 1d8:	2f 7d       	andi	r18, 0xDF	; 223
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18

000001de <.L5>:
		}

		// Toggle shiftclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
		// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
		// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
		PORT_SFTCLK |= (1 << SFTCLK_BIT);
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 81       	ld	r18, Z
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	91 e0       	ldi	r25, 0x01	; 1

000001ea <.Loc.27>:
 1ea:	20 61       	ori	r18, 0x10	; 16
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18

000001f0 <.Loc.28>:
		PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 81       	ld	r18, Z

000001f8 <.Loc.29>:
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	91 e0       	ldi	r25, 0x01	; 1

000001fc <.Loc.30>:
 1fc:	2f 7e       	andi	r18, 0xEF	; 239
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18

00000202 <.LBE14>:
	for (unsigned i = 0; i < 8; i++)
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	9a 81       	ldd	r25, Y+2	; 0x02
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	9a 83       	std	Y+2, r25	; 0x02
 20a:	89 83       	std	Y+1, r24	; 0x01

0000020c <.L3>:
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	9a 81       	ldd	r25, Y+2	; 0x02
 210:	87 30       	cpi	r24, 0x07	; 7
 212:	91 05       	cpc	r25, r1
 214:	11 f2       	breq	.-124    	; 0x19a <.L6>
 216:	08 f2       	brcs	.-126    	; 0x19a <.L6>

00000218 <.LBE13>:
	}
}
 218:	00 00       	nop
 21a:	00 00       	nop
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <send_enable>:

void send_enable(int display_nummer)
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	0f 92       	push	r0
 232:	0f 92       	push	r0
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	9a 83       	std	Y+2, r25	; 0x02
 23a:	89 83       	std	Y+1, r24	; 0x01

0000023c <.Loc.35>:
	send_data(0x10 << display_nummer);
 23c:	80 e1       	ldi	r24, 0x10	; 16
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	09 80       	ldd	r0, Y+1	; 0x01
 242:	02 c0       	rjmp	.+4      	; 0x248 <.L2^B1>

00000244 <.L1^B1>:
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25

00000248 <.L2^B1>:
 248:	0a 94       	dec	r0
 24a:	e2 f7       	brpl	.-8      	; 0x244 <.L1^B1>

0000024c <.Loc.36>:
 24c:	0e 94 c2 00 	call	0x184	; 0x184 <send_data>

00000250 <.Loc.37>:
}
 250:	00 00       	nop
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <display>:

void display(char data, int display_nummer)
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	00 d0       	rcall	.+0      	; 0x262 <L0^A>

00000262 <L0^A>:
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	7b 83       	std	Y+3, r23	; 0x03
 26a:	6a 83       	std	Y+2, r22	; 0x02

0000026c <.Loc.39>:
	send_data(data);
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	0e 94 c2 00 	call	0x184	; 0x184 <send_data>

00000272 <.Loc.40>:
	send_enable(display_nummer);
 272:	8a 81       	ldd	r24, Y+2	; 0x02
 274:	9b 81       	ldd	r25, Y+3	; 0x03
 276:	0e 94 16 01 	call	0x22c	; 0x22c <send_enable>

0000027a <.Loc.41>:

	// Toggle latchclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
	// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
	// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
	PORT_LCHCLK |= (1 << LCHCLK_BIT);
 27a:	84 e3       	ldi	r24, 0x34	; 52
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	fc 01       	movw	r30, r24
 280:	20 81       	ld	r18, Z
 282:	84 e3       	ldi	r24, 0x34	; 52
 284:	90 e0       	ldi	r25, 0x00	; 0

00000286 <.Loc.42>:
 286:	20 62       	ori	r18, 0x20	; 32
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18

0000028c <.Loc.43>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
 28c:	84 e3       	ldi	r24, 0x34	; 52
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	fc 01       	movw	r30, r24
 292:	20 81       	ld	r18, Z

00000294 <.Loc.44>:
 294:	84 e3       	ldi	r24, 0x34	; 52
 296:	90 e0       	ldi	r25, 0x00	; 0

00000298 <.Loc.45>:
 298:	2f 7d       	andi	r18, 0xDF	; 223
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18

0000029e <.Loc.46>:
}
 29e:	00 00       	nop
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <display_getal>:

void display_getal(unsigned int getal)
{
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	a6 97       	sbiw	r28, 0x26	; 38
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	9a 8b       	std	Y+18, r25	; 0x12
 2c2:	89 8b       	std	Y+17, r24	; 0x11

000002c4 <.LBB15>:
	for (int i = 0; i < 4; i++)
 2c4:	1a 82       	std	Y+2, r1	; 0x02
 2c6:	19 82       	std	Y+1, r1	; 0x01

000002c8 <.Loc.49>:
 2c8:	b0 c0       	rjmp	.+352    	; 0x42a <.L10>

000002ca <.L19>:
	{
		display(segmentcodes[getal%16], i);
 2ca:	89 89       	ldd	r24, Y+17	; 0x11
 2cc:	9a 89       	ldd	r25, Y+18	; 0x12
 2ce:	8f 70       	andi	r24, 0x0F	; 15
 2d0:	99 27       	eor	r25, r25

000002d2 <.Loc.51>:
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	80 50       	subi	r24, 0x00	; 0
 2d8:	9e 4f       	sbci	r25, 0xFE	; 254
 2da:	dc 01       	movw	r26, r24
 2dc:	8d 91       	ld	r24, X+
 2de:	9c 91       	ld	r25, X

000002e0 <.Loc.52>:
 2e0:	28 2f       	mov	r18, r24
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	9a 81       	ldd	r25, Y+2	; 0x02
 2e6:	bc 01       	movw	r22, r24
 2e8:	82 2f       	mov	r24, r18
 2ea:	0e 94 2e 01 	call	0x25c	; 0x25c <display>

000002ee <.Loc.53>:
		getal /= 16;
 2ee:	89 89       	ldd	r24, Y+17	; 0x11
 2f0:	9a 89       	ldd	r25, Y+18	; 0x12
 2f2:	92 95       	swap	r25
 2f4:	82 95       	swap	r24
 2f6:	8f 70       	andi	r24, 0x0F	; 15
 2f8:	89 27       	eor	r24, r25
 2fa:	9f 70       	andi	r25, 0x0F	; 15
 2fc:	89 27       	eor	r24, r25
 2fe:	9a 8b       	std	Y+18, r25	; 0x12
 300:	89 8b       	std	Y+17, r24	; 0x11
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	a0 e8       	ldi	r26, 0x80	; 128
 308:	bf e3       	ldi	r27, 0x3F	; 63
 30a:	8b 83       	std	Y+3, r24	; 0x03
 30c:	9c 83       	std	Y+4, r25	; 0x04
 30e:	ad 83       	std	Y+5, r26	; 0x05
 310:	be 83       	std	Y+6, r27	; 0x06

00000312 <.LBB16>:

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	4a e7       	ldi	r20, 0x7A	; 122
 318:	55 e4       	ldi	r21, 0x45	; 69
 31a:	6b 81       	ldd	r22, Y+3	; 0x03
 31c:	7c 81       	ldd	r23, Y+4	; 0x04
 31e:	8d 81       	ldd	r24, Y+5	; 0x05
 320:	9e 81       	ldd	r25, Y+6	; 0x06
 322:	0e 94 b8 02 	call	0x570	; 0x570 <__mulsf3>
 326:	6f 8b       	std	Y+23, r22	; 0x17
 328:	78 8f       	std	Y+24, r23	; 0x18
 32a:	89 8f       	std	Y+25, r24	; 0x19
 32c:	9a 8f       	std	Y+26, r25	; 0x1a
 32e:	8f 89       	ldd	r24, Y+23	; 0x17
 330:	98 8d       	ldd	r25, Y+24	; 0x18
 332:	a9 8d       	ldd	r26, Y+25	; 0x19
 334:	ba 8d       	ldd	r27, Y+26	; 0x1a
 336:	8f 83       	std	Y+7, r24	; 0x07
 338:	98 87       	std	Y+8, r25	; 0x08
 33a:	a9 87       	std	Y+9, r26	; 0x09
 33c:	ba 87       	std	Y+10, r27	; 0x0a

0000033e <.Loc.55>:
	if (__tmp < 1.0)
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	40 e8       	ldi	r20, 0x80	; 128
 344:	5f e3       	ldi	r21, 0x3F	; 63
 346:	6f 81       	ldd	r22, Y+7	; 0x07
 348:	78 85       	ldd	r23, Y+8	; 0x08
 34a:	89 85       	ldd	r24, Y+9	; 0x09
 34c:	9a 85       	ldd	r25, Y+10	; 0x0a
 34e:	0e 94 32 02 	call	0x464	; 0x464 <__cmpsf2>
 352:	88 23       	and	r24, r24
 354:	2c f4       	brge	.+10     	; 0x360 <.L22>

00000356 <.Loc.56>:
		__ticks = 1;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	9c 87       	std	Y+12, r25	; 0x0c
 35c:	8b 87       	std	Y+11, r24	; 0x0b
 35e:	55 c0       	rjmp	.+170    	; 0x40a <.L13>

00000360 <.L22>:
	else if (__tmp > 65535)
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	3f ef       	ldi	r19, 0xFF	; 255
 364:	4f e7       	ldi	r20, 0x7F	; 127
 366:	57 e4       	ldi	r21, 0x47	; 71
 368:	6f 81       	ldd	r22, Y+7	; 0x07
 36a:	78 85       	ldd	r23, Y+8	; 0x08
 36c:	89 85       	ldd	r24, Y+9	; 0x09
 36e:	9a 85       	ldd	r25, Y+10	; 0x0a
 370:	0e 94 b3 02 	call	0x566	; 0x566 <__gesf2>
 374:	88 23       	and	r24, r24
 376:	d9 f1       	breq	.+118    	; 0x3ee <.L23>
 378:	d4 f1       	brlt	.+116    	; 0x3ee <.L23>

0000037a <.Loc.58>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	40 e2       	ldi	r20, 0x20	; 32
 380:	51 e4       	ldi	r21, 0x41	; 65
 382:	6b 81       	ldd	r22, Y+3	; 0x03
 384:	7c 81       	ldd	r23, Y+4	; 0x04
 386:	8d 81       	ldd	r24, Y+5	; 0x05
 388:	9e 81       	ldd	r25, Y+6	; 0x06
 38a:	0e 94 b8 02 	call	0x570	; 0x570 <__mulsf3>
 38e:	6b 8f       	std	Y+27, r22	; 0x1b
 390:	7c 8f       	std	Y+28, r23	; 0x1c
 392:	8d 8f       	std	Y+29, r24	; 0x1d
 394:	9e 8f       	std	Y+30, r25	; 0x1e
 396:	8b 8d       	ldd	r24, Y+27	; 0x1b
 398:	9c 8d       	ldd	r25, Y+28	; 0x1c
 39a:	ad 8d       	ldd	r26, Y+29	; 0x1d
 39c:	be 8d       	ldd	r27, Y+30	; 0x1e
 39e:	8b 8b       	std	Y+19, r24	; 0x13
 3a0:	9c 8b       	std	Y+20, r25	; 0x14
 3a2:	ad 8b       	std	Y+21, r26	; 0x15
 3a4:	be 8b       	std	Y+22, r27	; 0x16

000003a6 <.Loc.59>:
 3a6:	6b 89       	ldd	r22, Y+19	; 0x13
 3a8:	7c 89       	ldd	r23, Y+20	; 0x14
 3aa:	8d 89       	ldd	r24, Y+21	; 0x15
 3ac:	9e 89       	ldd	r25, Y+22	; 0x16
 3ae:	0e 94 37 02 	call	0x46e	; 0x46e <__fixunssfsi>
 3b2:	6f 8f       	std	Y+31, r22	; 0x1f
 3b4:	78 a3       	std	Y+32, r23	; 0x20
 3b6:	89 a3       	std	Y+33, r24	; 0x21
 3b8:	9a a3       	std	Y+34, r25	; 0x22
 3ba:	af 8d       	ldd	r26, Y+31	; 0x1f
 3bc:	b8 a1       	ldd	r27, Y+32	; 0x20
 3be:	bc 87       	std	Y+12, r27	; 0x0c
 3c0:	ab 87       	std	Y+11, r26	; 0x0b

000003c2 <.Loc.60>:
		while(__ticks)
 3c2:	10 c0       	rjmp	.+32     	; 0x3e4 <.L16>

000003c4 <.L17>:
 3c4:	80 e9       	ldi	r24, 0x90	; 144
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	9e 87       	std	Y+14, r25	; 0x0e
 3ca:	8d 87       	std	Y+13, r24	; 0x0d

000003cc <.LBB18>:
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
 3cc:	8d 85       	ldd	r24, Y+13	; 0x0d
 3ce:	9e 85       	ldd	r25, Y+14	; 0x0e

000003d0 <.L1^B2>:
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <.L1^B2>
 3d4:	9e 87       	std	Y+14, r25	; 0x0e
 3d6:	8d 87       	std	Y+13, r24	; 0x0d

000003d8 <.Loc.62>:
	...

000003da <.LBE18>:
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3da:	8b 85       	ldd	r24, Y+11	; 0x0b
 3dc:	9c 85       	ldd	r25, Y+12	; 0x0c
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	9c 87       	std	Y+12, r25	; 0x0c
 3e2:	8b 87       	std	Y+11, r24	; 0x0b

000003e4 <.L16>:
		while(__ticks)
 3e4:	8b 85       	ldd	r24, Y+11	; 0x0b
 3e6:	9c 85       	ldd	r25, Y+12	; 0x0c
 3e8:	00 97       	sbiw	r24, 0x00	; 0
 3ea:	61 f7       	brne	.-40     	; 0x3c4 <.L17>

000003ec <.Loc.65>:
		}
		return;
 3ec:	19 c0       	rjmp	.+50     	; 0x420 <.L18>

000003ee <.L23>:
	}
	else
		__ticks = (uint16_t)__tmp;
 3ee:	6f 81       	ldd	r22, Y+7	; 0x07
 3f0:	78 85       	ldd	r23, Y+8	; 0x08
 3f2:	89 85       	ldd	r24, Y+9	; 0x09
 3f4:	9a 85       	ldd	r25, Y+10	; 0x0a
 3f6:	0e 94 37 02 	call	0x46e	; 0x46e <__fixunssfsi>
 3fa:	6b a3       	std	Y+35, r22	; 0x23
 3fc:	7c a3       	std	Y+36, r23	; 0x24
 3fe:	8d a3       	std	Y+37, r24	; 0x25
 400:	9e a3       	std	Y+38, r25	; 0x26
 402:	eb a1       	ldd	r30, Y+35	; 0x23
 404:	fc a1       	ldd	r31, Y+36	; 0x24
 406:	fc 87       	std	Y+12, r31	; 0x0c
 408:	eb 87       	std	Y+11, r30	; 0x0b

0000040a <.L13>:
 40a:	8b 85       	ldd	r24, Y+11	; 0x0b
 40c:	9c 85       	ldd	r25, Y+12	; 0x0c
 40e:	98 8b       	std	Y+16, r25	; 0x10
 410:	8f 87       	std	Y+15, r24	; 0x0f

00000412 <.LBB20>:
 412:	8f 85       	ldd	r24, Y+15	; 0x0f
 414:	98 89       	ldd	r25, Y+16	; 0x10

00000416 <.L1^B3>:
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <.L1^B3>
 41a:	98 8b       	std	Y+16, r25	; 0x10
 41c:	8f 87       	std	Y+15, r24	; 0x0f

0000041e <.Loc.68>:
	...

00000420 <.L18>:
	for (int i = 0; i < 4; i++)
 420:	89 81       	ldd	r24, Y+1	; 0x01
 422:	9a 81       	ldd	r25, Y+2	; 0x02
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	9a 83       	std	Y+2, r25	; 0x02
 428:	89 83       	std	Y+1, r24	; 0x01

0000042a <.L10>:
 42a:	89 81       	ldd	r24, Y+1	; 0x01
 42c:	9a 81       	ldd	r25, Y+2	; 0x02
 42e:	83 30       	cpi	r24, 0x03	; 3
 430:	91 05       	cpc	r25, r1
 432:	09 f0       	breq	.+2      	; 0x436 <L0^A>

00000434 <L0^A>:
 434:	0c f4       	brge	.+2      	; 0x438 <.LBE15>

00000436 <L0^A>:
 436:	49 cf       	rjmp	.-366    	; 0x2ca <.L19>

00000438 <.LBE15>:
		_delay_ms(1);   // 1 kHz
	}
}
 438:	00 00       	nop
 43a:	00 00       	nop
 43c:	a6 96       	adiw	r28, 0x26	; 38
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <main>:

int main(void)
{
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62

00000456 <.Loc.73>:
	init();
 456:	0e 94 8d 00 	call	0x11a	; 0x11a <init>

0000045a <.L25>:

	while (1)
	{
		display_getal(0x5555);
 45a:	85 e5       	ldi	r24, 0x55	; 85
 45c:	95 e5       	ldi	r25, 0x55	; 85
 45e:	0e 94 56 01 	call	0x2ac	; 0x2ac <display_getal>
 462:	fb cf       	rjmp	.-10     	; 0x45a <.L25>

00000464 <__cmpsf2>:
 464:	0e 94 66 02 	call	0x4cc	; 0x4cc <__fp_cmp>
 468:	08 f4       	brcc	.+2      	; 0x46c <.L1^B1>
 46a:	81 e0       	ldi	r24, 0x01	; 1

0000046c <.L1^B1>:
 46c:	08 95       	ret

0000046e <__fixunssfsi>:
 46e:	0e 94 92 02 	call	0x524	; 0x524 <__fp_splitA>
 472:	88 f0       	brcs	.+34     	; 0x496 <.L_err>
 474:	9f 57       	subi	r25, 0x7F	; 127
 476:	98 f0       	brcs	.+38     	; 0x49e <.L_zr>
 478:	b9 2f       	mov	r27, r25
 47a:	99 27       	eor	r25, r25
 47c:	b7 51       	subi	r27, 0x17	; 23
 47e:	b0 f0       	brcs	.+44     	; 0x4ac <.L4^B1>
 480:	e1 f0       	breq	.+56     	; 0x4ba <.L_sign>

00000482 <.L1^B1>:
 482:	66 0f       	add	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	88 1f       	adc	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	1a f0       	brmi	.+6      	; 0x492 <.L2^B1>
 48c:	ba 95       	dec	r27
 48e:	c9 f7       	brne	.-14     	; 0x482 <.L1^B1>
 490:	14 c0       	rjmp	.+40     	; 0x4ba <.L_sign>

00000492 <.L2^B1>:
 492:	b1 30       	cpi	r27, 0x01	; 1
 494:	91 f0       	breq	.+36     	; 0x4ba <.L_sign>

00000496 <.L_err>:
 496:	0e 94 ac 02 	call	0x558	; 0x558 <__fp_zero>
 49a:	b1 e0       	ldi	r27, 0x01	; 1
 49c:	08 95       	ret

0000049e <.L_zr>:
 49e:	0c 94 ac 02 	jmp	0x558	; 0x558 <__fp_zero>

000004a2 <.L3^B1>:
 4a2:	67 2f       	mov	r22, r23
 4a4:	78 2f       	mov	r23, r24
 4a6:	88 27       	eor	r24, r24
 4a8:	b8 5f       	subi	r27, 0xF8	; 248
 4aa:	39 f0       	breq	.+14     	; 0x4ba <.L_sign>

000004ac <.L4^B1>:
 4ac:	b9 3f       	cpi	r27, 0xF9	; 249
 4ae:	cc f3       	brlt	.-14     	; 0x4a2 <.L3^B1>

000004b0 <.L5^B1>:
 4b0:	86 95       	lsr	r24
 4b2:	77 95       	ror	r23
 4b4:	67 95       	ror	r22
 4b6:	b3 95       	inc	r27
 4b8:	d9 f7       	brne	.-10     	; 0x4b0 <.L5^B1>

000004ba <.L_sign>:
 4ba:	3e f4       	brtc	.+14     	; 0x4ca <.L6^B1>
 4bc:	90 95       	com	r25
 4be:	80 95       	com	r24
 4c0:	70 95       	com	r23
 4c2:	61 95       	neg	r22
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	8f 4f       	sbci	r24, 0xFF	; 255
 4c8:	9f 4f       	sbci	r25, 0xFF	; 255

000004ca <.L6^B1>:
 4ca:	08 95       	ret

000004cc <__fp_cmp>:
 4cc:	99 0f       	add	r25, r25
 4ce:	00 08       	sbc	r0, r0
 4d0:	55 0f       	add	r21, r21
 4d2:	aa 0b       	sbc	r26, r26
 4d4:	e0 e8       	ldi	r30, 0x80	; 128
 4d6:	fe ef       	ldi	r31, 0xFE	; 254
 4d8:	16 16       	cp	r1, r22
 4da:	17 06       	cpc	r1, r23
 4dc:	e8 07       	cpc	r30, r24
 4de:	f9 07       	cpc	r31, r25
 4e0:	c0 f0       	brcs	.+48     	; 0x512 <.L9^B1>
 4e2:	12 16       	cp	r1, r18
 4e4:	13 06       	cpc	r1, r19
 4e6:	e4 07       	cpc	r30, r20
 4e8:	f5 07       	cpc	r31, r21
 4ea:	98 f0       	brcs	.+38     	; 0x512 <.L9^B1>
 4ec:	62 1b       	sub	r22, r18
 4ee:	73 0b       	sbc	r23, r19
 4f0:	84 0b       	sbc	r24, r20
 4f2:	95 0b       	sbc	r25, r21
 4f4:	39 f4       	brne	.+14     	; 0x504 <.L1^B1>
 4f6:	0a 26       	eor	r0, r26
 4f8:	61 f0       	breq	.+24     	; 0x512 <.L9^B1>
 4fa:	23 2b       	or	r18, r19
 4fc:	24 2b       	or	r18, r20
 4fe:	25 2b       	or	r18, r21
 500:	21 f4       	brne	.+8      	; 0x50a <.L2^B1>
 502:	08 95       	ret

00000504 <.L1^B1>:
 504:	0a 26       	eor	r0, r26
 506:	09 f4       	brne	.+2      	; 0x50a <.L2^B1>
 508:	a1 40       	sbci	r26, 0x01	; 1

0000050a <.L2^B1>:
 50a:	a6 95       	lsr	r26
 50c:	8f ef       	ldi	r24, 0xFF	; 255
 50e:	81 1d       	adc	r24, r1
 510:	81 1d       	adc	r24, r1

00000512 <.L9^B1>:
 512:	08 95       	ret

00000514 <__fp_split3>:
 514:	57 fd       	sbrc	r21, 7
 516:	90 58       	subi	r25, 0x80	; 128
 518:	44 0f       	add	r20, r20
 51a:	55 1f       	adc	r21, r21
 51c:	59 f0       	breq	.+22     	; 0x534 <.L4^B1>
 51e:	5f 3f       	cpi	r21, 0xFF	; 255
 520:	71 f0       	breq	.+28     	; 0x53e <.L5^B1>

00000522 <.L1^B1>:
 522:	47 95       	ror	r20

00000524 <__fp_splitA>:
 524:	88 0f       	add	r24, r24
 526:	97 fb       	bst	r25, 7
 528:	99 1f       	adc	r25, r25
 52a:	61 f0       	breq	.+24     	; 0x544 <.L6^B1>
 52c:	9f 3f       	cpi	r25, 0xFF	; 255
 52e:	79 f0       	breq	.+30     	; 0x54e <.L7^B1>

00000530 <.L3^B1>:
 530:	87 95       	ror	r24
 532:	08 95       	ret

00000534 <.L4^B1>:
 534:	12 16       	cp	r1, r18
 536:	13 06       	cpc	r1, r19
 538:	14 06       	cpc	r1, r20
 53a:	55 1f       	adc	r21, r21
 53c:	f2 cf       	rjmp	.-28     	; 0x522 <.L1^B1>

0000053e <.L5^B1>:
 53e:	46 95       	lsr	r20
 540:	f1 df       	rcall	.-30     	; 0x524 <__fp_splitA>
 542:	08 c0       	rjmp	.+16     	; 0x554 <.L8^B1>

00000544 <.L6^B1>:
 544:	16 16       	cp	r1, r22
 546:	17 06       	cpc	r1, r23
 548:	18 06       	cpc	r1, r24
 54a:	99 1f       	adc	r25, r25
 54c:	f1 cf       	rjmp	.-30     	; 0x530 <.L3^B1>

0000054e <.L7^B1>:
 54e:	86 95       	lsr	r24
 550:	71 05       	cpc	r23, r1
 552:	61 05       	cpc	r22, r1

00000554 <.L8^B1>:
 554:	08 94       	sec
 556:	08 95       	ret

00000558 <__fp_zero>:
 558:	e8 94       	clt

0000055a <__fp_szero>:
 55a:	bb 27       	eor	r27, r27
 55c:	66 27       	eor	r22, r22
 55e:	77 27       	eor	r23, r23
 560:	cb 01       	movw	r24, r22
 562:	97 f9       	bld	r25, 7
 564:	08 95       	ret

00000566 <__gesf2>:
 566:	0e 94 66 02 	call	0x4cc	; 0x4cc <__fp_cmp>
 56a:	08 f4       	brcc	.+2      	; 0x56e <.L1^B1>
 56c:	8f ef       	ldi	r24, 0xFF	; 255

0000056e <.L1^B1>:
 56e:	08 95       	ret

00000570 <__mulsf3>:
 570:	0e 94 cb 02 	call	0x596	; 0x596 <__mulsf3x>
 574:	0c 94 3c 03 	jmp	0x678	; 0x678 <__fp_round>

00000578 <.L^B1>:
 578:	0e 94 2e 03 	call	0x65c	; 0x65c <__fp_pscA>
 57c:	38 f0       	brcs	.+14     	; 0x58c <.L1^B1>
 57e:	0e 94 35 03 	call	0x66a	; 0x66a <__fp_pscB>
 582:	20 f0       	brcs	.+8      	; 0x58c <.L1^B1>
 584:	95 23       	and	r25, r21
 586:	11 f0       	breq	.+4      	; 0x58c <.L1^B1>
 588:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_inf>

0000058c <.L1^B1>:
 58c:	0c 94 2b 03 	jmp	0x656	; 0x656 <__fp_nan>

00000590 <.L2^B1>:
 590:	11 24       	eor	r1, r1
 592:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__fp_szero>

00000596 <__mulsf3x>:
 596:	0e 94 8a 02 	call	0x514	; 0x514 <__fp_split3>
 59a:	70 f3       	brcs	.-36     	; 0x578 <.L^B1>

0000059c <__mulsf3_pse>:
 59c:	95 9f       	mul	r25, r21
 59e:	c1 f3       	breq	.-16     	; 0x590 <.L2^B1>
 5a0:	95 0f       	add	r25, r21
 5a2:	50 e0       	ldi	r21, 0x00	; 0
 5a4:	55 1f       	adc	r21, r21
 5a6:	62 9f       	mul	r22, r18
 5a8:	f0 01       	movw	r30, r0
 5aa:	72 9f       	mul	r23, r18
 5ac:	bb 27       	eor	r27, r27
 5ae:	f0 0d       	add	r31, r0
 5b0:	b1 1d       	adc	r27, r1
 5b2:	63 9f       	mul	r22, r19
 5b4:	aa 27       	eor	r26, r26
 5b6:	f0 0d       	add	r31, r0
 5b8:	b1 1d       	adc	r27, r1
 5ba:	aa 1f       	adc	r26, r26
 5bc:	64 9f       	mul	r22, r20
 5be:	66 27       	eor	r22, r22
 5c0:	b0 0d       	add	r27, r0
 5c2:	a1 1d       	adc	r26, r1
 5c4:	66 1f       	adc	r22, r22
 5c6:	82 9f       	mul	r24, r18
 5c8:	22 27       	eor	r18, r18
 5ca:	b0 0d       	add	r27, r0
 5cc:	a1 1d       	adc	r26, r1
 5ce:	62 1f       	adc	r22, r18
 5d0:	73 9f       	mul	r23, r19
 5d2:	b0 0d       	add	r27, r0
 5d4:	a1 1d       	adc	r26, r1
 5d6:	62 1f       	adc	r22, r18
 5d8:	83 9f       	mul	r24, r19
 5da:	a0 0d       	add	r26, r0
 5dc:	61 1d       	adc	r22, r1
 5de:	22 1f       	adc	r18, r18
 5e0:	74 9f       	mul	r23, r20
 5e2:	33 27       	eor	r19, r19
 5e4:	a0 0d       	add	r26, r0
 5e6:	61 1d       	adc	r22, r1
 5e8:	23 1f       	adc	r18, r19
 5ea:	84 9f       	mul	r24, r20
 5ec:	60 0d       	add	r22, r0
 5ee:	21 1d       	adc	r18, r1
 5f0:	82 2f       	mov	r24, r18
 5f2:	76 2f       	mov	r23, r22
 5f4:	6a 2f       	mov	r22, r26
 5f6:	11 24       	eor	r1, r1
 5f8:	9f 57       	subi	r25, 0x7F	; 127
 5fa:	50 40       	sbci	r21, 0x00	; 0
 5fc:	9a f0       	brmi	.+38     	; 0x624 <.L13^B1>
 5fe:	f1 f0       	breq	.+60     	; 0x63c <.L15^B1>

00000600 <.L10^B1>:
 600:	88 23       	and	r24, r24
 602:	4a f0       	brmi	.+18     	; 0x616 <.L11^B1>
 604:	ee 0f       	add	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	bb 1f       	adc	r27, r27
 60a:	66 1f       	adc	r22, r22
 60c:	77 1f       	adc	r23, r23
 60e:	88 1f       	adc	r24, r24
 610:	91 50       	subi	r25, 0x01	; 1
 612:	50 40       	sbci	r21, 0x00	; 0
 614:	a9 f7       	brne	.-22     	; 0x600 <.L10^B1>

00000616 <.L11^B1>:
 616:	9e 3f       	cpi	r25, 0xFE	; 254
 618:	51 05       	cpc	r21, r1
 61a:	80 f0       	brcs	.+32     	; 0x63c <.L15^B1>
 61c:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_inf>

00000620 <.L12^B1>:
 620:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__fp_szero>

00000624 <.L13^B1>:
 624:	5f 3f       	cpi	r21, 0xFF	; 255
 626:	e4 f3       	brlt	.-8      	; 0x620 <.L12^B1>
 628:	98 3e       	cpi	r25, 0xE8	; 232
 62a:	d4 f3       	brlt	.-12     	; 0x620 <.L12^B1>

0000062c <.L14^B1>:
 62c:	86 95       	lsr	r24
 62e:	77 95       	ror	r23
 630:	67 95       	ror	r22
 632:	b7 95       	ror	r27
 634:	f7 95       	ror	r31
 636:	e7 95       	ror	r30
 638:	9f 5f       	subi	r25, 0xFF	; 255
 63a:	c1 f7       	brne	.-16     	; 0x62c <.L14^B1>

0000063c <.L15^B1>:
 63c:	fe 2b       	or	r31, r30
 63e:	88 0f       	add	r24, r24
 640:	91 1d       	adc	r25, r1
 642:	96 95       	lsr	r25
 644:	87 95       	ror	r24
 646:	97 f9       	bld	r25, 7
 648:	08 95       	ret

0000064a <__fp_inf>:
 64a:	97 f9       	bld	r25, 7
 64c:	9f 67       	ori	r25, 0x7F	; 127
 64e:	80 e8       	ldi	r24, 0x80	; 128
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	08 95       	ret

00000656 <__fp_nan>:
 656:	9f ef       	ldi	r25, 0xFF	; 255
 658:	80 ec       	ldi	r24, 0xC0	; 192
 65a:	08 95       	ret

0000065c <__fp_pscA>:
 65c:	00 24       	eor	r0, r0
 65e:	0a 94       	dec	r0
 660:	16 16       	cp	r1, r22
 662:	17 06       	cpc	r1, r23
 664:	18 06       	cpc	r1, r24
 666:	09 06       	cpc	r0, r25
 668:	08 95       	ret

0000066a <__fp_pscB>:
 66a:	00 24       	eor	r0, r0
 66c:	0a 94       	dec	r0
 66e:	12 16       	cp	r1, r18
 670:	13 06       	cpc	r1, r19
 672:	14 06       	cpc	r1, r20
 674:	05 06       	cpc	r0, r21
 676:	08 95       	ret

00000678 <__fp_round>:
 678:	09 2e       	mov	r0, r25
 67a:	03 94       	inc	r0
 67c:	00 0c       	add	r0, r0
 67e:	11 f4       	brne	.+4      	; 0x684 <.L1^B1>
 680:	88 23       	and	r24, r24
 682:	52 f0       	brmi	.+20     	; 0x698 <.L3^B1>

00000684 <.L1^B1>:
 684:	bb 0f       	add	r27, r27
 686:	40 f4       	brcc	.+16     	; 0x698 <.L3^B1>
 688:	bf 2b       	or	r27, r31
 68a:	11 f4       	brne	.+4      	; 0x690 <.L2^B1>
 68c:	60 ff       	sbrs	r22, 0
 68e:	04 c0       	rjmp	.+8      	; 0x698 <.L3^B1>

00000690 <.L2^B1>:
 690:	6f 5f       	subi	r22, 0xFF	; 255
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	8f 4f       	sbci	r24, 0xFF	; 255
 696:	9f 4f       	sbci	r25, 0xFF	; 255

00000698 <.L3^B1>:
 698:	08 95       	ret

0000069a <_exit>:
 69a:	f8 94       	cli

0000069c <__stop_program>:
 69c:	ff cf       	rjmp	.-2      	; 0x69c <__stop_program>
