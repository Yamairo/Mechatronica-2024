
bin\Debug\Portaalkraan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800200  00002576  0000262a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002576  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800224  00800224  0000264e  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000264e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00002651  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002664  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000158  00000000  00000000  000026a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00001d37  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000128a  00000000  00000000  00004537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00001754  00000000  00000000  000057c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000424  00000000  00000000  00006f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000792  00000000  00000000  0000733c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001ed  00000000  00000000  00007ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__vector_21>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
      f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
      f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
      fa:	e6 e7       	ldi	r30, 0x76	; 118

000000fc <.Loc.4>:
      fc:	f5 e2       	ldi	r31, 0x25	; 37

000000fe <.Loc.5>:
      fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
     100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
     102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
     104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
     106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
     108:	a4 32       	cpi	r26, 0x24	; 36

0000010a <.Loc.11>:
     10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
     10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
     110:	a4 e2       	ldi	r26, 0x24	; 36

00000112 <.Loc.2>:
     112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
     114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
     116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
     118:	a4 33       	cpi	r26, 0x34	; 52

0000011a <.Loc.6>:
     11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
     11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
     11e:	0e 94 29 06 	call	0xc52	; 0xc52 <main>
     122:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <init_interface>:
	~0x66, ~0xB6, ~0xBE, ~0xE0,
	~0xFE, ~0xF6, ~0xEE, ~0x3E,
	~0x9C, ~0x7A, ~0x9E, ~0x8E
};

void init_interface (void) {
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62

00000132 <.Loc.1>:
	// Initialiseer de pinnen voor datain, shiftclk en latchclk als output
	DDR_SDI    |= (1 << SDI_BIT);
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	fc 01       	movw	r30, r24
     138:	20 81       	ld	r18, Z
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	91 e0       	ldi	r25, 0x01	; 1

0000013e <.Loc.2>:
     13e:	20 62       	ori	r18, 0x20	; 32
     140:	fc 01       	movw	r30, r24
     142:	20 83       	st	Z, r18

00000144 <.Loc.3>:
	DDR_SFTCLK |= (1 << SFTCLK_BIT);
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	fc 01       	movw	r30, r24
     14a:	20 81       	ld	r18, Z
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	91 e0       	ldi	r25, 0x01	; 1

00000150 <.Loc.4>:
     150:	20 61       	ori	r18, 0x10	; 16
     152:	fc 01       	movw	r30, r24
     154:	20 83       	st	Z, r18

00000156 <.Loc.5>:
	DDR_LCHCLK |= (1 << LCHCLK_BIT);
     156:	83 e3       	ldi	r24, 0x33	; 51
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	fc 01       	movw	r30, r24
     15c:	20 81       	ld	r18, Z
     15e:	83 e3       	ldi	r24, 0x33	; 51
     160:	90 e0       	ldi	r25, 0x00	; 0

00000162 <.Loc.6>:
     162:	20 62       	ori	r18, 0x20	; 32
     164:	fc 01       	movw	r30, r24
     166:	20 83       	st	Z, r18

00000168 <.Loc.7>:

	// Maak shiftclk en latchclk laag
	PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
     168:	82 e0       	ldi	r24, 0x02	; 2
     16a:	91 e0       	ldi	r25, 0x01	; 1
     16c:	fc 01       	movw	r30, r24
     16e:	20 81       	ld	r18, Z

00000170 <.Loc.8>:
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	91 e0       	ldi	r25, 0x01	; 1

00000174 <.Loc.9>:
     174:	2f 7e       	andi	r18, 0xEF	; 239
     176:	fc 01       	movw	r30, r24
     178:	20 83       	st	Z, r18

0000017a <.Loc.10>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
     17a:	84 e3       	ldi	r24, 0x34	; 52
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	fc 01       	movw	r30, r24
     180:	20 81       	ld	r18, Z

00000182 <.Loc.11>:
     182:	84 e3       	ldi	r24, 0x34	; 52
     184:	90 e0       	ldi	r25, 0x00	; 0

00000186 <.Loc.12>:
     186:	2f 7d       	andi	r18, 0xDF	; 223
     188:	fc 01       	movw	r30, r24
     18a:	20 83       	st	Z, r18

0000018c <.Loc.13>:
}
     18c:	00 00       	nop
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	08 95       	ret

00000194 <send_data>:

void send_data(char data) {
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	00 d0       	rcall	.+0      	; 0x19a <L0^A>

0000019a <L0^A>:
     19a:	0f 92       	push	r0
     19c:	0f 92       	push	r0
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	8d 83       	std	Y+5, r24	; 0x05

000001a4 <.LBB26>:
	// Herhaal voor alle bits in een char
	for (unsigned i = 0; i < 8; i++) {
     1a4:	1a 82       	std	Y+2, r1	; 0x02
     1a6:	19 82       	std	Y+1, r1	; 0x01

000001a8 <.Loc.16>:
     1a8:	39 c0       	rjmp	.+114    	; 0x21c <.L3>

000001aa <.L6>:
		// Bepaal de waarde van de bit die je naar het schuifregister
		// wil sturen
		int bit = data & 1;
     1aa:	8d 81       	ldd	r24, Y+5	; 0x05
     1ac:	08 2e       	mov	r0, r24
     1ae:	00 0c       	add	r0, r0
     1b0:	99 0b       	sbc	r25, r25

000001b2 <.Loc.18>:
     1b2:	81 70       	andi	r24, 0x01	; 1
     1b4:	99 27       	eor	r25, r25
     1b6:	9c 83       	std	Y+4, r25	; 0x04
     1b8:	8b 83       	std	Y+3, r24	; 0x03

000001ba <.Loc.19>:
		data >>= 1;
     1ba:	8d 81       	ldd	r24, Y+5	; 0x05
     1bc:	85 95       	asr	r24
     1be:	8d 83       	std	Y+5, r24	; 0x05

000001c0 <.Loc.20>:

		// Maak de juiste pin hoog of laag op basis van de bepaalde waarde
		// van het bit
		if (bit) {
     1c0:	8b 81       	ldd	r24, Y+3	; 0x03
     1c2:	9c 81       	ldd	r25, Y+4	; 0x04
     1c4:	00 97       	sbiw	r24, 0x00	; 0
     1c6:	51 f0       	breq	.+20     	; 0x1dc <.L4>

000001c8 <.Loc.21>:
			PORT_SDI |= (1 << SDI_BIT);
     1c8:	82 e0       	ldi	r24, 0x02	; 2
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	fc 01       	movw	r30, r24
     1ce:	20 81       	ld	r18, Z
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	91 e0       	ldi	r25, 0x01	; 1

000001d4 <.Loc.22>:
     1d4:	20 62       	ori	r18, 0x20	; 32
     1d6:	fc 01       	movw	r30, r24
     1d8:	20 83       	st	Z, r18
     1da:	09 c0       	rjmp	.+18     	; 0x1ee <.L5>

000001dc <.L4>:
		} else {
			PORT_SDI &= ~(1 << SDI_BIT);
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 81       	ld	r18, Z

000001e4 <.Loc.24>:
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	91 e0       	ldi	r25, 0x01	; 1

000001e8 <.Loc.25>:
     1e8:	2f 7d       	andi	r18, 0xDF	; 223
     1ea:	fc 01       	movw	r30, r24
     1ec:	20 83       	st	Z, r18

000001ee <.L5>:
		}

		// Toggle shiftclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
		// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
		// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
		PORT_SFTCLK |= (1 << SFTCLK_BIT);
     1ee:	82 e0       	ldi	r24, 0x02	; 2
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 81       	ld	r18, Z
     1f6:	82 e0       	ldi	r24, 0x02	; 2
     1f8:	91 e0       	ldi	r25, 0x01	; 1

000001fa <.Loc.27>:
     1fa:	20 61       	ori	r18, 0x10	; 16
     1fc:	fc 01       	movw	r30, r24
     1fe:	20 83       	st	Z, r18

00000200 <.Loc.28>:
		PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	fc 01       	movw	r30, r24
     206:	20 81       	ld	r18, Z

00000208 <.Loc.29>:
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	91 e0       	ldi	r25, 0x01	; 1

0000020c <.Loc.30>:
     20c:	2f 7e       	andi	r18, 0xEF	; 239
     20e:	fc 01       	movw	r30, r24
     210:	20 83       	st	Z, r18

00000212 <.LBE27>:
	for (unsigned i = 0; i < 8; i++) {
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	9a 81       	ldd	r25, Y+2	; 0x02
     216:	01 96       	adiw	r24, 0x01	; 1
     218:	9a 83       	std	Y+2, r25	; 0x02
     21a:	89 83       	std	Y+1, r24	; 0x01

0000021c <.L3>:
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	9a 81       	ldd	r25, Y+2	; 0x02
     220:	87 30       	cpi	r24, 0x07	; 7
     222:	91 05       	cpc	r25, r1
     224:	11 f2       	breq	.-124    	; 0x1aa <.L6>
     226:	08 f2       	brcs	.-126    	; 0x1aa <.L6>

00000228 <.LBE26>:
	}
}
     228:	00 00       	nop
     22a:	00 00       	nop
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	08 95       	ret

0000023c <send_enable>:

void send_enable(int display_nummer) {
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	0f 92       	push	r0
     242:	0f 92       	push	r0
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	9a 83       	std	Y+2, r25	; 0x02
     24a:	89 83       	std	Y+1, r24	; 0x01

0000024c <.Loc.35>:
	send_data(0x10 << display_nummer);
     24c:	80 e1       	ldi	r24, 0x10	; 16
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	09 80       	ldd	r0, Y+1	; 0x01
     252:	02 c0       	rjmp	.+4      	; 0x258 <.L2^B1>

00000254 <.L1^B1>:
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25

00000258 <.L2^B1>:
     258:	0a 94       	dec	r0
     25a:	e2 f7       	brpl	.-8      	; 0x254 <.L1^B1>

0000025c <.Loc.36>:
     25c:	0e 94 ca 00 	call	0x194	; 0x194 <send_data>

00000260 <.Loc.37>:
}
     260:	00 00       	nop
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <display>:

void display(char data, int display_nummer) {
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	00 d0       	rcall	.+0      	; 0x272 <L0^A>

00000272 <L0^A>:
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	89 83       	std	Y+1, r24	; 0x01
     278:	7b 83       	std	Y+3, r23	; 0x03
     27a:	6a 83       	std	Y+2, r22	; 0x02

0000027c <.Loc.39>:
	send_data(data);
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	0e 94 ca 00 	call	0x194	; 0x194 <send_data>

00000282 <.Loc.40>:
	send_enable(display_nummer);
     282:	8a 81       	ldd	r24, Y+2	; 0x02
     284:	9b 81       	ldd	r25, Y+3	; 0x03
     286:	0e 94 1e 01 	call	0x23c	; 0x23c <send_enable>

0000028a <.Loc.41>:

	// Toggle latchclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
	// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
	// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
	PORT_LCHCLK |= (1 << LCHCLK_BIT);
     28a:	84 e3       	ldi	r24, 0x34	; 52
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	fc 01       	movw	r30, r24
     290:	20 81       	ld	r18, Z
     292:	84 e3       	ldi	r24, 0x34	; 52
     294:	90 e0       	ldi	r25, 0x00	; 0

00000296 <.Loc.42>:
     296:	20 62       	ori	r18, 0x20	; 32
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18

0000029c <.Loc.43>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
     29c:	84 e3       	ldi	r24, 0x34	; 52
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	fc 01       	movw	r30, r24
     2a2:	20 81       	ld	r18, Z

000002a4 <.Loc.44>:
     2a4:	84 e3       	ldi	r24, 0x34	; 52
     2a6:	90 e0       	ldi	r25, 0x00	; 0

000002a8 <.Loc.45>:
     2a8:	2f 7d       	andi	r18, 0xDF	; 223
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18

000002ae <.Loc.46>:
}
     2ae:	00 00       	nop
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <display_getal>:

void display_getal(unsigned int getal) {
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	a6 97       	sbiw	r28, 0x26	; 38
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	cd bf       	out	0x3d, r28	; 61
     2d0:	9a 8b       	std	Y+18, r25	; 0x12
     2d2:	89 8b       	std	Y+17, r24	; 0x11

000002d4 <.LBB28>:
	for (int i = 0; i < 4; i++) {
     2d4:	1a 82       	std	Y+2, r1	; 0x02
     2d6:	19 82       	std	Y+1, r1	; 0x01

000002d8 <.Loc.49>:
     2d8:	cc c0       	rjmp	.+408    	; 0x472 <.L10>

000002da <.L19>:
		display(segmentcodes[getal%10], i);
     2da:	49 89       	ldd	r20, Y+17	; 0x11
     2dc:	5a 89       	ldd	r21, Y+18	; 0x12
     2de:	9a 01       	movw	r18, r20
     2e0:	ad ec       	ldi	r26, 0xCD	; 205
     2e2:	bc ec       	ldi	r27, 0xCC	; 204
     2e4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__umulhisi3>
     2e8:	9c 01       	movw	r18, r24
     2ea:	36 95       	lsr	r19
     2ec:	27 95       	ror	r18
     2ee:	36 95       	lsr	r19
     2f0:	27 95       	ror	r18
     2f2:	36 95       	lsr	r19
     2f4:	27 95       	ror	r18
     2f6:	c9 01       	movw	r24, r18
     2f8:	88 0f       	add	r24, r24
     2fa:	99 1f       	adc	r25, r25
     2fc:	88 0f       	add	r24, r24
     2fe:	99 1f       	adc	r25, r25
     300:	82 0f       	add	r24, r18
     302:	93 1f       	adc	r25, r19
     304:	88 0f       	add	r24, r24
     306:	99 1f       	adc	r25, r25
     308:	9a 01       	movw	r18, r20
     30a:	28 1b       	sub	r18, r24
     30c:	39 0b       	sbc	r19, r25

0000030e <.Loc.51>:
     30e:	c9 01       	movw	r24, r18
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	8e 5f       	subi	r24, 0xFE	; 254
     316:	9d 4f       	sbci	r25, 0xFD	; 253
     318:	dc 01       	movw	r26, r24
     31a:	8d 91       	ld	r24, X+
     31c:	9c 91       	ld	r25, X

0000031e <.Loc.52>:
     31e:	28 2f       	mov	r18, r24
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	9a 81       	ldd	r25, Y+2	; 0x02
     324:	bc 01       	movw	r22, r24
     326:	82 2f       	mov	r24, r18
     328:	0e 94 36 01 	call	0x26c	; 0x26c <display>

0000032c <.Loc.53>:
		getal /= 10;
     32c:	89 89       	ldd	r24, Y+17	; 0x11
     32e:	9a 89       	ldd	r25, Y+18	; 0x12
     330:	9c 01       	movw	r18, r24
     332:	ad ec       	ldi	r26, 0xCD	; 205
     334:	bc ec       	ldi	r27, 0xCC	; 204
     336:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__umulhisi3>
     33a:	96 95       	lsr	r25
     33c:	87 95       	ror	r24
     33e:	96 95       	lsr	r25
     340:	87 95       	ror	r24
     342:	96 95       	lsr	r25
     344:	87 95       	ror	r24
     346:	9a 8b       	std	Y+18, r25	; 0x12
     348:	89 8b       	std	Y+17, r24	; 0x11
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	a0 e8       	ldi	r26, 0x80	; 128
     350:	bf e3       	ldi	r27, 0x3F	; 63
     352:	8b 83       	std	Y+3, r24	; 0x03
     354:	9c 83       	std	Y+4, r25	; 0x04
     356:	ad 83       	std	Y+5, r26	; 0x05
     358:	be 83       	std	Y+6, r27	; 0x06

0000035a <.LBB29>:

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	4a e7       	ldi	r20, 0x7A	; 122
     360:	55 e4       	ldi	r21, 0x45	; 69
     362:	6b 81       	ldd	r22, Y+3	; 0x03
     364:	7c 81       	ldd	r23, Y+4	; 0x04
     366:	8d 81       	ldd	r24, Y+5	; 0x05
     368:	9e 81       	ldd	r25, Y+6	; 0x06
     36a:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
     36e:	6f 8b       	std	Y+23, r22	; 0x17
     370:	78 8f       	std	Y+24, r23	; 0x18
     372:	89 8f       	std	Y+25, r24	; 0x19
     374:	9a 8f       	std	Y+26, r25	; 0x1a
     376:	8f 89       	ldd	r24, Y+23	; 0x17
     378:	98 8d       	ldd	r25, Y+24	; 0x18
     37a:	a9 8d       	ldd	r26, Y+25	; 0x19
     37c:	ba 8d       	ldd	r27, Y+26	; 0x1a
     37e:	8f 83       	std	Y+7, r24	; 0x07
     380:	98 87       	std	Y+8, r25	; 0x08
     382:	a9 87       	std	Y+9, r26	; 0x09
     384:	ba 87       	std	Y+10, r27	; 0x0a

00000386 <.Loc.55>:
	if (__tmp < 1.0)
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	40 e8       	ldi	r20, 0x80	; 128
     38c:	5f e3       	ldi	r21, 0x3F	; 63
     38e:	6f 81       	ldd	r22, Y+7	; 0x07
     390:	78 85       	ldd	r23, Y+8	; 0x08
     392:	89 85       	ldd	r24, Y+9	; 0x09
     394:	9a 85       	ldd	r25, Y+10	; 0x0a
     396:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
     39a:	88 23       	and	r24, r24
     39c:	2c f4       	brge	.+10     	; 0x3a8 <.L22>

0000039e <.Loc.56>:
		__ticks = 1;
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	9c 87       	std	Y+12, r25	; 0x0c
     3a4:	8b 87       	std	Y+11, r24	; 0x0b
     3a6:	55 c0       	rjmp	.+170    	; 0x452 <.L13>

000003a8 <.L22>:
	else if (__tmp > 65535)
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	3f ef       	ldi	r19, 0xFF	; 255
     3ac:	4f e7       	ldi	r20, 0x7F	; 127
     3ae:	57 e4       	ldi	r21, 0x47	; 71
     3b0:	6f 81       	ldd	r22, Y+7	; 0x07
     3b2:	78 85       	ldd	r23, Y+8	; 0x08
     3b4:	89 85       	ldd	r24, Y+9	; 0x09
     3b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b8:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
     3bc:	88 23       	and	r24, r24
     3be:	d9 f1       	breq	.+118    	; 0x436 <.L23>
     3c0:	d4 f1       	brlt	.+116    	; 0x436 <.L23>

000003c2 <.Loc.58>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	40 e2       	ldi	r20, 0x20	; 32
     3c8:	51 e4       	ldi	r21, 0x41	; 65
     3ca:	6b 81       	ldd	r22, Y+3	; 0x03
     3cc:	7c 81       	ldd	r23, Y+4	; 0x04
     3ce:	8d 81       	ldd	r24, Y+5	; 0x05
     3d0:	9e 81       	ldd	r25, Y+6	; 0x06
     3d2:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
     3d6:	6b 8f       	std	Y+27, r22	; 0x1b
     3d8:	7c 8f       	std	Y+28, r23	; 0x1c
     3da:	8d 8f       	std	Y+29, r24	; 0x1d
     3dc:	9e 8f       	std	Y+30, r25	; 0x1e
     3de:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3e2:	ad 8d       	ldd	r26, Y+29	; 0x1d
     3e4:	be 8d       	ldd	r27, Y+30	; 0x1e
     3e6:	8b 8b       	std	Y+19, r24	; 0x13
     3e8:	9c 8b       	std	Y+20, r25	; 0x14
     3ea:	ad 8b       	std	Y+21, r26	; 0x15
     3ec:	be 8b       	std	Y+22, r27	; 0x16

000003ee <.Loc.59>:
     3ee:	6b 89       	ldd	r22, Y+19	; 0x13
     3f0:	7c 89       	ldd	r23, Y+20	; 0x14
     3f2:	8d 89       	ldd	r24, Y+21	; 0x15
     3f4:	9e 89       	ldd	r25, Y+22	; 0x16
     3f6:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
     3fa:	6f 8f       	std	Y+31, r22	; 0x1f
     3fc:	78 a3       	std	Y+32, r23	; 0x20
     3fe:	89 a3       	std	Y+33, r24	; 0x21
     400:	9a a3       	std	Y+34, r25	; 0x22
     402:	af 8d       	ldd	r26, Y+31	; 0x1f
     404:	b8 a1       	ldd	r27, Y+32	; 0x20
     406:	bc 87       	std	Y+12, r27	; 0x0c
     408:	ab 87       	std	Y+11, r26	; 0x0b

0000040a <.Loc.60>:
		while(__ticks)
     40a:	10 c0       	rjmp	.+32     	; 0x42c <.L16>

0000040c <.L17>:
     40c:	80 e9       	ldi	r24, 0x90	; 144
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	9e 87       	std	Y+14, r25	; 0x0e
     412:	8d 87       	std	Y+13, r24	; 0x0d

00000414 <.LBB31>:
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
     414:	8d 85       	ldd	r24, Y+13	; 0x0d
     416:	9e 85       	ldd	r25, Y+14	; 0x0e

00000418 <.L1^B2>:
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <.L1^B2>
     41c:	9e 87       	std	Y+14, r25	; 0x0e
     41e:	8d 87       	std	Y+13, r24	; 0x0d

00000420 <.Loc.62>:
	...

00000422 <.LBE31>:
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     422:	8b 85       	ldd	r24, Y+11	; 0x0b
     424:	9c 85       	ldd	r25, Y+12	; 0x0c
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	9c 87       	std	Y+12, r25	; 0x0c
     42a:	8b 87       	std	Y+11, r24	; 0x0b

0000042c <.L16>:
		while(__ticks)
     42c:	8b 85       	ldd	r24, Y+11	; 0x0b
     42e:	9c 85       	ldd	r25, Y+12	; 0x0c
     430:	00 97       	sbiw	r24, 0x00	; 0
     432:	61 f7       	brne	.-40     	; 0x40c <.L17>

00000434 <.Loc.65>:
		}
		return;
     434:	19 c0       	rjmp	.+50     	; 0x468 <.L18>

00000436 <.L23>:
	}
	else
		__ticks = (uint16_t)__tmp;
     436:	6f 81       	ldd	r22, Y+7	; 0x07
     438:	78 85       	ldd	r23, Y+8	; 0x08
     43a:	89 85       	ldd	r24, Y+9	; 0x09
     43c:	9a 85       	ldd	r25, Y+10	; 0x0a
     43e:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
     442:	6b a3       	std	Y+35, r22	; 0x23
     444:	7c a3       	std	Y+36, r23	; 0x24
     446:	8d a3       	std	Y+37, r24	; 0x25
     448:	9e a3       	std	Y+38, r25	; 0x26
     44a:	eb a1       	ldd	r30, Y+35	; 0x23
     44c:	fc a1       	ldd	r31, Y+36	; 0x24
     44e:	fc 87       	std	Y+12, r31	; 0x0c
     450:	eb 87       	std	Y+11, r30	; 0x0b

00000452 <.L13>:
     452:	8b 85       	ldd	r24, Y+11	; 0x0b
     454:	9c 85       	ldd	r25, Y+12	; 0x0c
     456:	98 8b       	std	Y+16, r25	; 0x10
     458:	8f 87       	std	Y+15, r24	; 0x0f

0000045a <.LBB33>:
     45a:	8f 85       	ldd	r24, Y+15	; 0x0f
     45c:	98 89       	ldd	r25, Y+16	; 0x10

0000045e <.L1^B3>:
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <.L1^B3>
     462:	98 8b       	std	Y+16, r25	; 0x10
     464:	8f 87       	std	Y+15, r24	; 0x0f

00000466 <.Loc.68>:
	...

00000468 <.L18>:
	for (int i = 0; i < 4; i++) {
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	9a 81       	ldd	r25, Y+2	; 0x02
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	9a 83       	std	Y+2, r25	; 0x02
     470:	89 83       	std	Y+1, r24	; 0x01

00000472 <.L10>:
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	9a 81       	ldd	r25, Y+2	; 0x02
     476:	83 30       	cpi	r24, 0x03	; 3
     478:	91 05       	cpc	r25, r1
     47a:	09 f0       	breq	.+2      	; 0x47e <L0^A>

0000047c <L0^A>:
     47c:	0c f4       	brge	.+2      	; 0x480 <.LBE28>

0000047e <L0^A>:
     47e:	2d cf       	rjmp	.-422    	; 0x2da <.L19>

00000480 <.LBE28>:
		_delay_ms(1);   // 1 kHz
	}
}
     480:	00 00       	nop
     482:	00 00       	nop
     484:	a6 96       	adiw	r28, 0x26	; 38
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <kiesCoordinaat>:

int kiesCoordinaat(void) {
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	c8 55       	subi	r28, 0x58	; 88
     4a0:	d1 09       	sbc	r29, r1
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd bf       	out	0x3d, r28	; 61

000004ac <.Loc.73>:
    // Dit coordinaat wordt ingesteld om gebruikt te worden voor het display
    int coordinaat = 0;
     4ac:	1a 82       	std	Y+2, r1	; 0x02
     4ae:	19 82       	std	Y+1, r1	; 0x01

000004b0 <.L49>:
	// Loop totdat S3 is ingedrukt
    while (1){
        /*
		Als S1 wordt ingedrukt verlaag het coordinaat met 1
		*/
        if (!(PINF & (1 << S1)) && (coordinaat > 0)) {
     4b0:	8f e2       	ldi	r24, 0x2F	; 47
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	dc 01       	movw	r26, r24
     4b6:	8c 91       	ld	r24, X

000004b8 <.Loc.75>:
     4b8:	88 2f       	mov	r24, r24
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	82 70       	andi	r24, 0x02	; 2
     4be:	99 27       	eor	r25, r25

000004c0 <.Loc.76>:
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <.Loc.77>

000004c4 <L0^A>:
     4c4:	c7 c0       	rjmp	.+398    	; 0x654 <.L25>

000004c6 <.Loc.77>:
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ca:	00 97       	sbiw	r24, 0x00	; 0
     4cc:	09 f0       	breq	.+2      	; 0x4d0 <L0^A>

000004ce <L0^A>:
     4ce:	0c f4       	brge	.+2      	; 0x4d2 <.Loc.78>

000004d0 <L0^A>:
     4d0:	c1 c0       	rjmp	.+386    	; 0x654 <.L25>

000004d2 <.Loc.78>:
            coordinaat--;
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	9a 81       	ldd	r25, Y+2	; 0x02
     4d6:	01 97       	sbiw	r24, 0x01	; 1
     4d8:	9a 83       	std	Y+2, r25	; 0x02
     4da:	89 83       	std	Y+1, r24	; 0x01

000004dc <.Loc.79>:
            while (!(PINF & (1 << S1))) {
     4dc:	b0 c0       	rjmp	.+352    	; 0x63e <.L26>

000004de <.L35>:
                _delay_ms(tijd);
     4de:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <tijd>
     4e2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <tijd+0x1>
     4e6:	9c 01       	movw	r18, r24
     4e8:	99 0f       	add	r25, r25
     4ea:	44 0b       	sbc	r20, r20
     4ec:	55 0b       	sbc	r21, r21
     4ee:	29 ab       	std	Y+49, r18	; 0x31
     4f0:	3a ab       	std	Y+50, r19	; 0x32
     4f2:	4b ab       	std	Y+51, r20	; 0x33
     4f4:	5c ab       	std	Y+52, r21	; 0x34
     4f6:	69 a9       	ldd	r22, Y+49	; 0x31
     4f8:	7a a9       	ldd	r23, Y+50	; 0x32
     4fa:	8b a9       	ldd	r24, Y+51	; 0x33
     4fc:	9c a9       	ldd	r25, Y+52	; 0x34
     4fe:	0e 94 97 11 	call	0x232e	; 0x232e <__floatsisf>
     502:	69 a3       	std	Y+33, r22	; 0x21
     504:	7a a3       	std	Y+34, r23	; 0x22
     506:	8b a3       	std	Y+35, r24	; 0x23
     508:	9c a3       	std	Y+36, r25	; 0x24
     50a:	89 a1       	ldd	r24, Y+33	; 0x21
     50c:	9a a1       	ldd	r25, Y+34	; 0x22
     50e:	ab a1       	ldd	r26, Y+35	; 0x23
     510:	bc a1       	ldd	r27, Y+36	; 0x24
     512:	8d 83       	std	Y+5, r24	; 0x05
     514:	9e 83       	std	Y+6, r25	; 0x06
     516:	af 83       	std	Y+7, r26	; 0x07
     518:	b8 87       	std	Y+8, r27	; 0x08

0000051a <.LBB35>:
	__tmp = ((F_CPU) / 4e3) * __ms;
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	4a e7       	ldi	r20, 0x7A	; 122
     520:	55 e4       	ldi	r21, 0x45	; 69
     522:	6d 81       	ldd	r22, Y+5	; 0x05
     524:	7e 81       	ldd	r23, Y+6	; 0x06
     526:	8f 81       	ldd	r24, Y+7	; 0x07
     528:	98 85       	ldd	r25, Y+8	; 0x08
     52a:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
     52e:	6d ab       	std	Y+53, r22	; 0x35
     530:	7e ab       	std	Y+54, r23	; 0x36
     532:	8f ab       	std	Y+55, r24	; 0x37
     534:	98 af       	std	Y+56, r25	; 0x38
     536:	2d a9       	ldd	r18, Y+53	; 0x35
     538:	3e a9       	ldd	r19, Y+54	; 0x36
     53a:	4f a9       	ldd	r20, Y+55	; 0x37
     53c:	58 ad       	ldd	r21, Y+56	; 0x38
     53e:	29 87       	std	Y+9, r18	; 0x09
     540:	3a 87       	std	Y+10, r19	; 0x0a
     542:	4b 87       	std	Y+11, r20	; 0x0b
     544:	5c 87       	std	Y+12, r21	; 0x0c

00000546 <.Loc.82>:
	if (__tmp < 1.0)
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	40 e8       	ldi	r20, 0x80	; 128
     54c:	5f e3       	ldi	r21, 0x3F	; 63
     54e:	69 85       	ldd	r22, Y+9	; 0x09
     550:	7a 85       	ldd	r23, Y+10	; 0x0a
     552:	8b 85       	ldd	r24, Y+11	; 0x0b
     554:	9c 85       	ldd	r25, Y+12	; 0x0c
     556:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
     55a:	88 23       	and	r24, r24
     55c:	2c f4       	brge	.+10     	; 0x568 <.L54>

0000055e <.Loc.83>:
		__ticks = 1;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	9e 87       	std	Y+14, r25	; 0x0e
     564:	8d 87       	std	Y+13, r24	; 0x0d
     566:	5c c0       	rjmp	.+184    	; 0x620 <.L29>

00000568 <.L54>:
	else if (__tmp > 65535)
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	3f ef       	ldi	r19, 0xFF	; 255
     56c:	4f e7       	ldi	r20, 0x7F	; 127
     56e:	57 e4       	ldi	r21, 0x47	; 71
     570:	69 85       	ldd	r22, Y+9	; 0x09
     572:	7a 85       	ldd	r23, Y+10	; 0x0a
     574:	8b 85       	ldd	r24, Y+11	; 0x0b
     576:	9c 85       	ldd	r25, Y+12	; 0x0c
     578:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
     57c:	88 23       	and	r24, r24
     57e:	09 f0       	breq	.+2      	; 0x582 <L0^A>

00000580 <L0^A>:
     580:	0c f4       	brge	.+2      	; 0x584 <.Loc.85>

00000582 <L0^A>:
     582:	3c c0       	rjmp	.+120    	; 0x5fc <.L55>

00000584 <.Loc.85>:
		__ticks = (uint16_t) (__ms * 10.0);
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	40 e2       	ldi	r20, 0x20	; 32
     58a:	51 e4       	ldi	r21, 0x41	; 65
     58c:	6d 81       	ldd	r22, Y+5	; 0x05
     58e:	7e 81       	ldd	r23, Y+6	; 0x06
     590:	8f 81       	ldd	r24, Y+7	; 0x07
     592:	98 85       	ldd	r25, Y+8	; 0x08
     594:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
     598:	69 af       	std	Y+57, r22	; 0x39
     59a:	7a af       	std	Y+58, r23	; 0x3a
     59c:	8b af       	std	Y+59, r24	; 0x3b
     59e:	9c af       	std	Y+60, r25	; 0x3c
     5a0:	89 ad       	ldd	r24, Y+57	; 0x39
     5a2:	9a ad       	ldd	r25, Y+58	; 0x3a
     5a4:	ab ad       	ldd	r26, Y+59	; 0x3b
     5a6:	bc ad       	ldd	r27, Y+60	; 0x3c
     5a8:	89 a7       	std	Y+41, r24	; 0x29
     5aa:	9a a7       	std	Y+42, r25	; 0x2a
     5ac:	ab a7       	std	Y+43, r26	; 0x2b
     5ae:	bc a7       	std	Y+44, r27	; 0x2c

000005b0 <.Loc.86>:
     5b0:	69 a5       	ldd	r22, Y+41	; 0x29
     5b2:	7a a5       	ldd	r23, Y+42	; 0x2a
     5b4:	8b a5       	ldd	r24, Y+43	; 0x2b
     5b6:	9c a5       	ldd	r25, Y+44	; 0x2c
     5b8:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
     5bc:	21 96       	adiw	r28, 0x01	; 1
     5be:	6c af       	std	Y+60, r22	; 0x3c
     5c0:	7d af       	std	Y+61, r23	; 0x3d
     5c2:	8e af       	std	Y+62, r24	; 0x3e
     5c4:	9f af       	std	Y+63, r25	; 0x3f
     5c6:	21 97       	sbiw	r28, 0x01	; 1
     5c8:	ad ad       	ldd	r26, Y+61	; 0x3d
     5ca:	be ad       	ldd	r27, Y+62	; 0x3e
     5cc:	be 87       	std	Y+14, r27	; 0x0e
     5ce:	ad 87       	std	Y+13, r26	; 0x0d

000005d0 <.Loc.87>:
		while(__ticks)
     5d0:	10 c0       	rjmp	.+32     	; 0x5f2 <.L32>

000005d2 <.L33>:
     5d2:	80 e9       	ldi	r24, 0x90	; 144
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	98 8b       	std	Y+16, r25	; 0x10
     5d8:	8f 87       	std	Y+15, r24	; 0x0f

000005da <.LBB37>:
     5da:	8f 85       	ldd	r24, Y+15	; 0x0f
     5dc:	98 89       	ldd	r25, Y+16	; 0x10

000005de <.L1^B4>:
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	f1 f7       	brne	.-4      	; 0x5de <.L1^B4>
     5e2:	98 8b       	std	Y+16, r25	; 0x10
     5e4:	8f 87       	std	Y+15, r24	; 0x0f

000005e6 <.Loc.89>:
	...

000005e8 <.LBE37>:
			__ticks --;
     5e8:	8d 85       	ldd	r24, Y+13	; 0x0d
     5ea:	9e 85       	ldd	r25, Y+14	; 0x0e
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	9e 87       	std	Y+14, r25	; 0x0e
     5f0:	8d 87       	std	Y+13, r24	; 0x0d

000005f2 <.L32>:
		while(__ticks)
     5f2:	8d 85       	ldd	r24, Y+13	; 0x0d
     5f4:	9e 85       	ldd	r25, Y+14	; 0x0e
     5f6:	00 97       	sbiw	r24, 0x00	; 0
     5f8:	61 f7       	brne	.-40     	; 0x5d2 <.L33>

000005fa <.Loc.92>:
		return;
     5fa:	1d c0       	rjmp	.+58     	; 0x636 <.L34>

000005fc <.L55>:
		__ticks = (uint16_t)__tmp;
     5fc:	69 85       	ldd	r22, Y+9	; 0x09
     5fe:	7a 85       	ldd	r23, Y+10	; 0x0a
     600:	8b 85       	ldd	r24, Y+11	; 0x0b
     602:	9c 85       	ldd	r25, Y+12	; 0x0c
     604:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
     608:	25 96       	adiw	r28, 0x05	; 5
     60a:	6c af       	std	Y+60, r22	; 0x3c
     60c:	7d af       	std	Y+61, r23	; 0x3d
     60e:	8e af       	std	Y+62, r24	; 0x3e
     610:	9f af       	std	Y+63, r25	; 0x3f
     612:	25 97       	sbiw	r28, 0x05	; 5
     614:	23 96       	adiw	r28, 0x03	; 3
     616:	ee ad       	ldd	r30, Y+62	; 0x3e
     618:	ff ad       	ldd	r31, Y+63	; 0x3f
     61a:	23 97       	sbiw	r28, 0x03	; 3
     61c:	fe 87       	std	Y+14, r31	; 0x0e
     61e:	ed 87       	std	Y+13, r30	; 0x0d

00000620 <.L29>:
     620:	8d 85       	ldd	r24, Y+13	; 0x0d
     622:	9e 85       	ldd	r25, Y+14	; 0x0e
     624:	9a 8b       	std	Y+18, r25	; 0x12
     626:	89 8b       	std	Y+17, r24	; 0x11

00000628 <.LBB39>:
     628:	89 89       	ldd	r24, Y+17	; 0x11
     62a:	9a 89       	ldd	r25, Y+18	; 0x12

0000062c <.L1^B5>:
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <.L1^B5>
     630:	9a 8b       	std	Y+18, r25	; 0x12
     632:	89 8b       	std	Y+17, r24	; 0x11

00000634 <.Loc.95>:
	...

00000636 <.L34>:
                display_getal(coordinaat);
     636:	89 81       	ldd	r24, Y+1	; 0x01
     638:	9a 81       	ldd	r25, Y+2	; 0x02
     63a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_getal>

0000063e <.L26>:
            while (!(PINF & (1 << S1))) {
     63e:	8f e2       	ldi	r24, 0x2F	; 47
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	dc 01       	movw	r26, r24
     644:	8c 91       	ld	r24, X

00000646 <.Loc.98>:
     646:	88 2f       	mov	r24, r24
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	82 70       	andi	r24, 0x02	; 2
     64c:	99 27       	eor	r25, r25

0000064e <.Loc.99>:
     64e:	00 97       	sbiw	r24, 0x00	; 0
     650:	09 f4       	brne	.+2      	; 0x654 <.L25>

00000652 <L0^A>:
     652:	45 cf       	rjmp	.-374    	; 0x4de <.L35>

00000654 <.L25>:
        }

        /*
		Als S1 wordt ingedrukt verhoog het coordinaat met 1
		*/
        if (!(PINF & (1 << S2)) && (coordinaat < 100)) {
     654:	8f e2       	ldi	r24, 0x2F	; 47
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	fc 01       	movw	r30, r24
     65a:	80 81       	ld	r24, Z

0000065c <.Loc.101>:
     65c:	88 2f       	mov	r24, r24
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	84 70       	andi	r24, 0x04	; 4
     662:	99 27       	eor	r25, r25

00000664 <.Loc.102>:
     664:	00 97       	sbiw	r24, 0x00	; 0
     666:	09 f0       	breq	.+2      	; 0x66a <.Loc.103>

00000668 <L0^A>:
     668:	d6 c0       	rjmp	.+428    	; 0x816 <.L36>

0000066a <.Loc.103>:
     66a:	89 81       	ldd	r24, Y+1	; 0x01
     66c:	9a 81       	ldd	r25, Y+2	; 0x02
     66e:	83 36       	cpi	r24, 0x63	; 99
     670:	91 05       	cpc	r25, r1
     672:	11 f0       	breq	.+4      	; 0x678 <.Loc.104>

00000674 <L0^A>:
     674:	0c f0       	brlt	.+2      	; 0x678 <.Loc.104>

00000676 <L0^A>:
     676:	cf c0       	rjmp	.+414    	; 0x816 <.L36>

00000678 <.Loc.104>:
            coordinaat++;
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	9a 81       	ldd	r25, Y+2	; 0x02
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	9a 83       	std	Y+2, r25	; 0x02
     680:	89 83       	std	Y+1, r24	; 0x01

00000682 <.Loc.105>:
            while (!(PINF & (1 << S2))) {
     682:	be c0       	rjmp	.+380    	; 0x800 <.L37>

00000684 <.L46>:
                _delay_ms(tijd);
     684:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <tijd>
     688:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <tijd+0x1>
     68c:	9c 01       	movw	r18, r24
     68e:	99 0f       	add	r25, r25
     690:	44 0b       	sbc	r20, r20
     692:	55 0b       	sbc	r21, r21
     694:	29 96       	adiw	r28, 0x09	; 9
     696:	2c af       	std	Y+60, r18	; 0x3c
     698:	3d af       	std	Y+61, r19	; 0x3d
     69a:	4e af       	std	Y+62, r20	; 0x3e
     69c:	5f af       	std	Y+63, r21	; 0x3f
     69e:	29 97       	sbiw	r28, 0x09	; 9
     6a0:	29 96       	adiw	r28, 0x09	; 9
     6a2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6a4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6a6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6a8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6aa:	29 97       	sbiw	r28, 0x09	; 9
     6ac:	0e 94 97 11 	call	0x232e	; 0x232e <__floatsisf>
     6b0:	6d a3       	std	Y+37, r22	; 0x25
     6b2:	7e a3       	std	Y+38, r23	; 0x26
     6b4:	8f a3       	std	Y+39, r24	; 0x27
     6b6:	98 a7       	std	Y+40, r25	; 0x28
     6b8:	8d a1       	ldd	r24, Y+37	; 0x25
     6ba:	9e a1       	ldd	r25, Y+38	; 0x26
     6bc:	af a1       	ldd	r26, Y+39	; 0x27
     6be:	b8 a5       	ldd	r27, Y+40	; 0x28
     6c0:	8b 8b       	std	Y+19, r24	; 0x13
     6c2:	9c 8b       	std	Y+20, r25	; 0x14
     6c4:	ad 8b       	std	Y+21, r26	; 0x15
     6c6:	be 8b       	std	Y+22, r27	; 0x16

000006c8 <.LBB41>:
	__tmp = ((F_CPU) / 4e3) * __ms;
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	4a e7       	ldi	r20, 0x7A	; 122
     6ce:	55 e4       	ldi	r21, 0x45	; 69
     6d0:	6b 89       	ldd	r22, Y+19	; 0x13
     6d2:	7c 89       	ldd	r23, Y+20	; 0x14
     6d4:	8d 89       	ldd	r24, Y+21	; 0x15
     6d6:	9e 89       	ldd	r25, Y+22	; 0x16
     6d8:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
     6dc:	2d 96       	adiw	r28, 0x0d	; 13
     6de:	6c af       	std	Y+60, r22	; 0x3c
     6e0:	7d af       	std	Y+61, r23	; 0x3d
     6e2:	8e af       	std	Y+62, r24	; 0x3e
     6e4:	9f af       	std	Y+63, r25	; 0x3f
     6e6:	2d 97       	sbiw	r28, 0x0d	; 13
     6e8:	2d 96       	adiw	r28, 0x0d	; 13
     6ea:	2c ad       	ldd	r18, Y+60	; 0x3c
     6ec:	3d ad       	ldd	r19, Y+61	; 0x3d
     6ee:	4e ad       	ldd	r20, Y+62	; 0x3e
     6f0:	5f ad       	ldd	r21, Y+63	; 0x3f
     6f2:	2d 97       	sbiw	r28, 0x0d	; 13
     6f4:	2f 8b       	std	Y+23, r18	; 0x17
     6f6:	38 8f       	std	Y+24, r19	; 0x18
     6f8:	49 8f       	std	Y+25, r20	; 0x19
     6fa:	5a 8f       	std	Y+26, r21	; 0x1a

000006fc <.Loc.108>:
	if (__tmp < 1.0)
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	40 e8       	ldi	r20, 0x80	; 128
     702:	5f e3       	ldi	r21, 0x3F	; 63
     704:	6f 89       	ldd	r22, Y+23	; 0x17
     706:	78 8d       	ldd	r23, Y+24	; 0x18
     708:	89 8d       	ldd	r24, Y+25	; 0x19
     70a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     70c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
     710:	88 23       	and	r24, r24
     712:	2c f4       	brge	.+10     	; 0x71e <.L56>

00000714 <.Loc.109>:
		__ticks = 1;
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	9c 8f       	std	Y+28, r25	; 0x1c
     71a:	8b 8f       	std	Y+27, r24	; 0x1b
     71c:	62 c0       	rjmp	.+196    	; 0x7e2 <.L40>

0000071e <.L56>:
	else if (__tmp > 65535)
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	3f ef       	ldi	r19, 0xFF	; 255
     722:	4f e7       	ldi	r20, 0x7F	; 127
     724:	57 e4       	ldi	r21, 0x47	; 71
     726:	6f 89       	ldd	r22, Y+23	; 0x17
     728:	78 8d       	ldd	r23, Y+24	; 0x18
     72a:	89 8d       	ldd	r24, Y+25	; 0x19
     72c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     72e:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
     732:	88 23       	and	r24, r24
     734:	09 f0       	breq	.+2      	; 0x738 <L0^A>

00000736 <L0^A>:
     736:	0c f4       	brge	.+2      	; 0x73a <.Loc.111>

00000738 <L0^A>:
     738:	42 c0       	rjmp	.+132    	; 0x7be <.L57>

0000073a <.Loc.111>:
		__ticks = (uint16_t) (__ms * 10.0);
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	40 e2       	ldi	r20, 0x20	; 32
     740:	51 e4       	ldi	r21, 0x41	; 65
     742:	6b 89       	ldd	r22, Y+19	; 0x13
     744:	7c 89       	ldd	r23, Y+20	; 0x14
     746:	8d 89       	ldd	r24, Y+21	; 0x15
     748:	9e 89       	ldd	r25, Y+22	; 0x16
     74a:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
     74e:	61 96       	adiw	r28, 0x11	; 17
     750:	6c af       	std	Y+60, r22	; 0x3c
     752:	7d af       	std	Y+61, r23	; 0x3d
     754:	8e af       	std	Y+62, r24	; 0x3e
     756:	9f af       	std	Y+63, r25	; 0x3f
     758:	61 97       	sbiw	r28, 0x11	; 17
     75a:	61 96       	adiw	r28, 0x11	; 17
     75c:	8c ad       	ldd	r24, Y+60	; 0x3c
     75e:	9d ad       	ldd	r25, Y+61	; 0x3d
     760:	ae ad       	ldd	r26, Y+62	; 0x3e
     762:	bf ad       	ldd	r27, Y+63	; 0x3f
     764:	61 97       	sbiw	r28, 0x11	; 17
     766:	8d a7       	std	Y+45, r24	; 0x2d
     768:	9e a7       	std	Y+46, r25	; 0x2e
     76a:	af a7       	std	Y+47, r26	; 0x2f
     76c:	b8 ab       	std	Y+48, r27	; 0x30

0000076e <.Loc.112>:
     76e:	6d a5       	ldd	r22, Y+45	; 0x2d
     770:	7e a5       	ldd	r23, Y+46	; 0x2e
     772:	8f a5       	ldd	r24, Y+47	; 0x2f
     774:	98 a9       	ldd	r25, Y+48	; 0x30
     776:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
     77a:	65 96       	adiw	r28, 0x15	; 21
     77c:	6c af       	std	Y+60, r22	; 0x3c
     77e:	7d af       	std	Y+61, r23	; 0x3d
     780:	8e af       	std	Y+62, r24	; 0x3e
     782:	9f af       	std	Y+63, r25	; 0x3f
     784:	65 97       	sbiw	r28, 0x15	; 21
     786:	63 96       	adiw	r28, 0x13	; 19
     788:	ae ad       	ldd	r26, Y+62	; 0x3e
     78a:	bf ad       	ldd	r27, Y+63	; 0x3f
     78c:	63 97       	sbiw	r28, 0x13	; 19
     78e:	bc 8f       	std	Y+28, r27	; 0x1c
     790:	ab 8f       	std	Y+27, r26	; 0x1b

00000792 <.Loc.113>:
		while(__ticks)
     792:	10 c0       	rjmp	.+32     	; 0x7b4 <.L43>

00000794 <.L44>:
     794:	80 e9       	ldi	r24, 0x90	; 144
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9e 8f       	std	Y+30, r25	; 0x1e
     79a:	8d 8f       	std	Y+29, r24	; 0x1d

0000079c <.LBB43>:
     79c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     79e:	9e 8d       	ldd	r25, Y+30	; 0x1e

000007a0 <.L1^B6>:
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <.L1^B6>
     7a4:	9e 8f       	std	Y+30, r25	; 0x1e
     7a6:	8d 8f       	std	Y+29, r24	; 0x1d

000007a8 <.Loc.115>:
	...

000007aa <.LBE43>:
			__ticks --;
     7aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	9c 8f       	std	Y+28, r25	; 0x1c
     7b2:	8b 8f       	std	Y+27, r24	; 0x1b

000007b4 <.L43>:
		while(__ticks)
     7b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7b8:	00 97       	sbiw	r24, 0x00	; 0
     7ba:	61 f7       	brne	.-40     	; 0x794 <.L44>

000007bc <.Loc.118>:
		return;
     7bc:	1d c0       	rjmp	.+58     	; 0x7f8 <.L45>

000007be <.L57>:
		__ticks = (uint16_t)__tmp;
     7be:	6f 89       	ldd	r22, Y+23	; 0x17
     7c0:	78 8d       	ldd	r23, Y+24	; 0x18
     7c2:	89 8d       	ldd	r24, Y+25	; 0x19
     7c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7c6:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
     7ca:	69 96       	adiw	r28, 0x19	; 25
     7cc:	6c af       	std	Y+60, r22	; 0x3c
     7ce:	7d af       	std	Y+61, r23	; 0x3d
     7d0:	8e af       	std	Y+62, r24	; 0x3e
     7d2:	9f af       	std	Y+63, r25	; 0x3f
     7d4:	69 97       	sbiw	r28, 0x19	; 25
     7d6:	67 96       	adiw	r28, 0x17	; 23
     7d8:	ee ad       	ldd	r30, Y+62	; 0x3e
     7da:	ff ad       	ldd	r31, Y+63	; 0x3f
     7dc:	67 97       	sbiw	r28, 0x17	; 23
     7de:	fc 8f       	std	Y+28, r31	; 0x1c
     7e0:	eb 8f       	std	Y+27, r30	; 0x1b

000007e2 <.L40>:
     7e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7e6:	98 a3       	std	Y+32, r25	; 0x20
     7e8:	8f 8f       	std	Y+31, r24	; 0x1f

000007ea <.LBB45>:
     7ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7ec:	98 a1       	ldd	r25, Y+32	; 0x20

000007ee <.L1^B7>:
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <.L1^B7>
     7f2:	98 a3       	std	Y+32, r25	; 0x20
     7f4:	8f 8f       	std	Y+31, r24	; 0x1f

000007f6 <.Loc.121>:
	...

000007f8 <.L45>:
                display_getal(coordinaat);
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	9a 81       	ldd	r25, Y+2	; 0x02
     7fc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_getal>

00000800 <.L37>:
            while (!(PINF & (1 << S2))) {
     800:	8f e2       	ldi	r24, 0x2F	; 47
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	dc 01       	movw	r26, r24
     806:	8c 91       	ld	r24, X

00000808 <.Loc.124>:
     808:	88 2f       	mov	r24, r24
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	84 70       	andi	r24, 0x04	; 4
     80e:	99 27       	eor	r25, r25

00000810 <.Loc.125>:
     810:	00 97       	sbiw	r24, 0x00	; 0
     812:	09 f4       	brne	.+2      	; 0x816 <.L36>

00000814 <L0^A>:
     814:	37 cf       	rjmp	.-402    	; 0x684 <.L46>

00000816 <.L36>:
            }
        }

        // Laat het het coordinaat zien op de display
        display_getal(coordinaat);
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	9a 81       	ldd	r25, Y+2	; 0x02
     81a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_getal>

0000081e <.Loc.127>:
        /*
		Controleer of S3 is ingedrukt
		Als dit het geval is zet het display op 0000
		Reset het coordinaat en return het
		*/
        if (!(PINF & (1 << S3))) {
     81e:	8f e2       	ldi	r24, 0x2F	; 47
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	fc 01       	movw	r30, r24
     824:	80 81       	ld	r24, Z

00000826 <.Loc.128>:
     826:	88 2f       	mov	r24, r24
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	88 70       	andi	r24, 0x08	; 8
     82c:	99 27       	eor	r25, r25

0000082e <.Loc.129>:
     82e:	00 97       	sbiw	r24, 0x00	; 0
     830:	09 f0       	breq	.+2      	; 0x834 <.LBB47>

00000832 <L0^A>:
     832:	3e ce       	rjmp	.-900    	; 0x4b0 <.L49>

00000834 <.LBB47>:
			// Zet het segment display als 0000
            display_getal(0x0000);
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_getal>

0000083c <.Loc.131>:

            // Maak een kopie van het coordinaat om te returnen
            int getal = coordinaat;
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	9a 81       	ldd	r25, Y+2	; 0x02
     840:	9c 83       	std	Y+4, r25	; 0x04
     842:	8b 83       	std	Y+3, r24	; 0x03

00000844 <.Loc.132>:

            // Reset het coordinaat
            coordinaat = 0;
     844:	1a 82       	std	Y+2, r1	; 0x02
     846:	19 82       	std	Y+1, r1	; 0x01

00000848 <.Loc.133>:

			// Return de kopie van het coordinaat
            return getal;
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	9c 81       	ldd	r25, Y+4	; 0x04

0000084c <.LBE47>:
        }
    }
}
     84c:	c8 5a       	subi	r28, 0xA8	; 168
     84e:	df 4f       	sbci	r29, 0xFF	; 255
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	de bf       	out	0x3e, r29	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <isLimitSwitchPressed>:
extern int rpwm_active;
extern int lpwm_active;



int isLimitSwitchPressed(uint8_t inputPin, volatile uint8_t *inputPort, volatile uint8_t *pinReg) {
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	00 d0       	rcall	.+0      	; 0x866 <L0^A>

00000866 <L0^A>:
     866:	0f 92       	push	r0
     868:	0f 92       	push	r0
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
     86e:	89 83       	std	Y+1, r24	; 0x01
     870:	7b 83       	std	Y+3, r23	; 0x03
     872:	6a 83       	std	Y+2, r22	; 0x02
     874:	5d 83       	std	Y+5, r21	; 0x05
     876:	4c 83       	std	Y+4, r20	; 0x04

00000878 <.Loc.1>:
    // Zet de inputport als pull-up resistor, dit wordt gedaan om een knop te gebruiken
    *inputPort |= (1 << inputPin);
     878:	8a 81       	ldd	r24, Y+2	; 0x02
     87a:	9b 81       	ldd	r25, Y+3	; 0x03
     87c:	fc 01       	movw	r30, r24
     87e:	80 81       	ld	r24, Z
     880:	48 2f       	mov	r20, r24

00000882 <.Loc.2>:
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	28 2f       	mov	r18, r24
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	02 c0       	rjmp	.+4      	; 0x892 <.L2^B1>

0000088e <.L1^B1>:
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25

00000892 <.L2^B1>:
     892:	2a 95       	dec	r18
     894:	e2 f7       	brpl	.-8      	; 0x88e <.L1^B1>

00000896 <.Loc.3>:
     896:	84 2b       	or	r24, r20
     898:	28 2f       	mov	r18, r24
     89a:	8a 81       	ldd	r24, Y+2	; 0x02
     89c:	9b 81       	ldd	r25, Y+3	; 0x03
     89e:	fc 01       	movw	r30, r24
     8a0:	20 83       	st	Z, r18

000008a2 <.Loc.4>:

    // Controleer of de knop is ingedrukt (active low)
    if (!(*pinReg & (1 << inputPin))) {
     8a2:	8c 81       	ldd	r24, Y+4	; 0x04
     8a4:	9d 81       	ldd	r25, Y+5	; 0x05
     8a6:	fc 01       	movw	r30, r24
     8a8:	80 81       	ld	r24, Z
     8aa:	88 2f       	mov	r24, r24
     8ac:	90 e0       	ldi	r25, 0x00	; 0

000008ae <.Loc.5>:
     8ae:	29 81       	ldd	r18, Y+1	; 0x01
     8b0:	22 2f       	mov	r18, r18
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	02 2e       	mov	r0, r18
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <.L2^B2>

000008b8 <.L1^B2>:
     8b8:	95 95       	asr	r25
     8ba:	87 95       	ror	r24

000008bc <.L2^B2>:
     8bc:	0a 94       	dec	r0
     8be:	e2 f7       	brpl	.-8      	; 0x8b8 <.L1^B2>
     8c0:	81 70       	andi	r24, 0x01	; 1
     8c2:	99 27       	eor	r25, r25

000008c4 <.Loc.6>:
     8c4:	00 97       	sbiw	r24, 0x00	; 0
     8c6:	19 f4       	brne	.+6      	; 0x8ce <.L2>

000008c8 <.Loc.7>:
        // Als de knop is ingedrukt return 1
        return 1;
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <.L3>

000008ce <.L2>:
    } else {
        // Anders return 0
        return 0;
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0

000008d2 <.L3>:
    }
}
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <countLimitSwitchPresses>:
 * @param inputPort De poort waaraan de limietschakelaar is verbonden.
 * @param pinReg Het pinregister voor het lezen van de limietschakelaarstatus.
 * @param richting De bewegingsrichting: -1 voor links, +1 voor rechts.
 * @return De bijgewerkte waarde van de teller.
 */
uint16_t countLimitSwitchPresses(uint8_t inputPin, volatile uint8_t *inputPort, volatile uint8_t *pinReg) {
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	c9 54       	subi	r28, 0x49	; 73
     8ec:	d1 09       	sbc	r29, r1
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	cd bf       	out	0x3d, r28	; 61
     8f8:	8d 8f       	std	Y+29, r24	; 0x1d
     8fa:	7f 8f       	std	Y+31, r23	; 0x1f
     8fc:	6e 8f       	std	Y+30, r22	; 0x1e
     8fe:	59 a3       	std	Y+33, r21	; 0x21
     900:	48 a3       	std	Y+32, r20	; 0x20

00000902 <.Loc.11>:

    // Getal om bij te houden of de knop is ingedrukt
    static uint8_t wasPressed = 0;

    // Configureer de input pin met een pull-up weerstand
    *inputPort |= (1 << inputPin);
     902:	8e 8d       	ldd	r24, Y+30	; 0x1e
     904:	9f 8d       	ldd	r25, Y+31	; 0x1f
     906:	dc 01       	movw	r26, r24
     908:	8c 91       	ld	r24, X
     90a:	48 2f       	mov	r20, r24

0000090c <.Loc.12>:
     90c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     90e:	28 2f       	mov	r18, r24
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	02 c0       	rjmp	.+4      	; 0x91c <.L2^B3>

00000918 <.L1^B3>:
     918:	88 0f       	add	r24, r24
     91a:	99 1f       	adc	r25, r25

0000091c <.L2^B3>:
     91c:	2a 95       	dec	r18
     91e:	e2 f7       	brpl	.-8      	; 0x918 <.L1^B3>

00000920 <.Loc.13>:
     920:	84 2b       	or	r24, r20
     922:	28 2f       	mov	r18, r24
     924:	8e 8d       	ldd	r24, Y+30	; 0x1e
     926:	9f 8d       	ldd	r25, Y+31	; 0x1f
     928:	fc 01       	movw	r30, r24
     92a:	20 83       	st	Z, r18

0000092c <.Loc.14>:

    // Controleer of de knop momenteel is ingedrukt
    if (!(*pinReg & (1 << inputPin))) {
     92c:	88 a1       	ldd	r24, Y+32	; 0x20
     92e:	99 a1       	ldd	r25, Y+33	; 0x21
     930:	dc 01       	movw	r26, r24
     932:	8c 91       	ld	r24, X
     934:	88 2f       	mov	r24, r24
     936:	90 e0       	ldi	r25, 0x00	; 0

00000938 <.Loc.15>:
     938:	2d 8d       	ldd	r18, Y+29	; 0x1d
     93a:	22 2f       	mov	r18, r18
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	02 2e       	mov	r0, r18
     940:	02 c0       	rjmp	.+4      	; 0x946 <.L2^B4>

00000942 <.L1^B4>:
     942:	95 95       	asr	r25
     944:	87 95       	ror	r24

00000946 <.L2^B4>:
     946:	0a 94       	dec	r0
     948:	e2 f7       	brpl	.-8      	; 0x942 <.L1^B4>
     94a:	81 70       	andi	r24, 0x01	; 1
     94c:	99 27       	eor	r25, r25

0000094e <.Loc.16>:
     94e:	00 97       	sbiw	r24, 0x00	; 0
     950:	09 f0       	breq	.+2      	; 0x954 <.Loc.17>

00000952 <L0^A>:
     952:	65 c1       	rjmp	.+714    	; 0xc1e <.L5>

00000954 <.Loc.17>:
        // Detecteer overgang van niet-ingedrukt naar ingedrukt
        if ((!wasPressed) & lpwm_active) {
     954:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <wasPressed.1>
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	99 23       	and	r25, r25
     95c:	09 f0       	breq	.+2      	; 0x960 <.L6>
     95e:	80 e0       	ldi	r24, 0x00	; 0

00000960 <.L6>:
     960:	28 2f       	mov	r18, r24
     962:	30 e0       	ldi	r19, 0x00	; 0

00000964 <.Loc.18>:
     964:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <lpwm_active>
     968:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <rpwm_active>
     96c:	82 23       	and	r24, r18
     96e:	93 23       	and	r25, r19

00000970 <.Loc.19>:
     970:	00 97       	sbiw	r24, 0x00	; 0
     972:	09 f4       	brne	.+2      	; 0x976 <.Loc.20>

00000974 <L0^A>:
     974:	9b c0       	rjmp	.+310    	; 0xaac <.L7>

00000976 <.Loc.20>:
            /*
            Als de knop ingedrukt wordt en de motor naar rechts draait,
            dan zal de teller met een omhoog gaan.
            */
            pressCount ++;
     976:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <pressCount.0>
     97a:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <pressCount.0+0x1>
     97e:	01 96       	adiw	r24, 0x01	; 1
     980:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <pressCount.0+0x1>
     984:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <pressCount.0>

00000988 <.Loc.21>:
            wasPressed = 1;
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <wasPressed.1>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a8 e4       	ldi	r26, 0x48	; 72
     994:	b2 e4       	ldi	r27, 0x42	; 66
     996:	89 83       	std	Y+1, r24	; 0x01
     998:	9a 83       	std	Y+2, r25	; 0x02
     99a:	ab 83       	std	Y+3, r26	; 0x03
     99c:	bc 83       	std	Y+4, r27	; 0x04

0000099e <.LBB18>:
	__tmp = ((F_CPU) / 4e3) * __ms;
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	4a e7       	ldi	r20, 0x7A	; 122
     9a4:	55 e4       	ldi	r21, 0x45	; 69
     9a6:	69 81       	ldd	r22, Y+1	; 0x01
     9a8:	7a 81       	ldd	r23, Y+2	; 0x02
     9aa:	8b 81       	ldd	r24, Y+3	; 0x03
     9ac:	9c 81       	ldd	r25, Y+4	; 0x04
     9ae:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
     9b2:	6a a7       	std	Y+42, r22	; 0x2a
     9b4:	7b a7       	std	Y+43, r23	; 0x2b
     9b6:	8c a7       	std	Y+44, r24	; 0x2c
     9b8:	9d a7       	std	Y+45, r25	; 0x2d
     9ba:	8a a5       	ldd	r24, Y+42	; 0x2a
     9bc:	9b a5       	ldd	r25, Y+43	; 0x2b
     9be:	ac a5       	ldd	r26, Y+44	; 0x2c
     9c0:	bd a5       	ldd	r27, Y+45	; 0x2d
     9c2:	8d 83       	std	Y+5, r24	; 0x05
     9c4:	9e 83       	std	Y+6, r25	; 0x06
     9c6:	af 83       	std	Y+7, r26	; 0x07
     9c8:	b8 87       	std	Y+8, r27	; 0x08

000009ca <.Loc.23>:
	if (__tmp < 1.0)
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e8       	ldi	r20, 0x80	; 128
     9d0:	5f e3       	ldi	r21, 0x3F	; 63
     9d2:	6d 81       	ldd	r22, Y+5	; 0x05
     9d4:	7e 81       	ldd	r23, Y+6	; 0x06
     9d6:	8f 81       	ldd	r24, Y+7	; 0x07
     9d8:	98 85       	ldd	r25, Y+8	; 0x08
     9da:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
     9de:	88 23       	and	r24, r24
     9e0:	2c f4       	brge	.+10     	; 0x9ec <.L32>

000009e2 <.Loc.24>:
		__ticks = 1;
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	9a 87       	std	Y+10, r25	; 0x0a
     9e8:	89 87       	std	Y+9, r24	; 0x09
     9ea:	55 c0       	rjmp	.+170    	; 0xa96 <.L10>

000009ec <.L32>:
	else if (__tmp > 65535)
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	3f ef       	ldi	r19, 0xFF	; 255
     9f0:	4f e7       	ldi	r20, 0x7F	; 127
     9f2:	57 e4       	ldi	r21, 0x47	; 71
     9f4:	6d 81       	ldd	r22, Y+5	; 0x05
     9f6:	7e 81       	ldd	r23, Y+6	; 0x06
     9f8:	8f 81       	ldd	r24, Y+7	; 0x07
     9fa:	98 85       	ldd	r25, Y+8	; 0x08
     9fc:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
     a00:	88 23       	and	r24, r24
     a02:	d9 f1       	breq	.+118    	; 0xa7a <.L33>
     a04:	d4 f1       	brlt	.+116    	; 0xa7a <.L33>

00000a06 <.Loc.26>:
		__ticks = (uint16_t) (__ms * 10.0);
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	40 e2       	ldi	r20, 0x20	; 32
     a0c:	51 e4       	ldi	r21, 0x41	; 65
     a0e:	69 81       	ldd	r22, Y+1	; 0x01
     a10:	7a 81       	ldd	r23, Y+2	; 0x02
     a12:	8b 81       	ldd	r24, Y+3	; 0x03
     a14:	9c 81       	ldd	r25, Y+4	; 0x04
     a16:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
     a1a:	6e a7       	std	Y+46, r22	; 0x2e
     a1c:	7f a7       	std	Y+47, r23	; 0x2f
     a1e:	88 ab       	std	Y+48, r24	; 0x30
     a20:	99 ab       	std	Y+49, r25	; 0x31
     a22:	8e a5       	ldd	r24, Y+46	; 0x2e
     a24:	9f a5       	ldd	r25, Y+47	; 0x2f
     a26:	a8 a9       	ldd	r26, Y+48	; 0x30
     a28:	b9 a9       	ldd	r27, Y+49	; 0x31
     a2a:	8a a3       	std	Y+34, r24	; 0x22
     a2c:	9b a3       	std	Y+35, r25	; 0x23
     a2e:	ac a3       	std	Y+36, r26	; 0x24
     a30:	bd a3       	std	Y+37, r27	; 0x25

00000a32 <.Loc.27>:
     a32:	6a a1       	ldd	r22, Y+34	; 0x22
     a34:	7b a1       	ldd	r23, Y+35	; 0x23
     a36:	8c a1       	ldd	r24, Y+36	; 0x24
     a38:	9d a1       	ldd	r25, Y+37	; 0x25
     a3a:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
     a3e:	6a ab       	std	Y+50, r22	; 0x32
     a40:	7b ab       	std	Y+51, r23	; 0x33
     a42:	8c ab       	std	Y+52, r24	; 0x34
     a44:	9d ab       	std	Y+53, r25	; 0x35
     a46:	aa a9       	ldd	r26, Y+50	; 0x32
     a48:	bb a9       	ldd	r27, Y+51	; 0x33
     a4a:	ba 87       	std	Y+10, r27	; 0x0a
     a4c:	a9 87       	std	Y+9, r26	; 0x09

00000a4e <.Loc.28>:
		while(__ticks)
     a4e:	10 c0       	rjmp	.+32     	; 0xa70 <.L13>

00000a50 <.L14>:
     a50:	80 e9       	ldi	r24, 0x90	; 144
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	9c 87       	std	Y+12, r25	; 0x0c
     a56:	8b 87       	std	Y+11, r24	; 0x0b

00000a58 <.LBB20>:
     a58:	8b 85       	ldd	r24, Y+11	; 0x0b
     a5a:	9c 85       	ldd	r25, Y+12	; 0x0c

00000a5c <.L1^B5>:
     a5c:	01 97       	sbiw	r24, 0x01	; 1
     a5e:	f1 f7       	brne	.-4      	; 0xa5c <.L1^B5>
     a60:	9c 87       	std	Y+12, r25	; 0x0c
     a62:	8b 87       	std	Y+11, r24	; 0x0b

00000a64 <.Loc.30>:
	...

00000a66 <.LBE20>:
			__ticks --;
     a66:	89 85       	ldd	r24, Y+9	; 0x09
     a68:	9a 85       	ldd	r25, Y+10	; 0x0a
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	9a 87       	std	Y+10, r25	; 0x0a
     a6e:	89 87       	std	Y+9, r24	; 0x09

00000a70 <.L13>:
		while(__ticks)
     a70:	89 85       	ldd	r24, Y+9	; 0x09
     a72:	9a 85       	ldd	r25, Y+10	; 0x0a
     a74:	00 97       	sbiw	r24, 0x00	; 0
     a76:	61 f7       	brne	.-40     	; 0xa50 <.L14>

00000a78 <.Loc.33>:
		return;
     a78:	19 c0       	rjmp	.+50     	; 0xaac <.L7>

00000a7a <.L33>:
		__ticks = (uint16_t)__tmp;
     a7a:	6d 81       	ldd	r22, Y+5	; 0x05
     a7c:	7e 81       	ldd	r23, Y+6	; 0x06
     a7e:	8f 81       	ldd	r24, Y+7	; 0x07
     a80:	98 85       	ldd	r25, Y+8	; 0x08
     a82:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
     a86:	6e ab       	std	Y+54, r22	; 0x36
     a88:	7f ab       	std	Y+55, r23	; 0x37
     a8a:	88 af       	std	Y+56, r24	; 0x38
     a8c:	99 af       	std	Y+57, r25	; 0x39
     a8e:	ee a9       	ldd	r30, Y+54	; 0x36
     a90:	ff a9       	ldd	r31, Y+55	; 0x37
     a92:	fa 87       	std	Y+10, r31	; 0x0a
     a94:	e9 87       	std	Y+9, r30	; 0x09

00000a96 <.L10>:
     a96:	89 85       	ldd	r24, Y+9	; 0x09
     a98:	9a 85       	ldd	r25, Y+10	; 0x0a
     a9a:	9e 87       	std	Y+14, r25	; 0x0e
     a9c:	8d 87       	std	Y+13, r24	; 0x0d

00000a9e <.LBB22>:
     a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     aa0:	9e 85       	ldd	r25, Y+14	; 0x0e

00000aa2 <.L1^B6>:
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	f1 f7       	brne	.-4      	; 0xaa2 <.L1^B6>
     aa6:	9e 87       	std	Y+14, r25	; 0x0e
     aa8:	8d 87       	std	Y+13, r24	; 0x0d

00000aaa <.Loc.36>:
	...

00000aac <.L7>:
            _delay_ms(50);
        } if ((!wasPressed) & rpwm_active) {
     aac:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <wasPressed.1>
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	99 23       	and	r25, r25
     ab4:	09 f0       	breq	.+2      	; 0xab8 <.L16>
     ab6:	80 e0       	ldi	r24, 0x00	; 0

00000ab8 <.L16>:
     ab8:	28 2f       	mov	r18, r24
     aba:	30 e0       	ldi	r19, 0x00	; 0

00000abc <.Loc.38>:
     abc:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <rpwm_active>
     ac0:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <lpwm2_active>
     ac4:	82 23       	and	r24, r18
     ac6:	93 23       	and	r25, r19

00000ac8 <.Loc.39>:
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	09 f4       	brne	.+2      	; 0xace <.Loc.40>

00000acc <L0^A>:
     acc:	aa c0       	rjmp	.+340    	; 0xc22 <.L17>

00000ace <.Loc.40>:
            /*
            Als de knop ingedrukt wordt en de motor naar links draait,
            dan zal de teller met een omlaag gaan.
            */
            pressCount -= 1;
     ace:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <pressCount.0>
     ad2:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <pressCount.0+0x1>
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <pressCount.0+0x1>
     adc:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <pressCount.0>

00000ae0 <.Loc.41>:
            wasPressed = 1;
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <wasPressed.1>
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a8 e4       	ldi	r26, 0x48	; 72
     aec:	b2 e4       	ldi	r27, 0x42	; 66
     aee:	8f 87       	std	Y+15, r24	; 0x0f
     af0:	98 8b       	std	Y+16, r25	; 0x10
     af2:	a9 8b       	std	Y+17, r26	; 0x11
     af4:	ba 8b       	std	Y+18, r27	; 0x12

00000af6 <.LBB24>:
	__tmp = ((F_CPU) / 4e3) * __ms;
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	4a e7       	ldi	r20, 0x7A	; 122
     afc:	55 e4       	ldi	r21, 0x45	; 69
     afe:	6f 85       	ldd	r22, Y+15	; 0x0f
     b00:	78 89       	ldd	r23, Y+16	; 0x10
     b02:	89 89       	ldd	r24, Y+17	; 0x11
     b04:	9a 89       	ldd	r25, Y+18	; 0x12
     b06:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
     b0a:	6a af       	std	Y+58, r22	; 0x3a
     b0c:	7b af       	std	Y+59, r23	; 0x3b
     b0e:	8c af       	std	Y+60, r24	; 0x3c
     b10:	9d af       	std	Y+61, r25	; 0x3d
     b12:	8a ad       	ldd	r24, Y+58	; 0x3a
     b14:	9b ad       	ldd	r25, Y+59	; 0x3b
     b16:	ac ad       	ldd	r26, Y+60	; 0x3c
     b18:	bd ad       	ldd	r27, Y+61	; 0x3d
     b1a:	8b 8b       	std	Y+19, r24	; 0x13
     b1c:	9c 8b       	std	Y+20, r25	; 0x14
     b1e:	ad 8b       	std	Y+21, r26	; 0x15
     b20:	be 8b       	std	Y+22, r27	; 0x16

00000b22 <.Loc.43>:
	if (__tmp < 1.0)
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	40 e8       	ldi	r20, 0x80	; 128
     b28:	5f e3       	ldi	r21, 0x3F	; 63
     b2a:	6b 89       	ldd	r22, Y+19	; 0x13
     b2c:	7c 89       	ldd	r23, Y+20	; 0x14
     b2e:	8d 89       	ldd	r24, Y+21	; 0x15
     b30:	9e 89       	ldd	r25, Y+22	; 0x16
     b32:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
     b36:	88 23       	and	r24, r24
     b38:	2c f4       	brge	.+10     	; 0xb44 <.L34>

00000b3a <.Loc.44>:
		__ticks = 1;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	98 8f       	std	Y+24, r25	; 0x18
     b40:	8f 8b       	std	Y+23, r24	; 0x17
     b42:	62 c0       	rjmp	.+196    	; 0xc08 <.L20>

00000b44 <.L34>:
	else if (__tmp > 65535)
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	3f ef       	ldi	r19, 0xFF	; 255
     b48:	4f e7       	ldi	r20, 0x7F	; 127
     b4a:	57 e4       	ldi	r21, 0x47	; 71
     b4c:	6b 89       	ldd	r22, Y+19	; 0x13
     b4e:	7c 89       	ldd	r23, Y+20	; 0x14
     b50:	8d 89       	ldd	r24, Y+21	; 0x15
     b52:	9e 89       	ldd	r25, Y+22	; 0x16
     b54:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
     b58:	88 23       	and	r24, r24
     b5a:	09 f0       	breq	.+2      	; 0xb5e <L0^A>

00000b5c <L0^A>:
     b5c:	0c f4       	brge	.+2      	; 0xb60 <.Loc.46>

00000b5e <L0^A>:
     b5e:	42 c0       	rjmp	.+132    	; 0xbe4 <.L35>

00000b60 <.Loc.46>:
		__ticks = (uint16_t) (__ms * 10.0);
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	40 e2       	ldi	r20, 0x20	; 32
     b66:	51 e4       	ldi	r21, 0x41	; 65
     b68:	6f 85       	ldd	r22, Y+15	; 0x0f
     b6a:	78 89       	ldd	r23, Y+16	; 0x10
     b6c:	89 89       	ldd	r24, Y+17	; 0x11
     b6e:	9a 89       	ldd	r25, Y+18	; 0x12
     b70:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
     b74:	22 96       	adiw	r28, 0x02	; 2
     b76:	6c af       	std	Y+60, r22	; 0x3c
     b78:	7d af       	std	Y+61, r23	; 0x3d
     b7a:	8e af       	std	Y+62, r24	; 0x3e
     b7c:	9f af       	std	Y+63, r25	; 0x3f
     b7e:	22 97       	sbiw	r28, 0x02	; 2
     b80:	22 96       	adiw	r28, 0x02	; 2
     b82:	8c ad       	ldd	r24, Y+60	; 0x3c
     b84:	9d ad       	ldd	r25, Y+61	; 0x3d
     b86:	ae ad       	ldd	r26, Y+62	; 0x3e
     b88:	bf ad       	ldd	r27, Y+63	; 0x3f
     b8a:	22 97       	sbiw	r28, 0x02	; 2
     b8c:	8e a3       	std	Y+38, r24	; 0x26
     b8e:	9f a3       	std	Y+39, r25	; 0x27
     b90:	a8 a7       	std	Y+40, r26	; 0x28
     b92:	b9 a7       	std	Y+41, r27	; 0x29

00000b94 <.Loc.47>:
     b94:	6e a1       	ldd	r22, Y+38	; 0x26
     b96:	7f a1       	ldd	r23, Y+39	; 0x27
     b98:	88 a5       	ldd	r24, Y+40	; 0x28
     b9a:	99 a5       	ldd	r25, Y+41	; 0x29
     b9c:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
     ba0:	26 96       	adiw	r28, 0x06	; 6
     ba2:	6c af       	std	Y+60, r22	; 0x3c
     ba4:	7d af       	std	Y+61, r23	; 0x3d
     ba6:	8e af       	std	Y+62, r24	; 0x3e
     ba8:	9f af       	std	Y+63, r25	; 0x3f
     baa:	26 97       	sbiw	r28, 0x06	; 6
     bac:	24 96       	adiw	r28, 0x04	; 4
     bae:	ae ad       	ldd	r26, Y+62	; 0x3e
     bb0:	bf ad       	ldd	r27, Y+63	; 0x3f
     bb2:	24 97       	sbiw	r28, 0x04	; 4
     bb4:	b8 8f       	std	Y+24, r27	; 0x18
     bb6:	af 8b       	std	Y+23, r26	; 0x17

00000bb8 <.Loc.48>:
		while(__ticks)
     bb8:	10 c0       	rjmp	.+32     	; 0xbda <.L23>

00000bba <.L24>:
     bba:	80 e9       	ldi	r24, 0x90	; 144
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	9a 8f       	std	Y+26, r25	; 0x1a
     bc0:	89 8f       	std	Y+25, r24	; 0x19

00000bc2 <.LBB26>:
     bc2:	89 8d       	ldd	r24, Y+25	; 0x19
     bc4:	9a 8d       	ldd	r25, Y+26	; 0x1a

00000bc6 <.L1^B7>:
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <.L1^B7>
     bca:	9a 8f       	std	Y+26, r25	; 0x1a
     bcc:	89 8f       	std	Y+25, r24	; 0x19

00000bce <.Loc.50>:
	...

00000bd0 <.LBE26>:
			__ticks --;
     bd0:	8f 89       	ldd	r24, Y+23	; 0x17
     bd2:	98 8d       	ldd	r25, Y+24	; 0x18
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	98 8f       	std	Y+24, r25	; 0x18
     bd8:	8f 8b       	std	Y+23, r24	; 0x17

00000bda <.L23>:
		while(__ticks)
     bda:	8f 89       	ldd	r24, Y+23	; 0x17
     bdc:	98 8d       	ldd	r25, Y+24	; 0x18
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	61 f7       	brne	.-40     	; 0xbba <.L24>

00000be2 <.Loc.53>:
		return;
     be2:	1f c0       	rjmp	.+62     	; 0xc22 <.L17>

00000be4 <.L35>:
		__ticks = (uint16_t)__tmp;
     be4:	6b 89       	ldd	r22, Y+19	; 0x13
     be6:	7c 89       	ldd	r23, Y+20	; 0x14
     be8:	8d 89       	ldd	r24, Y+21	; 0x15
     bea:	9e 89       	ldd	r25, Y+22	; 0x16
     bec:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
     bf0:	2a 96       	adiw	r28, 0x0a	; 10
     bf2:	6c af       	std	Y+60, r22	; 0x3c
     bf4:	7d af       	std	Y+61, r23	; 0x3d
     bf6:	8e af       	std	Y+62, r24	; 0x3e
     bf8:	9f af       	std	Y+63, r25	; 0x3f
     bfa:	2a 97       	sbiw	r28, 0x0a	; 10
     bfc:	28 96       	adiw	r28, 0x08	; 8
     bfe:	ee ad       	ldd	r30, Y+62	; 0x3e
     c00:	ff ad       	ldd	r31, Y+63	; 0x3f
     c02:	28 97       	sbiw	r28, 0x08	; 8
     c04:	f8 8f       	std	Y+24, r31	; 0x18
     c06:	ef 8b       	std	Y+23, r30	; 0x17

00000c08 <.L20>:
     c08:	8f 89       	ldd	r24, Y+23	; 0x17
     c0a:	98 8d       	ldd	r25, Y+24	; 0x18
     c0c:	9c 8f       	std	Y+28, r25	; 0x1c
     c0e:	8b 8f       	std	Y+27, r24	; 0x1b

00000c10 <.LBB28>:
     c10:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c12:	9c 8d       	ldd	r25, Y+28	; 0x1c

00000c14 <.L1^B8>:
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	f1 f7       	brne	.-4      	; 0xc14 <.L1^B8>
     c18:	9c 8f       	std	Y+28, r25	; 0x1c
     c1a:	8b 8f       	std	Y+27, r24	; 0x1b

00000c1c <.Loc.56>:
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
#endif /* __AVR_TINY__ */
}
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <.L17>

00000c1e <.L5>:
            _delay_ms(50);
        }
    } else {
        // Reset de ingedrukte status
        wasPressed = 0;
     c1e:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <wasPressed.1>

00000c22 <.L17>:
    }

    if (pressCount < 0) {
     c22:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <pressCount.0>
     c26:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <pressCount.0+0x1>

00000c2a <.Loc.59>:
     c2a:	99 23       	and	r25, r25
     c2c:	24 f4       	brge	.+8      	; 0xc36 <.L26>

00000c2e <.Loc.60>:
        pressCount = 0;
     c2e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <pressCount.0+0x1>
     c32:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <pressCount.0>

00000c36 <.L26>:
    }

    // Geef de tellerwaarde terug als unsigned integer
    return pressCount;
     c36:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <pressCount.0>
     c3a:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <pressCount.0+0x1>

00000c3e <.Loc.62>:
}
     c3e:	c7 5b       	subi	r28, 0xB7	; 183
     c40:	df 4f       	sbci	r29, 0xFF	; 255
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <main>:
int wacht = 1;
extern opgepakt;
extern volatile int pressCount;


int main(void) {
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	c0 5c       	subi	r28, 0xC0	; 192
     c60:	d1 09       	sbc	r29, r1
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61

00000c6c <.Loc.1>:
    // Stap 1: Initialiseer de interface en toon het display
    init_interface(); // Initialiseer de interface (display en knoppen)
     c6c:	0e 94 95 00 	call	0x12a	; 0x12a <init_interface>

00000c70 <.LBB38>:

    while (1) {
        while (1) {  // Terwijl de noodknop ingedrukt is, voer de taak uit
            int punt_1 = 11;
     c70:	8b e0       	ldi	r24, 0x0B	; 11
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	9c 83       	std	Y+4, r25	; 0x04
     c76:	8b 83       	std	Y+3, r24	; 0x03

00000c78 <.Loc.3>:
            display_getal(punt_1);
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	9c 81       	ldd	r25, Y+4	; 0x04
     c7c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_getal>
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	aa ef       	ldi	r26, 0xFA	; 250
     c86:	b3 e4       	ldi	r27, 0x43	; 67
     c88:	8d 8b       	std	Y+21, r24	; 0x15
     c8a:	9e 8b       	std	Y+22, r25	; 0x16
     c8c:	af 8b       	std	Y+23, r26	; 0x17
     c8e:	b8 8f       	std	Y+24, r27	; 0x18

00000c90 <.LBB39>:
	__tmp = ((F_CPU) / 4e3) * __ms;
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	4a e7       	ldi	r20, 0x7A	; 122
     c96:	55 e4       	ldi	r21, 0x45	; 69
     c98:	6d 89       	ldd	r22, Y+21	; 0x15
     c9a:	7e 89       	ldd	r23, Y+22	; 0x16
     c9c:	8f 89       	ldd	r24, Y+23	; 0x17
     c9e:	98 8d       	ldd	r25, Y+24	; 0x18
     ca0:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
     ca4:	ad 96       	adiw	r28, 0x2d	; 45
     ca6:	6c af       	std	Y+60, r22	; 0x3c
     ca8:	7d af       	std	Y+61, r23	; 0x3d
     caa:	8e af       	std	Y+62, r24	; 0x3e
     cac:	9f af       	std	Y+63, r25	; 0x3f
     cae:	ad 97       	sbiw	r28, 0x2d	; 45
     cb0:	ad 96       	adiw	r28, 0x2d	; 45
     cb2:	2c ad       	ldd	r18, Y+60	; 0x3c
     cb4:	3d ad       	ldd	r19, Y+61	; 0x3d
     cb6:	4e ad       	ldd	r20, Y+62	; 0x3e
     cb8:	5f ad       	ldd	r21, Y+63	; 0x3f
     cba:	ad 97       	sbiw	r28, 0x2d	; 45
     cbc:	29 8f       	std	Y+25, r18	; 0x19
     cbe:	3a 8f       	std	Y+26, r19	; 0x1a
     cc0:	4b 8f       	std	Y+27, r20	; 0x1b
     cc2:	5c 8f       	std	Y+28, r21	; 0x1c

00000cc4 <.Loc.5>:
	if (__tmp < 1.0)
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	40 e8       	ldi	r20, 0x80	; 128
     cca:	5f e3       	ldi	r21, 0x3F	; 63
     ccc:	69 8d       	ldd	r22, Y+25	; 0x19
     cce:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd4:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
     cd8:	88 23       	and	r24, r24
     cda:	2c f4       	brge	.+10     	; 0xce6 <.L61>

00000cdc <.Loc.6>:
		__ticks = 1;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	9e 8f       	std	Y+30, r25	; 0x1e
     ce2:	8d 8f       	std	Y+29, r24	; 0x1d
     ce4:	66 c0       	rjmp	.+204    	; 0xdb2 <.L4>

00000ce6 <.L61>:
	else if (__tmp > 65535)
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	3f ef       	ldi	r19, 0xFF	; 255
     cea:	4f e7       	ldi	r20, 0x7F	; 127
     cec:	57 e4       	ldi	r21, 0x47	; 71
     cee:	69 8d       	ldd	r22, Y+25	; 0x19
     cf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cf6:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
     cfa:	88 23       	and	r24, r24
     cfc:	09 f0       	breq	.+2      	; 0xd00 <L0^A>

00000cfe <L0^A>:
     cfe:	0c f4       	brge	.+2      	; 0xd02 <.Loc.8>

00000d00 <L0^A>:
     d00:	46 c0       	rjmp	.+140    	; 0xd8e <.L62>

00000d02 <.Loc.8>:
		__ticks = (uint16_t) (__ms * 10.0);
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e2       	ldi	r20, 0x20	; 32
     d08:	51 e4       	ldi	r21, 0x41	; 65
     d0a:	6d 89       	ldd	r22, Y+21	; 0x15
     d0c:	7e 89       	ldd	r23, Y+22	; 0x16
     d0e:	8f 89       	ldd	r24, Y+23	; 0x17
     d10:	98 8d       	ldd	r25, Y+24	; 0x18
     d12:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
     d16:	e1 96       	adiw	r28, 0x31	; 49
     d18:	6c af       	std	Y+60, r22	; 0x3c
     d1a:	7d af       	std	Y+61, r23	; 0x3d
     d1c:	8e af       	std	Y+62, r24	; 0x3e
     d1e:	9f af       	std	Y+63, r25	; 0x3f
     d20:	e1 97       	sbiw	r28, 0x31	; 49
     d22:	e1 96       	adiw	r28, 0x31	; 49
     d24:	8c ad       	ldd	r24, Y+60	; 0x3c
     d26:	9d ad       	ldd	r25, Y+61	; 0x3d
     d28:	ae ad       	ldd	r26, Y+62	; 0x3e
     d2a:	bf ad       	ldd	r27, Y+63	; 0x3f
     d2c:	e1 97       	sbiw	r28, 0x31	; 49
     d2e:	6d 96       	adiw	r28, 0x1d	; 29
     d30:	8c af       	std	Y+60, r24	; 0x3c
     d32:	9d af       	std	Y+61, r25	; 0x3d
     d34:	ae af       	std	Y+62, r26	; 0x3e
     d36:	bf af       	std	Y+63, r27	; 0x3f
     d38:	6d 97       	sbiw	r28, 0x1d	; 29

00000d3a <.Loc.9>:
     d3a:	6d 96       	adiw	r28, 0x1d	; 29
     d3c:	6c ad       	ldd	r22, Y+60	; 0x3c
     d3e:	7d ad       	ldd	r23, Y+61	; 0x3d
     d40:	8e ad       	ldd	r24, Y+62	; 0x3e
     d42:	9f ad       	ldd	r25, Y+63	; 0x3f
     d44:	6d 97       	sbiw	r28, 0x1d	; 29
     d46:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
     d4a:	e5 96       	adiw	r28, 0x35	; 53
     d4c:	6c af       	std	Y+60, r22	; 0x3c
     d4e:	7d af       	std	Y+61, r23	; 0x3d
     d50:	8e af       	std	Y+62, r24	; 0x3e
     d52:	9f af       	std	Y+63, r25	; 0x3f
     d54:	e5 97       	sbiw	r28, 0x35	; 53
     d56:	e3 96       	adiw	r28, 0x33	; 51
     d58:	ae ad       	ldd	r26, Y+62	; 0x3e
     d5a:	bf ad       	ldd	r27, Y+63	; 0x3f
     d5c:	e3 97       	sbiw	r28, 0x33	; 51
     d5e:	be 8f       	std	Y+30, r27	; 0x1e
     d60:	ad 8f       	std	Y+29, r26	; 0x1d

00000d62 <.Loc.10>:
		while(__ticks)
     d62:	10 c0       	rjmp	.+32     	; 0xd84 <.L7>

00000d64 <.L8>:
     d64:	80 e9       	ldi	r24, 0x90	; 144
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	98 a3       	std	Y+32, r25	; 0x20
     d6a:	8f 8f       	std	Y+31, r24	; 0x1f

00000d6c <.LBB41>:
	__asm__ volatile (
     d6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d6e:	98 a1       	ldd	r25, Y+32	; 0x20

00000d70 <.L1^B1>:
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <.L1^B1>
     d74:	98 a3       	std	Y+32, r25	; 0x20
     d76:	8f 8f       	std	Y+31, r24	; 0x1f

00000d78 <.Loc.12>:
	...

00000d7a <.LBE41>:
			__ticks --;
     d7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d7c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	9e 8f       	std	Y+30, r25	; 0x1e
     d82:	8d 8f       	std	Y+29, r24	; 0x1d

00000d84 <.L7>:
		while(__ticks)
     d84:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d86:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	61 f7       	brne	.-40     	; 0xd64 <.L8>

00000d8c <.Loc.15>:
		return;
     d8c:	1d c0       	rjmp	.+58     	; 0xdc8 <.L9>

00000d8e <.L62>:
		__ticks = (uint16_t)__tmp;
     d8e:	69 8d       	ldd	r22, Y+25	; 0x19
     d90:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d92:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d94:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d96:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
     d9a:	e9 96       	adiw	r28, 0x39	; 57
     d9c:	6c af       	std	Y+60, r22	; 0x3c
     d9e:	7d af       	std	Y+61, r23	; 0x3d
     da0:	8e af       	std	Y+62, r24	; 0x3e
     da2:	9f af       	std	Y+63, r25	; 0x3f
     da4:	e9 97       	sbiw	r28, 0x39	; 57
     da6:	e7 96       	adiw	r28, 0x37	; 55
     da8:	ee ad       	ldd	r30, Y+62	; 0x3e
     daa:	ff ad       	ldd	r31, Y+63	; 0x3f
     dac:	e7 97       	sbiw	r28, 0x37	; 55
     dae:	fe 8f       	std	Y+30, r31	; 0x1e
     db0:	ed 8f       	std	Y+29, r30	; 0x1d

00000db2 <.L4>:
     db2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     db4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     db6:	9a a3       	std	Y+34, r25	; 0x22
     db8:	89 a3       	std	Y+33, r24	; 0x21

00000dba <.LBB43>:
     dba:	89 a1       	ldd	r24, Y+33	; 0x21
     dbc:	9a a1       	ldd	r25, Y+34	; 0x22

00000dbe <.L1^B2>:
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <.L1^B2>
     dc2:	9a a3       	std	Y+34, r25	; 0x22
     dc4:	89 a3       	std	Y+33, r24	; 0x21

00000dc6 <.Loc.18>:
	...

00000dc8 <.L9>:
            _delay_ms(500);

            int punt_2 = 21;
     dc8:	85 e1       	ldi	r24, 0x15	; 21
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	9e 83       	std	Y+6, r25	; 0x06
     dce:	8d 83       	std	Y+5, r24	; 0x05

00000dd0 <.Loc.20>:
            display_getal(punt_2);
     dd0:	8d 81       	ldd	r24, Y+5	; 0x05
     dd2:	9e 81       	ldd	r25, Y+6	; 0x06
     dd4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_getal>
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	aa ef       	ldi	r26, 0xFA	; 250
     dde:	b3 e4       	ldi	r27, 0x43	; 67
     de0:	8f 83       	std	Y+7, r24	; 0x07
     de2:	98 87       	std	Y+8, r25	; 0x08
     de4:	a9 87       	std	Y+9, r26	; 0x09
     de6:	ba 87       	std	Y+10, r27	; 0x0a

00000de8 <.LBB45>:
	__tmp = ((F_CPU) / 4e3) * __ms;
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	4a e7       	ldi	r20, 0x7A	; 122
     dee:	55 e4       	ldi	r21, 0x45	; 69
     df0:	6f 81       	ldd	r22, Y+7	; 0x07
     df2:	78 85       	ldd	r23, Y+8	; 0x08
     df4:	89 85       	ldd	r24, Y+9	; 0x09
     df6:	9a 85       	ldd	r25, Y+10	; 0x0a
     df8:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
     dfc:	ed 96       	adiw	r28, 0x3d	; 61
     dfe:	6c af       	std	Y+60, r22	; 0x3c
     e00:	7d af       	std	Y+61, r23	; 0x3d
     e02:	8e af       	std	Y+62, r24	; 0x3e
     e04:	9f af       	std	Y+63, r25	; 0x3f
     e06:	ed 97       	sbiw	r28, 0x3d	; 61
     e08:	ed 96       	adiw	r28, 0x3d	; 61
     e0a:	2c ad       	ldd	r18, Y+60	; 0x3c
     e0c:	3d ad       	ldd	r19, Y+61	; 0x3d
     e0e:	4e ad       	ldd	r20, Y+62	; 0x3e
     e10:	5f ad       	ldd	r21, Y+63	; 0x3f
     e12:	ed 97       	sbiw	r28, 0x3d	; 61
     e14:	2b 87       	std	Y+11, r18	; 0x0b
     e16:	3c 87       	std	Y+12, r19	; 0x0c
     e18:	4d 87       	std	Y+13, r20	; 0x0d
     e1a:	5e 87       	std	Y+14, r21	; 0x0e

00000e1c <.Loc.22>:
	if (__tmp < 1.0)
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e8       	ldi	r20, 0x80	; 128
     e22:	5f e3       	ldi	r21, 0x3F	; 63
     e24:	6b 85       	ldd	r22, Y+11	; 0x0b
     e26:	7c 85       	ldd	r23, Y+12	; 0x0c
     e28:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
     e30:	88 23       	and	r24, r24
     e32:	2c f4       	brge	.+10     	; 0xe3e <.L63>

00000e34 <.Loc.23>:
		__ticks = 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	98 8b       	std	Y+16, r25	; 0x10
     e3a:	8f 87       	std	Y+15, r24	; 0x0f
     e3c:	72 c0       	rjmp	.+228    	; 0xf22 <.L12>

00000e3e <.L63>:
	else if (__tmp > 65535)
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	3f ef       	ldi	r19, 0xFF	; 255
     e42:	4f e7       	ldi	r20, 0x7F	; 127
     e44:	57 e4       	ldi	r21, 0x47	; 71
     e46:	6b 85       	ldd	r22, Y+11	; 0x0b
     e48:	7c 85       	ldd	r23, Y+12	; 0x0c
     e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4e:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
     e52:	88 23       	and	r24, r24
     e54:	09 f0       	breq	.+2      	; 0xe58 <L0^A>

00000e56 <L0^A>:
     e56:	0c f4       	brge	.+2      	; 0xe5a <.Loc.25>

00000e58 <L0^A>:
     e58:	4e c0       	rjmp	.+156    	; 0xef6 <.L64>

00000e5a <.Loc.25>:
		__ticks = (uint16_t) (__ms * 10.0);
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e2       	ldi	r20, 0x20	; 32
     e60:	51 e4       	ldi	r21, 0x41	; 65
     e62:	6f 81       	ldd	r22, Y+7	; 0x07
     e64:	78 85       	ldd	r23, Y+8	; 0x08
     e66:	89 85       	ldd	r24, Y+9	; 0x09
     e68:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6a:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
     e6e:	c3 58       	subi	r28, 0x83	; 131
     e70:	df 4f       	sbci	r29, 0xFF	; 255
     e72:	68 83       	st	Y, r22
     e74:	79 83       	std	Y+1, r23	; 0x01
     e76:	8a 83       	std	Y+2, r24	; 0x02
     e78:	9b 83       	std	Y+3, r25	; 0x03
     e7a:	cd 57       	subi	r28, 0x7D	; 125
     e7c:	d0 40       	sbci	r29, 0x00	; 0
     e7e:	c3 58       	subi	r28, 0x83	; 131
     e80:	df 4f       	sbci	r29, 0xFF	; 255
     e82:	88 81       	ld	r24, Y
     e84:	99 81       	ldd	r25, Y+1	; 0x01
     e86:	aa 81       	ldd	r26, Y+2	; 0x02
     e88:	bb 81       	ldd	r27, Y+3	; 0x03
     e8a:	cd 57       	subi	r28, 0x7D	; 125
     e8c:	d0 40       	sbci	r29, 0x00	; 0
     e8e:	69 96       	adiw	r28, 0x19	; 25
     e90:	8c af       	std	Y+60, r24	; 0x3c
     e92:	9d af       	std	Y+61, r25	; 0x3d
     e94:	ae af       	std	Y+62, r26	; 0x3e
     e96:	bf af       	std	Y+63, r27	; 0x3f
     e98:	69 97       	sbiw	r28, 0x19	; 25

00000e9a <.Loc.26>:
     e9a:	69 96       	adiw	r28, 0x19	; 25
     e9c:	6c ad       	ldd	r22, Y+60	; 0x3c
     e9e:	7d ad       	ldd	r23, Y+61	; 0x3d
     ea0:	8e ad       	ldd	r24, Y+62	; 0x3e
     ea2:	9f ad       	ldd	r25, Y+63	; 0x3f
     ea4:	69 97       	sbiw	r28, 0x19	; 25
     ea6:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
     eaa:	cf 57       	subi	r28, 0x7F	; 127
     eac:	df 4f       	sbci	r29, 0xFF	; 255
     eae:	68 83       	st	Y, r22
     eb0:	79 83       	std	Y+1, r23	; 0x01
     eb2:	8a 83       	std	Y+2, r24	; 0x02
     eb4:	9b 83       	std	Y+3, r25	; 0x03
     eb6:	c1 58       	subi	r28, 0x81	; 129
     eb8:	d0 40       	sbci	r29, 0x00	; 0
     eba:	cf 57       	subi	r28, 0x7F	; 127
     ebc:	df 4f       	sbci	r29, 0xFF	; 255
     ebe:	a8 81       	ld	r26, Y
     ec0:	b9 81       	ldd	r27, Y+1	; 0x01
     ec2:	c1 58       	subi	r28, 0x81	; 129
     ec4:	d0 40       	sbci	r29, 0x00	; 0
     ec6:	b8 8b       	std	Y+16, r27	; 0x10
     ec8:	af 87       	std	Y+15, r26	; 0x0f

00000eca <.Loc.27>:
		while(__ticks)
     eca:	10 c0       	rjmp	.+32     	; 0xeec <.L15>

00000ecc <.L16>:
     ecc:	80 e9       	ldi	r24, 0x90	; 144
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	9a 8b       	std	Y+18, r25	; 0x12
     ed2:	89 8b       	std	Y+17, r24	; 0x11

00000ed4 <.LBB47>:
     ed4:	89 89       	ldd	r24, Y+17	; 0x11
     ed6:	9a 89       	ldd	r25, Y+18	; 0x12

00000ed8 <.L1^B3>:
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <.L1^B3>
     edc:	9a 8b       	std	Y+18, r25	; 0x12
     ede:	89 8b       	std	Y+17, r24	; 0x11

00000ee0 <.Loc.29>:
	...

00000ee2 <.LBE47>:
			__ticks --;
     ee2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee4:	98 89       	ldd	r25, Y+16	; 0x10
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	98 8b       	std	Y+16, r25	; 0x10
     eea:	8f 87       	std	Y+15, r24	; 0x0f

00000eec <.L15>:
		while(__ticks)
     eec:	8f 85       	ldd	r24, Y+15	; 0x0f
     eee:	98 89       	ldd	r25, Y+16	; 0x10
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	61 f7       	brne	.-40     	; 0xecc <.L16>

00000ef4 <.Loc.32>:
		return;
     ef4:	21 c0       	rjmp	.+66     	; 0xf38 <.L17>

00000ef6 <.L64>:
		__ticks = (uint16_t)__tmp;
     ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
     efa:	8d 85       	ldd	r24, Y+13	; 0x0d
     efc:	9e 85       	ldd	r25, Y+14	; 0x0e
     efe:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
     f02:	cb 57       	subi	r28, 0x7B	; 123
     f04:	df 4f       	sbci	r29, 0xFF	; 255
     f06:	68 83       	st	Y, r22
     f08:	79 83       	std	Y+1, r23	; 0x01
     f0a:	8a 83       	std	Y+2, r24	; 0x02
     f0c:	9b 83       	std	Y+3, r25	; 0x03
     f0e:	c5 58       	subi	r28, 0x85	; 133
     f10:	d0 40       	sbci	r29, 0x00	; 0
     f12:	cb 57       	subi	r28, 0x7B	; 123
     f14:	df 4f       	sbci	r29, 0xFF	; 255
     f16:	e8 81       	ld	r30, Y
     f18:	f9 81       	ldd	r31, Y+1	; 0x01
     f1a:	c5 58       	subi	r28, 0x85	; 133
     f1c:	d0 40       	sbci	r29, 0x00	; 0
     f1e:	f8 8b       	std	Y+16, r31	; 0x10
     f20:	ef 87       	std	Y+15, r30	; 0x0f

00000f22 <.L12>:
     f22:	8f 85       	ldd	r24, Y+15	; 0x0f
     f24:	98 89       	ldd	r25, Y+16	; 0x10
     f26:	9c 8b       	std	Y+20, r25	; 0x14
     f28:	8b 8b       	std	Y+19, r24	; 0x13

00000f2a <.LBB49>:
     f2a:	8b 89       	ldd	r24, Y+19	; 0x13
     f2c:	9c 89       	ldd	r25, Y+20	; 0x14

00000f2e <.L1^B4>:
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <.L1^B4>
     f32:	9c 8b       	std	Y+20, r25	; 0x14
     f34:	8b 8b       	std	Y+19, r24	; 0x13

00000f36 <.Loc.35>:
	...

00000f38 <.L17>:
            _delay_ms(500);

            initPortaalkraan();
     f38:	0e 94 20 0c 	call	0x1840	; 0x1840 <initPortaalkraan>

00000f3c <.Loc.37>:
            nulpuntPortaalkraan();
     f3c:	0e 94 4e 0c 	call	0x189c	; 0x189c <nulpuntPortaalkraan>

00000f40 <.Loc.38>:

            // Reset de teller NA het nulpunt
            pressCount = 0;
     f40:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <pressCount+0x1>
     f44:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <pressCount>

00000f48 <.Loc.39>:

            motorBeweegLinks();
     f48:	0e 94 1e 0b 	call	0x163c	; 0x163c <motorBeweegLinks>

00000f4c <.Loc.40>:
            uint16_t distance = afstandPortaalkraan();
     f4c:	0e 94 22 11 	call	0x2244	; 0x2244 <afstandPortaalkraan>
     f50:	9a 83       	std	Y+2, r25	; 0x02
     f52:	89 83       	std	Y+1, r24	; 0x01

00000f54 <.Loc.41>:
            while ((distance != punt_1) & !(opgepakt)) {
     f54:	de c0       	rjmp	.+444    	; 0x1112 <.L18>

00000f56 <.L29>:
                distance = afstandPortaalkraan();
     f56:	0e 94 22 11 	call	0x2244	; 0x2244 <afstandPortaalkraan>
     f5a:	9a 83       	std	Y+2, r25	; 0x02
     f5c:	89 83       	std	Y+1, r24	; 0x01

00000f5e <.Loc.43>:
                _delay_ms(wacht);
     f5e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <wacht>
     f62:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <wacht+0x1>
     f66:	9c 01       	movw	r18, r24
     f68:	99 0f       	add	r25, r25
     f6a:	44 0b       	sbc	r20, r20
     f6c:	55 0b       	sbc	r21, r21
     f6e:	c7 57       	subi	r28, 0x77	; 119
     f70:	df 4f       	sbci	r29, 0xFF	; 255
     f72:	28 83       	st	Y, r18
     f74:	39 83       	std	Y+1, r19	; 0x01
     f76:	4a 83       	std	Y+2, r20	; 0x02
     f78:	5b 83       	std	Y+3, r21	; 0x03
     f7a:	c9 58       	subi	r28, 0x89	; 137
     f7c:	d0 40       	sbci	r29, 0x00	; 0
     f7e:	c7 57       	subi	r28, 0x77	; 119
     f80:	df 4f       	sbci	r29, 0xFF	; 255
     f82:	68 81       	ld	r22, Y
     f84:	79 81       	ldd	r23, Y+1	; 0x01
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	9b 81       	ldd	r25, Y+3	; 0x03
     f8a:	c9 58       	subi	r28, 0x89	; 137
     f8c:	d0 40       	sbci	r29, 0x00	; 0
     f8e:	0e 94 97 11 	call	0x232e	; 0x232e <__floatsisf>
     f92:	61 96       	adiw	r28, 0x11	; 17
     f94:	6c af       	std	Y+60, r22	; 0x3c
     f96:	7d af       	std	Y+61, r23	; 0x3d
     f98:	8e af       	std	Y+62, r24	; 0x3e
     f9a:	9f af       	std	Y+63, r25	; 0x3f
     f9c:	61 97       	sbiw	r28, 0x11	; 17
     f9e:	61 96       	adiw	r28, 0x11	; 17
     fa0:	8c ad       	ldd	r24, Y+60	; 0x3c
     fa2:	9d ad       	ldd	r25, Y+61	; 0x3d
     fa4:	ae ad       	ldd	r26, Y+62	; 0x3e
     fa6:	bf ad       	ldd	r27, Y+63	; 0x3f
     fa8:	61 97       	sbiw	r28, 0x11	; 17
     faa:	8b a3       	std	Y+35, r24	; 0x23
     fac:	9c a3       	std	Y+36, r25	; 0x24
     fae:	ad a3       	std	Y+37, r26	; 0x25
     fb0:	be a3       	std	Y+38, r27	; 0x26

00000fb2 <.LBB51>:
	__tmp = ((F_CPU) / 4e3) * __ms;
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	4a e7       	ldi	r20, 0x7A	; 122
     fb8:	55 e4       	ldi	r21, 0x45	; 69
     fba:	6b a1       	ldd	r22, Y+35	; 0x23
     fbc:	7c a1       	ldd	r23, Y+36	; 0x24
     fbe:	8d a1       	ldd	r24, Y+37	; 0x25
     fc0:	9e a1       	ldd	r25, Y+38	; 0x26
     fc2:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
     fc6:	c3 57       	subi	r28, 0x73	; 115
     fc8:	df 4f       	sbci	r29, 0xFF	; 255
     fca:	68 83       	st	Y, r22
     fcc:	79 83       	std	Y+1, r23	; 0x01
     fce:	8a 83       	std	Y+2, r24	; 0x02
     fd0:	9b 83       	std	Y+3, r25	; 0x03
     fd2:	cd 58       	subi	r28, 0x8D	; 141
     fd4:	d0 40       	sbci	r29, 0x00	; 0
     fd6:	c3 57       	subi	r28, 0x73	; 115
     fd8:	df 4f       	sbci	r29, 0xFF	; 255
     fda:	28 81       	ld	r18, Y
     fdc:	39 81       	ldd	r19, Y+1	; 0x01
     fde:	4a 81       	ldd	r20, Y+2	; 0x02
     fe0:	5b 81       	ldd	r21, Y+3	; 0x03
     fe2:	cd 58       	subi	r28, 0x8D	; 141
     fe4:	d0 40       	sbci	r29, 0x00	; 0
     fe6:	2f a3       	std	Y+39, r18	; 0x27
     fe8:	38 a7       	std	Y+40, r19	; 0x28
     fea:	49 a7       	std	Y+41, r20	; 0x29
     fec:	5a a7       	std	Y+42, r21	; 0x2a

00000fee <.Loc.45>:
	if (__tmp < 1.0)
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e8       	ldi	r20, 0x80	; 128
     ff4:	5f e3       	ldi	r21, 0x3F	; 63
     ff6:	6f a1       	ldd	r22, Y+39	; 0x27
     ff8:	78 a5       	ldd	r23, Y+40	; 0x28
     ffa:	89 a5       	ldd	r24, Y+41	; 0x29
     ffc:	9a a5       	ldd	r25, Y+42	; 0x2a
     ffe:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
    1002:	88 23       	and	r24, r24
    1004:	2c f4       	brge	.+10     	; 0x1010 <.L65>

00001006 <.Loc.46>:
		__ticks = 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	9c a7       	std	Y+44, r25	; 0x2c
    100c:	8b a7       	std	Y+43, r24	; 0x2b
    100e:	72 c0       	rjmp	.+228    	; 0x10f4 <.L21>

00001010 <.L65>:
	else if (__tmp > 65535)
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	3f ef       	ldi	r19, 0xFF	; 255
    1014:	4f e7       	ldi	r20, 0x7F	; 127
    1016:	57 e4       	ldi	r21, 0x47	; 71
    1018:	6f a1       	ldd	r22, Y+39	; 0x27
    101a:	78 a5       	ldd	r23, Y+40	; 0x28
    101c:	89 a5       	ldd	r24, Y+41	; 0x29
    101e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1020:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
    1024:	88 23       	and	r24, r24
    1026:	09 f0       	breq	.+2      	; 0x102a <L0^A>

00001028 <L0^A>:
    1028:	0c f4       	brge	.+2      	; 0x102c <.Loc.48>

0000102a <L0^A>:
    102a:	4e c0       	rjmp	.+156    	; 0x10c8 <.L66>

0000102c <.Loc.48>:
		__ticks = (uint16_t) (__ms * 10.0);
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e2       	ldi	r20, 0x20	; 32
    1032:	51 e4       	ldi	r21, 0x41	; 65
    1034:	6b a1       	ldd	r22, Y+35	; 0x23
    1036:	7c a1       	ldd	r23, Y+36	; 0x24
    1038:	8d a1       	ldd	r24, Y+37	; 0x25
    103a:	9e a1       	ldd	r25, Y+38	; 0x26
    103c:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    1040:	cf 56       	subi	r28, 0x6F	; 111
    1042:	df 4f       	sbci	r29, 0xFF	; 255
    1044:	68 83       	st	Y, r22
    1046:	79 83       	std	Y+1, r23	; 0x01
    1048:	8a 83       	std	Y+2, r24	; 0x02
    104a:	9b 83       	std	Y+3, r25	; 0x03
    104c:	c1 59       	subi	r28, 0x91	; 145
    104e:	d0 40       	sbci	r29, 0x00	; 0
    1050:	cf 56       	subi	r28, 0x6F	; 111
    1052:	df 4f       	sbci	r29, 0xFF	; 255
    1054:	88 81       	ld	r24, Y
    1056:	99 81       	ldd	r25, Y+1	; 0x01
    1058:	aa 81       	ldd	r26, Y+2	; 0x02
    105a:	bb 81       	ldd	r27, Y+3	; 0x03
    105c:	c1 59       	subi	r28, 0x91	; 145
    105e:	d0 40       	sbci	r29, 0x00	; 0
    1060:	a1 96       	adiw	r28, 0x21	; 33
    1062:	8c af       	std	Y+60, r24	; 0x3c
    1064:	9d af       	std	Y+61, r25	; 0x3d
    1066:	ae af       	std	Y+62, r26	; 0x3e
    1068:	bf af       	std	Y+63, r27	; 0x3f
    106a:	a1 97       	sbiw	r28, 0x21	; 33

0000106c <.Loc.49>:
    106c:	a1 96       	adiw	r28, 0x21	; 33
    106e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1070:	7d ad       	ldd	r23, Y+61	; 0x3d
    1072:	8e ad       	ldd	r24, Y+62	; 0x3e
    1074:	9f ad       	ldd	r25, Y+63	; 0x3f
    1076:	a1 97       	sbiw	r28, 0x21	; 33
    1078:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    107c:	cb 56       	subi	r28, 0x6B	; 107
    107e:	df 4f       	sbci	r29, 0xFF	; 255
    1080:	68 83       	st	Y, r22
    1082:	79 83       	std	Y+1, r23	; 0x01
    1084:	8a 83       	std	Y+2, r24	; 0x02
    1086:	9b 83       	std	Y+3, r25	; 0x03
    1088:	c5 59       	subi	r28, 0x95	; 149
    108a:	d0 40       	sbci	r29, 0x00	; 0
    108c:	cb 56       	subi	r28, 0x6B	; 107
    108e:	df 4f       	sbci	r29, 0xFF	; 255
    1090:	a8 81       	ld	r26, Y
    1092:	b9 81       	ldd	r27, Y+1	; 0x01
    1094:	c5 59       	subi	r28, 0x95	; 149
    1096:	d0 40       	sbci	r29, 0x00	; 0
    1098:	bc a7       	std	Y+44, r27	; 0x2c
    109a:	ab a7       	std	Y+43, r26	; 0x2b

0000109c <.Loc.50>:
		while(__ticks)
    109c:	10 c0       	rjmp	.+32     	; 0x10be <.L24>

0000109e <.L25>:
    109e:	80 e9       	ldi	r24, 0x90	; 144
    10a0:	91 e0       	ldi	r25, 0x01	; 1
    10a2:	9e a7       	std	Y+46, r25	; 0x2e
    10a4:	8d a7       	std	Y+45, r24	; 0x2d

000010a6 <.LBB53>:
    10a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    10a8:	9e a5       	ldd	r25, Y+46	; 0x2e

000010aa <.L1^B5>:
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <.L1^B5>
    10ae:	9e a7       	std	Y+46, r25	; 0x2e
    10b0:	8d a7       	std	Y+45, r24	; 0x2d

000010b2 <.Loc.52>:
	...

000010b4 <.LBE53>:
			__ticks --;
    10b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    10b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	9c a7       	std	Y+44, r25	; 0x2c
    10bc:	8b a7       	std	Y+43, r24	; 0x2b

000010be <.L24>:
		while(__ticks)
    10be:	8b a5       	ldd	r24, Y+43	; 0x2b
    10c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	61 f7       	brne	.-40     	; 0x109e <.L25>

000010c6 <.Loc.55>:
		return;
    10c6:	21 c0       	rjmp	.+66     	; 0x110a <.L26>

000010c8 <.L66>:
		__ticks = (uint16_t)__tmp;
    10c8:	6f a1       	ldd	r22, Y+39	; 0x27
    10ca:	78 a5       	ldd	r23, Y+40	; 0x28
    10cc:	89 a5       	ldd	r24, Y+41	; 0x29
    10ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    10d0:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    10d4:	c7 56       	subi	r28, 0x67	; 103
    10d6:	df 4f       	sbci	r29, 0xFF	; 255
    10d8:	68 83       	st	Y, r22
    10da:	79 83       	std	Y+1, r23	; 0x01
    10dc:	8a 83       	std	Y+2, r24	; 0x02
    10de:	9b 83       	std	Y+3, r25	; 0x03
    10e0:	c9 59       	subi	r28, 0x99	; 153
    10e2:	d0 40       	sbci	r29, 0x00	; 0
    10e4:	c7 56       	subi	r28, 0x67	; 103
    10e6:	df 4f       	sbci	r29, 0xFF	; 255
    10e8:	e8 81       	ld	r30, Y
    10ea:	f9 81       	ldd	r31, Y+1	; 0x01
    10ec:	c9 59       	subi	r28, 0x99	; 153
    10ee:	d0 40       	sbci	r29, 0x00	; 0
    10f0:	fc a7       	std	Y+44, r31	; 0x2c
    10f2:	eb a7       	std	Y+43, r30	; 0x2b

000010f4 <.L21>:
    10f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    10f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    10f8:	98 ab       	std	Y+48, r25	; 0x30
    10fa:	8f a7       	std	Y+47, r24	; 0x2f

000010fc <.LBB55>:
    10fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    10fe:	98 a9       	ldd	r25, Y+48	; 0x30

00001100 <.L1^B6>:
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	f1 f7       	brne	.-4      	; 0x1100 <.L1^B6>
    1104:	98 ab       	std	Y+48, r25	; 0x30
    1106:	8f a7       	std	Y+47, r24	; 0x2f

00001108 <.Loc.58>:
	...

0000110a <.L26>:
                display_getal(punt_1);
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	9c 81       	ldd	r25, Y+4	; 0x04
    110e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_getal>

00001112 <.L18>:
            while ((distance != punt_1) & !(opgepakt)) {
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	41 e0       	ldi	r20, 0x01	; 1
    1118:	29 81       	ldd	r18, Y+1	; 0x01
    111a:	3a 81       	ldd	r19, Y+2	; 0x02
    111c:	28 17       	cp	r18, r24
    111e:	39 07       	cpc	r19, r25
    1120:	09 f4       	brne	.+2      	; 0x1124 <.L27>
    1122:	40 e0       	ldi	r20, 0x00	; 0

00001124 <.L27>:
    1124:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <opgepakt>
    1128:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <opgepakt+0x1>
    112c:	21 e0       	ldi	r18, 0x01	; 1
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	09 f0       	breq	.+2      	; 0x1134 <.L28>
    1132:	20 e0       	ldi	r18, 0x00	; 0

00001134 <.L28>:
    1134:	84 2f       	mov	r24, r20
    1136:	82 23       	and	r24, r18

00001138 <.Loc.61>:
    1138:	88 23       	and	r24, r24
    113a:	09 f0       	breq	.+2      	; 0x113e <.Loc.62>

0000113c <L0^A>:
    113c:	0c cf       	rjmp	.-488    	; 0xf56 <.L29>

0000113e <.Loc.62>:
            }

            motorStop();
    113e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <motorStop>

00001142 <.Loc.63>:
            pakPotplantOp();
    1142:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <pakPotplantOp>

00001146 <.Loc.64>:

            // Controleer in welke richting de kraan moet bewegen
            if (punt_1 < punt_2) {
    1146:	2b 81       	ldd	r18, Y+3	; 0x03
    1148:	3c 81       	ldd	r19, Y+4	; 0x04
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	28 17       	cp	r18, r24
    1150:	39 07       	cpc	r19, r25
    1152:	1c f4       	brge	.+6      	; 0x115a <.L30>

00001154 <.Loc.65>:
                motorBeweegLinks();  // Correctie: beweeg naar rechts
    1154:	0e 94 1e 0b 	call	0x163c	; 0x163c <motorBeweegLinks>
    1158:	02 c0       	rjmp	.+4      	; 0x115e <.L31>

0000115a <.L30>:
            } else {
                motorBeweegRechts();
    115a:	0e 94 2b 0b 	call	0x1656	; 0x1656 <motorBeweegRechts>

0000115e <.L31>:
            }

            distance = afstandPortaalkraan();
    115e:	0e 94 22 11 	call	0x2244	; 0x2244 <afstandPortaalkraan>
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01

00001166 <.Loc.68>:
            while ((distance != punt_2)) {
    1166:	de c0       	rjmp	.+444    	; 0x1324 <.L32>

00001168 <.L41>:
                distance = afstandPortaalkraan();
    1168:	0e 94 22 11 	call	0x2244	; 0x2244 <afstandPortaalkraan>
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	89 83       	std	Y+1, r24	; 0x01

00001170 <.Loc.70>:
                _delay_ms(wacht);
    1170:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <wacht>
    1174:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <wacht+0x1>
    1178:	9c 01       	movw	r18, r24
    117a:	99 0f       	add	r25, r25
    117c:	44 0b       	sbc	r20, r20
    117e:	55 0b       	sbc	r21, r21
    1180:	c3 56       	subi	r28, 0x63	; 99
    1182:	df 4f       	sbci	r29, 0xFF	; 255
    1184:	28 83       	st	Y, r18
    1186:	39 83       	std	Y+1, r19	; 0x01
    1188:	4a 83       	std	Y+2, r20	; 0x02
    118a:	5b 83       	std	Y+3, r21	; 0x03
    118c:	cd 59       	subi	r28, 0x9D	; 157
    118e:	d0 40       	sbci	r29, 0x00	; 0
    1190:	c3 56       	subi	r28, 0x63	; 99
    1192:	df 4f       	sbci	r29, 0xFF	; 255
    1194:	68 81       	ld	r22, Y
    1196:	79 81       	ldd	r23, Y+1	; 0x01
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	9b 81       	ldd	r25, Y+3	; 0x03
    119c:	cd 59       	subi	r28, 0x9D	; 157
    119e:	d0 40       	sbci	r29, 0x00	; 0
    11a0:	0e 94 97 11 	call	0x232e	; 0x232e <__floatsisf>
    11a4:	65 96       	adiw	r28, 0x15	; 21
    11a6:	6c af       	std	Y+60, r22	; 0x3c
    11a8:	7d af       	std	Y+61, r23	; 0x3d
    11aa:	8e af       	std	Y+62, r24	; 0x3e
    11ac:	9f af       	std	Y+63, r25	; 0x3f
    11ae:	65 97       	sbiw	r28, 0x15	; 21
    11b0:	65 96       	adiw	r28, 0x15	; 21
    11b2:	8c ad       	ldd	r24, Y+60	; 0x3c
    11b4:	9d ad       	ldd	r25, Y+61	; 0x3d
    11b6:	ae ad       	ldd	r26, Y+62	; 0x3e
    11b8:	bf ad       	ldd	r27, Y+63	; 0x3f
    11ba:	65 97       	sbiw	r28, 0x15	; 21
    11bc:	89 ab       	std	Y+49, r24	; 0x31
    11be:	9a ab       	std	Y+50, r25	; 0x32
    11c0:	ab ab       	std	Y+51, r26	; 0x33
    11c2:	bc ab       	std	Y+52, r27	; 0x34

000011c4 <.LBB58>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	4a e7       	ldi	r20, 0x7A	; 122
    11ca:	55 e4       	ldi	r21, 0x45	; 69
    11cc:	69 a9       	ldd	r22, Y+49	; 0x31
    11ce:	7a a9       	ldd	r23, Y+50	; 0x32
    11d0:	8b a9       	ldd	r24, Y+51	; 0x33
    11d2:	9c a9       	ldd	r25, Y+52	; 0x34
    11d4:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    11d8:	cf 55       	subi	r28, 0x5F	; 95
    11da:	df 4f       	sbci	r29, 0xFF	; 255
    11dc:	68 83       	st	Y, r22
    11de:	79 83       	std	Y+1, r23	; 0x01
    11e0:	8a 83       	std	Y+2, r24	; 0x02
    11e2:	9b 83       	std	Y+3, r25	; 0x03
    11e4:	c1 5a       	subi	r28, 0xA1	; 161
    11e6:	d0 40       	sbci	r29, 0x00	; 0
    11e8:	cf 55       	subi	r28, 0x5F	; 95
    11ea:	df 4f       	sbci	r29, 0xFF	; 255
    11ec:	28 81       	ld	r18, Y
    11ee:	39 81       	ldd	r19, Y+1	; 0x01
    11f0:	4a 81       	ldd	r20, Y+2	; 0x02
    11f2:	5b 81       	ldd	r21, Y+3	; 0x03
    11f4:	c1 5a       	subi	r28, 0xA1	; 161
    11f6:	d0 40       	sbci	r29, 0x00	; 0
    11f8:	2d ab       	std	Y+53, r18	; 0x35
    11fa:	3e ab       	std	Y+54, r19	; 0x36
    11fc:	4f ab       	std	Y+55, r20	; 0x37
    11fe:	58 af       	std	Y+56, r21	; 0x38

00001200 <.Loc.72>:
	if (__tmp < 1.0)
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e8       	ldi	r20, 0x80	; 128
    1206:	5f e3       	ldi	r21, 0x3F	; 63
    1208:	6d a9       	ldd	r22, Y+53	; 0x35
    120a:	7e a9       	ldd	r23, Y+54	; 0x36
    120c:	8f a9       	ldd	r24, Y+55	; 0x37
    120e:	98 ad       	ldd	r25, Y+56	; 0x38
    1210:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
    1214:	88 23       	and	r24, r24
    1216:	2c f4       	brge	.+10     	; 0x1222 <.L67>

00001218 <.Loc.73>:
		__ticks = 1;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9a af       	std	Y+58, r25	; 0x3a
    121e:	89 af       	std	Y+57, r24	; 0x39
    1220:	72 c0       	rjmp	.+228    	; 0x1306 <.L35>

00001222 <.L67>:
	else if (__tmp > 65535)
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	3f ef       	ldi	r19, 0xFF	; 255
    1226:	4f e7       	ldi	r20, 0x7F	; 127
    1228:	57 e4       	ldi	r21, 0x47	; 71
    122a:	6d a9       	ldd	r22, Y+53	; 0x35
    122c:	7e a9       	ldd	r23, Y+54	; 0x36
    122e:	8f a9       	ldd	r24, Y+55	; 0x37
    1230:	98 ad       	ldd	r25, Y+56	; 0x38
    1232:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
    1236:	88 23       	and	r24, r24
    1238:	09 f0       	breq	.+2      	; 0x123c <L0^A>

0000123a <L0^A>:
    123a:	0c f4       	brge	.+2      	; 0x123e <.Loc.75>

0000123c <L0^A>:
    123c:	4e c0       	rjmp	.+156    	; 0x12da <.L68>

0000123e <.Loc.75>:
		__ticks = (uint16_t) (__ms * 10.0);
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	40 e2       	ldi	r20, 0x20	; 32
    1244:	51 e4       	ldi	r21, 0x41	; 65
    1246:	69 a9       	ldd	r22, Y+49	; 0x31
    1248:	7a a9       	ldd	r23, Y+50	; 0x32
    124a:	8b a9       	ldd	r24, Y+51	; 0x33
    124c:	9c a9       	ldd	r25, Y+52	; 0x34
    124e:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    1252:	cb 55       	subi	r28, 0x5B	; 91
    1254:	df 4f       	sbci	r29, 0xFF	; 255
    1256:	68 83       	st	Y, r22
    1258:	79 83       	std	Y+1, r23	; 0x01
    125a:	8a 83       	std	Y+2, r24	; 0x02
    125c:	9b 83       	std	Y+3, r25	; 0x03
    125e:	c5 5a       	subi	r28, 0xA5	; 165
    1260:	d0 40       	sbci	r29, 0x00	; 0
    1262:	cb 55       	subi	r28, 0x5B	; 91
    1264:	df 4f       	sbci	r29, 0xFF	; 255
    1266:	88 81       	ld	r24, Y
    1268:	99 81       	ldd	r25, Y+1	; 0x01
    126a:	aa 81       	ldd	r26, Y+2	; 0x02
    126c:	bb 81       	ldd	r27, Y+3	; 0x03
    126e:	c5 5a       	subi	r28, 0xA5	; 165
    1270:	d0 40       	sbci	r29, 0x00	; 0
    1272:	a5 96       	adiw	r28, 0x25	; 37
    1274:	8c af       	std	Y+60, r24	; 0x3c
    1276:	9d af       	std	Y+61, r25	; 0x3d
    1278:	ae af       	std	Y+62, r26	; 0x3e
    127a:	bf af       	std	Y+63, r27	; 0x3f
    127c:	a5 97       	sbiw	r28, 0x25	; 37

0000127e <.Loc.76>:
    127e:	a5 96       	adiw	r28, 0x25	; 37
    1280:	6c ad       	ldd	r22, Y+60	; 0x3c
    1282:	7d ad       	ldd	r23, Y+61	; 0x3d
    1284:	8e ad       	ldd	r24, Y+62	; 0x3e
    1286:	9f ad       	ldd	r25, Y+63	; 0x3f
    1288:	a5 97       	sbiw	r28, 0x25	; 37
    128a:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    128e:	c7 55       	subi	r28, 0x57	; 87
    1290:	df 4f       	sbci	r29, 0xFF	; 255
    1292:	68 83       	st	Y, r22
    1294:	79 83       	std	Y+1, r23	; 0x01
    1296:	8a 83       	std	Y+2, r24	; 0x02
    1298:	9b 83       	std	Y+3, r25	; 0x03
    129a:	c9 5a       	subi	r28, 0xA9	; 169
    129c:	d0 40       	sbci	r29, 0x00	; 0
    129e:	c7 55       	subi	r28, 0x57	; 87
    12a0:	df 4f       	sbci	r29, 0xFF	; 255
    12a2:	a8 81       	ld	r26, Y
    12a4:	b9 81       	ldd	r27, Y+1	; 0x01
    12a6:	c9 5a       	subi	r28, 0xA9	; 169
    12a8:	d0 40       	sbci	r29, 0x00	; 0
    12aa:	ba af       	std	Y+58, r27	; 0x3a
    12ac:	a9 af       	std	Y+57, r26	; 0x39

000012ae <.Loc.77>:
		while(__ticks)
    12ae:	10 c0       	rjmp	.+32     	; 0x12d0 <.L38>

000012b0 <.L39>:
    12b0:	80 e9       	ldi	r24, 0x90	; 144
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	9c af       	std	Y+60, r25	; 0x3c
    12b6:	8b af       	std	Y+59, r24	; 0x3b

000012b8 <.LBB60>:
    12b8:	8b ad       	ldd	r24, Y+59	; 0x3b
    12ba:	9c ad       	ldd	r25, Y+60	; 0x3c

000012bc <.L1^B7>:
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <.L1^B7>
    12c0:	9c af       	std	Y+60, r25	; 0x3c
    12c2:	8b af       	std	Y+59, r24	; 0x3b

000012c4 <.Loc.79>:
	...

000012c6 <.LBE60>:
			__ticks --;
    12c6:	89 ad       	ldd	r24, Y+57	; 0x39
    12c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	9a af       	std	Y+58, r25	; 0x3a
    12ce:	89 af       	std	Y+57, r24	; 0x39

000012d0 <.L38>:
		while(__ticks)
    12d0:	89 ad       	ldd	r24, Y+57	; 0x39
    12d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	61 f7       	brne	.-40     	; 0x12b0 <.L39>

000012d8 <.Loc.82>:
		return;
    12d8:	21 c0       	rjmp	.+66     	; 0x131c <.L40>

000012da <.L68>:
		__ticks = (uint16_t)__tmp;
    12da:	6d a9       	ldd	r22, Y+53	; 0x35
    12dc:	7e a9       	ldd	r23, Y+54	; 0x36
    12de:	8f a9       	ldd	r24, Y+55	; 0x37
    12e0:	98 ad       	ldd	r25, Y+56	; 0x38
    12e2:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    12e6:	c3 55       	subi	r28, 0x53	; 83
    12e8:	df 4f       	sbci	r29, 0xFF	; 255
    12ea:	68 83       	st	Y, r22
    12ec:	79 83       	std	Y+1, r23	; 0x01
    12ee:	8a 83       	std	Y+2, r24	; 0x02
    12f0:	9b 83       	std	Y+3, r25	; 0x03
    12f2:	cd 5a       	subi	r28, 0xAD	; 173
    12f4:	d0 40       	sbci	r29, 0x00	; 0
    12f6:	c3 55       	subi	r28, 0x53	; 83
    12f8:	df 4f       	sbci	r29, 0xFF	; 255
    12fa:	e8 81       	ld	r30, Y
    12fc:	f9 81       	ldd	r31, Y+1	; 0x01
    12fe:	cd 5a       	subi	r28, 0xAD	; 173
    1300:	d0 40       	sbci	r29, 0x00	; 0
    1302:	fa af       	std	Y+58, r31	; 0x3a
    1304:	e9 af       	std	Y+57, r30	; 0x39

00001306 <.L35>:
    1306:	89 ad       	ldd	r24, Y+57	; 0x39
    1308:	9a ad       	ldd	r25, Y+58	; 0x3a
    130a:	9e af       	std	Y+62, r25	; 0x3e
    130c:	8d af       	std	Y+61, r24	; 0x3d

0000130e <.LBB62>:
    130e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1310:	9e ad       	ldd	r25, Y+62	; 0x3e

00001312 <.L1^B8>:
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	f1 f7       	brne	.-4      	; 0x1312 <.L1^B8>
    1316:	9e af       	std	Y+62, r25	; 0x3e
    1318:	8d af       	std	Y+61, r24	; 0x3d

0000131a <.Loc.85>:
	...

0000131c <.L40>:
                display_getal(punt_2);
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_getal>

00001324 <.L32>:
            while ((distance != punt_2)) {
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
    1326:	9e 81       	ldd	r25, Y+6	; 0x06
    1328:	29 81       	ldd	r18, Y+1	; 0x01
    132a:	3a 81       	ldd	r19, Y+2	; 0x02
    132c:	28 17       	cp	r18, r24
    132e:	39 07       	cpc	r19, r25
    1330:	09 f0       	breq	.+2      	; 0x1334 <.Loc.88>

00001332 <L0^A>:
    1332:	1a cf       	rjmp	.-460    	; 0x1168 <.L41>

00001334 <.Loc.88>:
            }

            motorStop();
    1334:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <motorStop>

00001338 <.Loc.89>:
            zetPotplantNeer();
    1338:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <zetPotplantNeer>

0000133c <.Loc.90>:

            nulpuntPortaalkraan();
    133c:	0e 94 4e 0c 	call	0x189c	; 0x189c <nulpuntPortaalkraan>
    1340:	9e 01       	movw	r18, r28
    1342:	21 5c       	subi	r18, 0xC1	; 193
    1344:	3f 4f       	sbci	r19, 0xFF	; 255
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	aa e7       	ldi	r26, 0x7A	; 122
    134c:	b4 e4       	ldi	r27, 0x44	; 68
    134e:	f9 01       	movw	r30, r18
    1350:	80 83       	st	Z, r24
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	a2 83       	std	Z+2, r26	; 0x02
    1356:	b3 83       	std	Z+3, r27	; 0x03

00001358 <.LBB64>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    1358:	8e 01       	movw	r16, r28
    135a:	0d 5b       	subi	r16, 0xBD	; 189
    135c:	1f 4f       	sbci	r17, 0xFF	; 255
    135e:	ce 01       	movw	r24, r28
    1360:	cf 96       	adiw	r24, 0x3f	; 63
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	4a e7       	ldi	r20, 0x7A	; 122
    1368:	55 e4       	ldi	r21, 0x45	; 69
    136a:	dc 01       	movw	r26, r24
    136c:	6d 91       	ld	r22, X+
    136e:	7d 91       	ld	r23, X+
    1370:	8d 91       	ld	r24, X+
    1372:	9c 91       	ld	r25, X
    1374:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    1378:	cf 54       	subi	r28, 0x4F	; 79
    137a:	df 4f       	sbci	r29, 0xFF	; 255
    137c:	68 83       	st	Y, r22
    137e:	79 83       	std	Y+1, r23	; 0x01
    1380:	8a 83       	std	Y+2, r24	; 0x02
    1382:	9b 83       	std	Y+3, r25	; 0x03
    1384:	c1 5b       	subi	r28, 0xB1	; 177
    1386:	d0 40       	sbci	r29, 0x00	; 0
    1388:	cf 54       	subi	r28, 0x4F	; 79
    138a:	df 4f       	sbci	r29, 0xFF	; 255
    138c:	28 81       	ld	r18, Y
    138e:	39 81       	ldd	r19, Y+1	; 0x01
    1390:	4a 81       	ldd	r20, Y+2	; 0x02
    1392:	5b 81       	ldd	r21, Y+3	; 0x03
    1394:	c1 5b       	subi	r28, 0xB1	; 177
    1396:	d0 40       	sbci	r29, 0x00	; 0
    1398:	d8 01       	movw	r26, r16
    139a:	2d 93       	st	X+, r18
    139c:	3d 93       	st	X+, r19
    139e:	4d 93       	st	X+, r20
    13a0:	5c 93       	st	X, r21
    13a2:	13 97       	sbiw	r26, 0x03	; 3

000013a4 <.Loc.92>:
	if (__tmp < 1.0)
    13a4:	ce 01       	movw	r24, r28
    13a6:	8d 5b       	subi	r24, 0xBD	; 189
    13a8:	9f 4f       	sbci	r25, 0xFF	; 255
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 e8       	ldi	r20, 0x80	; 128
    13b0:	5f e3       	ldi	r21, 0x3F	; 63
    13b2:	fc 01       	movw	r30, r24
    13b4:	60 81       	ld	r22, Z
    13b6:	71 81       	ldd	r23, Z+1	; 0x01
    13b8:	82 81       	ldd	r24, Z+2	; 0x02
    13ba:	93 81       	ldd	r25, Z+3	; 0x03
    13bc:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
    13c0:	88 23       	and	r24, r24
    13c2:	54 f4       	brge	.+20     	; 0x13d8 <.L69>

000013c4 <.Loc.93>:
		__ticks = 1;
    13c4:	ce 01       	movw	r24, r28
    13c6:	89 5b       	subi	r24, 0xB9	; 185
    13c8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ca:	21 e0       	ldi	r18, 0x01	; 1
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	dc 01       	movw	r26, r24
    13d0:	11 96       	adiw	r26, 0x01	; 1
    13d2:	3c 93       	st	X, r19
    13d4:	2e 93       	st	-X, r18
    13d6:	a0 c0       	rjmp	.+320    	; 0x1518 <.L44>

000013d8 <.L69>:
	else if (__tmp > 65535)
    13d8:	ce 01       	movw	r24, r28
    13da:	8d 5b       	subi	r24, 0xBD	; 189
    13dc:	9f 4f       	sbci	r25, 0xFF	; 255
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	3f ef       	ldi	r19, 0xFF	; 255
    13e2:	4f e7       	ldi	r20, 0x7F	; 127
    13e4:	57 e4       	ldi	r21, 0x47	; 71
    13e6:	fc 01       	movw	r30, r24
    13e8:	60 81       	ld	r22, Z
    13ea:	71 81       	ldd	r23, Z+1	; 0x01
    13ec:	82 81       	ldd	r24, Z+2	; 0x02
    13ee:	93 81       	ldd	r25, Z+3	; 0x03
    13f0:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
    13f4:	88 23       	and	r24, r24
    13f6:	09 f0       	breq	.+2      	; 0x13fa <L0^A>

000013f8 <L0^A>:
    13f8:	0c f4       	brge	.+2      	; 0x13fc <.Loc.95>

000013fa <L0^A>:
    13fa:	70 c0       	rjmp	.+224    	; 0x14dc <.L70>

000013fc <.Loc.95>:
		__ticks = (uint16_t) (__ms * 10.0);
    13fc:	ce 01       	movw	r24, r28
    13fe:	cf 96       	adiw	r24, 0x3f	; 63
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e2       	ldi	r20, 0x20	; 32
    1406:	51 e4       	ldi	r21, 0x41	; 65
    1408:	dc 01       	movw	r26, r24
    140a:	6d 91       	ld	r22, X+
    140c:	7d 91       	ld	r23, X+
    140e:	8d 91       	ld	r24, X+
    1410:	9c 91       	ld	r25, X
    1412:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    1416:	cb 54       	subi	r28, 0x4B	; 75
    1418:	df 4f       	sbci	r29, 0xFF	; 255
    141a:	68 83       	st	Y, r22
    141c:	79 83       	std	Y+1, r23	; 0x01
    141e:	8a 83       	std	Y+2, r24	; 0x02
    1420:	9b 83       	std	Y+3, r25	; 0x03
    1422:	c5 5b       	subi	r28, 0xB5	; 181
    1424:	d0 40       	sbci	r29, 0x00	; 0
    1426:	cb 54       	subi	r28, 0x4B	; 75
    1428:	df 4f       	sbci	r29, 0xFF	; 255
    142a:	28 81       	ld	r18, Y
    142c:	39 81       	ldd	r19, Y+1	; 0x01
    142e:	4a 81       	ldd	r20, Y+2	; 0x02
    1430:	5b 81       	ldd	r21, Y+3	; 0x03
    1432:	c5 5b       	subi	r28, 0xB5	; 181
    1434:	d0 40       	sbci	r29, 0x00	; 0
    1436:	a9 96       	adiw	r28, 0x29	; 41
    1438:	2c af       	std	Y+60, r18	; 0x3c
    143a:	3d af       	std	Y+61, r19	; 0x3d
    143c:	4e af       	std	Y+62, r20	; 0x3e
    143e:	5f af       	std	Y+63, r21	; 0x3f
    1440:	a9 97       	sbiw	r28, 0x29	; 41

00001442 <.Loc.96>:
    1442:	8e 01       	movw	r16, r28
    1444:	09 5b       	subi	r16, 0xB9	; 185
    1446:	1f 4f       	sbci	r17, 0xFF	; 255
    1448:	a9 96       	adiw	r28, 0x29	; 41
    144a:	6c ad       	ldd	r22, Y+60	; 0x3c
    144c:	7d ad       	ldd	r23, Y+61	; 0x3d
    144e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1450:	9f ad       	ldd	r25, Y+63	; 0x3f
    1452:	a9 97       	sbiw	r28, 0x29	; 41
    1454:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    1458:	c7 54       	subi	r28, 0x47	; 71
    145a:	df 4f       	sbci	r29, 0xFF	; 255
    145c:	68 83       	st	Y, r22
    145e:	79 83       	std	Y+1, r23	; 0x01
    1460:	8a 83       	std	Y+2, r24	; 0x02
    1462:	9b 83       	std	Y+3, r25	; 0x03
    1464:	c9 5b       	subi	r28, 0xB9	; 185
    1466:	d0 40       	sbci	r29, 0x00	; 0
    1468:	c7 54       	subi	r28, 0x47	; 71
    146a:	df 4f       	sbci	r29, 0xFF	; 255
    146c:	e8 81       	ld	r30, Y
    146e:	f9 81       	ldd	r31, Y+1	; 0x01
    1470:	c9 5b       	subi	r28, 0xB9	; 185
    1472:	d0 40       	sbci	r29, 0x00	; 0
    1474:	d8 01       	movw	r26, r16
    1476:	11 96       	adiw	r26, 0x01	; 1
    1478:	fc 93       	st	X, r31
    147a:	ee 93       	st	-X, r30

0000147c <.Loc.97>:
		while(__ticks)
    147c:	26 c0       	rjmp	.+76     	; 0x14ca <.L47>

0000147e <.L48>:
    147e:	ce 01       	movw	r24, r28
    1480:	87 5b       	subi	r24, 0xB7	; 183
    1482:	9f 4f       	sbci	r25, 0xFF	; 255
    1484:	20 e9       	ldi	r18, 0x90	; 144
    1486:	31 e0       	ldi	r19, 0x01	; 1
    1488:	dc 01       	movw	r26, r24
    148a:	2d 93       	st	X+, r18
    148c:	3c 93       	st	X, r19

0000148e <.LBB66>:
    148e:	ce 01       	movw	r24, r28
    1490:	87 5b       	subi	r24, 0xB7	; 183
    1492:	9f 4f       	sbci	r25, 0xFF	; 255
    1494:	fc 01       	movw	r30, r24
    1496:	80 81       	ld	r24, Z
    1498:	91 81       	ldd	r25, Z+1	; 0x01

0000149a <.L1^B9>:
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <.L1^B9>
    149e:	9e 01       	movw	r18, r28
    14a0:	27 5b       	subi	r18, 0xB7	; 183
    14a2:	3f 4f       	sbci	r19, 0xFF	; 255
    14a4:	d9 01       	movw	r26, r18
    14a6:	8d 93       	st	X+, r24
    14a8:	9c 93       	st	X, r25

000014aa <.Loc.99>:
	...

000014ac <.LBE66>:
			__ticks --;
    14ac:	ce 01       	movw	r24, r28
    14ae:	89 5b       	subi	r24, 0xB9	; 185
    14b0:	9f 4f       	sbci	r25, 0xFF	; 255
    14b2:	9e 01       	movw	r18, r28
    14b4:	29 5b       	subi	r18, 0xB9	; 185
    14b6:	3f 4f       	sbci	r19, 0xFF	; 255
    14b8:	f9 01       	movw	r30, r18
    14ba:	20 81       	ld	r18, Z
    14bc:	31 81       	ldd	r19, Z+1	; 0x01
    14be:	21 50       	subi	r18, 0x01	; 1
    14c0:	31 09       	sbc	r19, r1
    14c2:	dc 01       	movw	r26, r24
    14c4:	11 96       	adiw	r26, 0x01	; 1
    14c6:	3c 93       	st	X, r19
    14c8:	2e 93       	st	-X, r18

000014ca <.L47>:
		while(__ticks)
    14ca:	ce 01       	movw	r24, r28
    14cc:	89 5b       	subi	r24, 0xB9	; 185
    14ce:	9f 4f       	sbci	r25, 0xFF	; 255
    14d0:	fc 01       	movw	r30, r24
    14d2:	80 81       	ld	r24, Z
    14d4:	91 81       	ldd	r25, Z+1	; 0x01
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	91 f6       	brne	.-92     	; 0x147e <.L48>

000014da <.Loc.102>:
		return;
    14da:	3a c0       	rjmp	.+116    	; 0x1550 <.L49>

000014dc <.L70>:
		__ticks = (uint16_t)__tmp;
    14dc:	8e 01       	movw	r16, r28
    14de:	09 5b       	subi	r16, 0xB9	; 185
    14e0:	1f 4f       	sbci	r17, 0xFF	; 255
    14e2:	ce 01       	movw	r24, r28
    14e4:	8d 5b       	subi	r24, 0xBD	; 189
    14e6:	9f 4f       	sbci	r25, 0xFF	; 255
    14e8:	dc 01       	movw	r26, r24
    14ea:	6d 91       	ld	r22, X+
    14ec:	7d 91       	ld	r23, X+
    14ee:	8d 91       	ld	r24, X+
    14f0:	9c 91       	ld	r25, X
    14f2:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    14f6:	c3 54       	subi	r28, 0x43	; 67
    14f8:	df 4f       	sbci	r29, 0xFF	; 255
    14fa:	68 83       	st	Y, r22
    14fc:	79 83       	std	Y+1, r23	; 0x01
    14fe:	8a 83       	std	Y+2, r24	; 0x02
    1500:	9b 83       	std	Y+3, r25	; 0x03
    1502:	cd 5b       	subi	r28, 0xBD	; 189
    1504:	d0 40       	sbci	r29, 0x00	; 0
    1506:	c3 54       	subi	r28, 0x43	; 67
    1508:	df 4f       	sbci	r29, 0xFF	; 255
    150a:	28 81       	ld	r18, Y
    150c:	39 81       	ldd	r19, Y+1	; 0x01
    150e:	cd 5b       	subi	r28, 0xBD	; 189
    1510:	d0 40       	sbci	r29, 0x00	; 0
    1512:	f8 01       	movw	r30, r16
    1514:	31 83       	std	Z+1, r19	; 0x01
    1516:	20 83       	st	Z, r18

00001518 <.L44>:
    1518:	ce 01       	movw	r24, r28
    151a:	85 5b       	subi	r24, 0xB5	; 181
    151c:	9f 4f       	sbci	r25, 0xFF	; 255
    151e:	9e 01       	movw	r18, r28
    1520:	29 5b       	subi	r18, 0xB9	; 185
    1522:	3f 4f       	sbci	r19, 0xFF	; 255
    1524:	d9 01       	movw	r26, r18
    1526:	2d 91       	ld	r18, X+
    1528:	3c 91       	ld	r19, X
    152a:	fc 01       	movw	r30, r24
    152c:	31 83       	std	Z+1, r19	; 0x01
    152e:	20 83       	st	Z, r18

00001530 <.LBB68>:
    1530:	ce 01       	movw	r24, r28
    1532:	85 5b       	subi	r24, 0xB5	; 181
    1534:	9f 4f       	sbci	r25, 0xFF	; 255
    1536:	dc 01       	movw	r26, r24
    1538:	8d 91       	ld	r24, X+
    153a:	9c 91       	ld	r25, X
    153c:	11 97       	sbiw	r26, 0x01	; 1

0000153e <.L1^B10>:
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <.L1^B10>
    1542:	9e 01       	movw	r18, r28
    1544:	25 5b       	subi	r18, 0xB5	; 181
    1546:	3f 4f       	sbci	r19, 0xFF	; 255
    1548:	f9 01       	movw	r30, r18
    154a:	91 83       	std	Z+1, r25	; 0x01
    154c:	80 83       	st	Z, r24

0000154e <.Loc.105>:
	...

00001550 <.L49>:
	...

00001552 <.LBE38>:
            _delay_ms(1000);
            break;
        }
        break;
    1552:	00 00       	nop
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0

00001558 <.Loc.108>:
    }
}
    1558:	c0 54       	subi	r28, 0x40	; 64
    155a:	df 4f       	sbci	r29, 0xFF	; 255
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	08 95       	ret

00001570 <init_timer>:
 *        - Gebruik een prescaler van 64.
 *        - Stel een duty cycle in van 50%.
 *        - Schakel Compare Match A en Overflow interrupts in.
 */
void init_timer(void)
{
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62

00001578 <.Loc.1>:
    // Zet Timer0 in Normal mode, Prescaler = 64
    TCCR0A = 0; // Normal mode
    1578:	84 e4       	ldi	r24, 0x44	; 68
    157a:	90 e0       	ldi	r25, 0x00	; 0

0000157c <.Loc.2>:
    157c:	fc 01       	movw	r30, r24
    157e:	10 82       	st	Z, r1

00001580 <.Loc.3>:
    TCCR0B = (0 << CS02) | (1 << CS01) | (1 << CS00); // Prescaler = 64
    1580:	85 e4       	ldi	r24, 0x45	; 69
    1582:	90 e0       	ldi	r25, 0x00	; 0

00001584 <.Loc.4>:
    1584:	23 e0       	ldi	r18, 0x03	; 3
    1586:	fc 01       	movw	r30, r24
    1588:	20 83       	st	Z, r18

0000158a <.Loc.5>:

    OCR0A = 127;  // Duty cycle van 50%
    158a:	87 e4       	ldi	r24, 0x47	; 71
    158c:	90 e0       	ldi	r25, 0x00	; 0

0000158e <.Loc.6>:
    158e:	2f e7       	ldi	r18, 0x7F	; 127
    1590:	fc 01       	movw	r30, r24
    1592:	20 83       	st	Z, r18

00001594 <.Loc.7>:
    TIMSK0 = (1 << OCIE0A) | (1 << TOIE0); // Schakel Compare Match A en Overflow interrupts in
    1594:	8e e6       	ldi	r24, 0x6E	; 110
    1596:	90 e0       	ldi	r25, 0x00	; 0

00001598 <.Loc.8>:
    1598:	23 e0       	ldi	r18, 0x03	; 3
    159a:	fc 01       	movw	r30, r24
    159c:	20 83       	st	Z, r18

0000159e <.Loc.9>:
}
    159e:	00 00       	nop
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	08 95       	ret

000015a6 <init_pins>:
 *        - Stel motorbedieningspins (LPWM, RPWM) in als uitgangen en zet deze uit.
 *        - Stel pin 22 in als uitgang.
 *        - Stel PF1 in als invoer met pull-up weerstand (bijvoorbeeld voor een knop).
 */
void init_pins(void)
{
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62

000015ae <.Loc.11>:
    // Debug LED instellen
    DDRB |= (1 << PB6);
    15ae:	84 e2       	ldi	r24, 0x24	; 36
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	fc 01       	movw	r30, r24
    15b4:	20 81       	ld	r18, Z
    15b6:	84 e2       	ldi	r24, 0x24	; 36
    15b8:	90 e0       	ldi	r25, 0x00	; 0

000015ba <.Loc.12>:
    15ba:	20 64       	ori	r18, 0x40	; 64
    15bc:	fc 01       	movw	r30, r24
    15be:	20 83       	st	Z, r18

000015c0 <.Loc.13>:

    // Motorbedieningspins (LPWM, RPWM) instellen als uitgangen, standaard uitgeschakeld
    DDRL |= (1 << LPWM) | (1 << RPWM);
    15c0:	8a e0       	ldi	r24, 0x0A	; 10
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	fc 01       	movw	r30, r24
    15c6:	20 81       	ld	r18, Z
    15c8:	8a e0       	ldi	r24, 0x0A	; 10
    15ca:	91 e0       	ldi	r25, 0x01	; 1

000015cc <.Loc.14>:
    15cc:	28 62       	ori	r18, 0x28	; 40
    15ce:	fc 01       	movw	r30, r24
    15d0:	20 83       	st	Z, r18

000015d2 <.Loc.15>:
    PORTL &= ~(1 << LPWM) & ~(1 << RPWM);
    15d2:	8b e0       	ldi	r24, 0x0B	; 11
    15d4:	91 e0       	ldi	r25, 0x01	; 1
    15d6:	fc 01       	movw	r30, r24
    15d8:	20 81       	ld	r18, Z

000015da <.Loc.16>:
    15da:	8b e0       	ldi	r24, 0x0B	; 11
    15dc:	91 e0       	ldi	r25, 0x01	; 1

000015de <.Loc.17>:
    15de:	27 7d       	andi	r18, 0xD7	; 215
    15e0:	fc 01       	movw	r30, r24
    15e2:	20 83       	st	Z, r18

000015e4 <.Loc.18>:

    // Pin 22 (v5) instellen als uitgang
    DDRA |= (1 << vcc1);
    15e4:	81 e2       	ldi	r24, 0x21	; 33
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	fc 01       	movw	r30, r24
    15ea:	20 81       	ld	r18, Z
    15ec:	81 e2       	ldi	r24, 0x21	; 33
    15ee:	90 e0       	ldi	r25, 0x00	; 0

000015f0 <.Loc.19>:
    15f0:	21 60       	ori	r18, 0x01	; 1
    15f2:	fc 01       	movw	r30, r24
    15f4:	20 83       	st	Z, r18

000015f6 <.Loc.20>:

    // PF1 (knop) instellen als invoer met pull-up weerstand
    DDRF &= ~(1 << PF1);  // PF1 als invoer
    15f6:	80 e3       	ldi	r24, 0x30	; 48
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	fc 01       	movw	r30, r24
    15fc:	20 81       	ld	r18, Z

000015fe <.Loc.21>:
    15fe:	80 e3       	ldi	r24, 0x30	; 48
    1600:	90 e0       	ldi	r25, 0x00	; 0

00001602 <.Loc.22>:
    1602:	2d 7f       	andi	r18, 0xFD	; 253
    1604:	fc 01       	movw	r30, r24
    1606:	20 83       	st	Z, r18

00001608 <.Loc.23>:
    PORTF |= (1 << PF1);  // Pull-up weerstand inschakelen
    1608:	81 e3       	ldi	r24, 0x31	; 49
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	fc 01       	movw	r30, r24
    160e:	20 81       	ld	r18, Z
    1610:	81 e3       	ldi	r24, 0x31	; 49
    1612:	90 e0       	ldi	r25, 0x00	; 0

00001614 <.Loc.24>:
    1614:	22 60       	ori	r18, 0x02	; 2
    1616:	fc 01       	movw	r30, r24
    1618:	20 83       	st	Z, r18

0000161a <.Loc.25>:
}
    161a:	00 00       	nop
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	08 95       	ret

00001622 <init>:
/**
 * @brief Initialiseer de motorbediening door pins en timers in te stellen.
 *        Schakel globale interrupts in.
 */
void init(void)
{
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62

0000162a <.Loc.27>:
    init_pins();    // Pins initialiseren
    162a:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <init_pins>

0000162e <.Loc.28>:
    init_timer();   // Timer initialiseren
    162e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <init_timer>

00001632 <.Loc.29>:
    sei();          // Schakel globale interrupts in
    1632:	78 94       	sei

00001634 <.Loc.30>:
}
    1634:	00 00       	nop
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	08 95       	ret

0000163c <motorBeweegLinks>:

/**
 * @brief Beweeg de motor naar links door LPWM te activeren en RPWM te deactiveren.
 */
void motorBeweegLinks(void)
{
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62

00001644 <.Loc.32>:
    lpwm_active = 1; // LPWM inschakelen
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <lpwm_active>

0000164a <.Loc.33>:
    rpwm_active = 0; // RPWM uitschakelen
    164a:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <rpwm_active>

0000164e <.Loc.34>:
}
    164e:	00 00       	nop
    1650:	df 91       	pop	r29
    1652:	cf 91       	pop	r28
    1654:	08 95       	ret

00001656 <motorBeweegRechts>:

/**
 * @brief Beweeg de motor naar rechts door RPWM te activeren en LPWM te deactiveren.
 */
void motorBeweegRechts(void)
{
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62

0000165e <.Loc.36>:
    rpwm_active = 1; // RPWM inschakelen
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <rpwm_active>

00001664 <.Loc.37>:
    lpwm_active = 0; // LPWM uitschakelen
    1664:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <lpwm_active>

00001668 <.Loc.38>:
}
    1668:	00 00       	nop
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	08 95       	ret

00001670 <motorBeweegOmlaag>:

/**
 * @brief Beweeg de motor naar beneden door RPWM2 te activeren en LPWM2 te deactiveren.
 */
void motorBeweegOmlaag(void)
{
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62

00001678 <.Loc.40>:
    rpwm2_active = 1; // RPWM2 inschakelen
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <rpwm2_active>

0000167e <.Loc.41>:
    lpwm2_active = 0; // LPWM2 uitschakelen
    167e:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <lpwm2_active>

00001682 <.Loc.42>:
}
    1682:	00 00       	nop
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	08 95       	ret

0000168a <motorBeweegOmhoog>:

/**
 * @brief Beweeg de motor omhoog door LPWM2 te activeren en RPWM2 te deactiveren.
 */
void motorBeweegOmhoog(void)
{
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62

00001692 <.Loc.44>:
    lpwm2_active = 1; // LPWM2 inschakelen
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <lpwm2_active>

00001698 <.Loc.45>:
    rpwm2_active = 0; // RPWM2 uitschakelen
    1698:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <rpwm2_active>

0000169c <.Loc.46>:
}
    169c:	00 00       	nop
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	08 95       	ret

000016a4 <motorStop>:

/**
 * @brief Stop alle motoren door alle PWM-signalen uit te schakelen.
 */
void motorStop(void)
{
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62

000016ac <.Loc.48>:
    lpwm_active = 0;  // LPWM uitschakelen
    16ac:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <lpwm_active>

000016b0 <.Loc.49>:
    rpwm_active = 0;  // RPWM uitschakelen
    16b0:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <rpwm_active>

000016b4 <.Loc.50>:
    lpwm2_active = 0; // LPWM2 uitschakelen
    16b4:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <lpwm2_active>

000016b8 <.Loc.51>:
    rpwm2_active = 0; // RPWM2 uitschakelen
    16b8:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <rpwm2_active>

000016bc <.Loc.52>:

    // Zet alle motorpins uit
    PORTL &= ~(1 << LPWM) & ~(1 << RPWM) & ~(1 << LPWM2) & ~(1 << RPWM2);
    16bc:	8b e0       	ldi	r24, 0x0B	; 11
    16be:	91 e0       	ldi	r25, 0x01	; 1
    16c0:	fc 01       	movw	r30, r24
    16c2:	20 81       	ld	r18, Z

000016c4 <.Loc.53>:
    16c4:	8b e0       	ldi	r24, 0x0B	; 11
    16c6:	91 e0       	ldi	r25, 0x01	; 1

000016c8 <.Loc.54>:
    16c8:	23 7c       	andi	r18, 0xC3	; 195
    16ca:	fc 01       	movw	r30, r24
    16cc:	20 83       	st	Z, r18

000016ce <.Loc.55>:
}
    16ce:	00 00       	nop
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <__vector_21>:
/**
 * @brief ISR (Interrupt Service Routine) voor Timer0 Compare Match A.
 *        Zet de actieve motorpins uit (PWM-signaal laag).
 */
ISR(TIMER0_COMPA_vect)
{
    16d6:	1f 92       	push	r1
    16d8:	0f 92       	push	r0
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	0f 92       	push	r0
    16de:	11 24       	eor	r1, r1
    16e0:	0b b6       	in	r0, 0x3b	; 59
    16e2:	0f 92       	push	r0
    16e4:	2f 93       	push	r18
    16e6:	8f 93       	push	r24
    16e8:	9f 93       	push	r25
    16ea:	ef 93       	push	r30
    16ec:	ff 93       	push	r31
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62

000016f6 <.Loc.57>:
    if (lpwm_active)
    16f6:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <lpwm_active>

000016fa <.Loc.58>:
    16fa:	88 23       	and	r24, r24
    16fc:	49 f0       	breq	.+18     	; 0x1710 <.L10>

000016fe <.Loc.59>:
    {
        PORTL &= ~(1 << LPWM); // LPWM uitschakelen
    16fe:	8b e0       	ldi	r24, 0x0B	; 11
    1700:	91 e0       	ldi	r25, 0x01	; 1
    1702:	fc 01       	movw	r30, r24
    1704:	20 81       	ld	r18, Z

00001706 <.Loc.60>:
    1706:	8b e0       	ldi	r24, 0x0B	; 11
    1708:	91 e0       	ldi	r25, 0x01	; 1

0000170a <.Loc.61>:
    170a:	2f 7d       	andi	r18, 0xDF	; 223
    170c:	fc 01       	movw	r30, r24
    170e:	20 83       	st	Z, r18

00001710 <.L10>:
    }
    if (rpwm_active)
    1710:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <rpwm_active>

00001714 <.Loc.63>:
    1714:	88 23       	and	r24, r24
    1716:	49 f0       	breq	.+18     	; 0x172a <.L11>

00001718 <.Loc.64>:
    {
        PORTL &= ~(1 << RPWM); // RPWM uitschakelen
    1718:	8b e0       	ldi	r24, 0x0B	; 11
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	fc 01       	movw	r30, r24
    171e:	20 81       	ld	r18, Z

00001720 <.Loc.65>:
    1720:	8b e0       	ldi	r24, 0x0B	; 11
    1722:	91 e0       	ldi	r25, 0x01	; 1

00001724 <.Loc.66>:
    1724:	27 7f       	andi	r18, 0xF7	; 247
    1726:	fc 01       	movw	r30, r24
    1728:	20 83       	st	Z, r18

0000172a <.L11>:
    }
    if (lpwm2_active)
    172a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <lpwm2_active>

0000172e <.Loc.68>:
    172e:	88 23       	and	r24, r24
    1730:	49 f0       	breq	.+18     	; 0x1744 <.L12>

00001732 <.Loc.69>:
    {
        PORTL &= ~(1 << LPWM2); // LPWM2 uitschakelen
    1732:	8b e0       	ldi	r24, 0x0B	; 11
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	fc 01       	movw	r30, r24
    1738:	20 81       	ld	r18, Z

0000173a <.Loc.70>:
    173a:	8b e0       	ldi	r24, 0x0B	; 11
    173c:	91 e0       	ldi	r25, 0x01	; 1

0000173e <.Loc.71>:
    173e:	2b 7f       	andi	r18, 0xFB	; 251
    1740:	fc 01       	movw	r30, r24
    1742:	20 83       	st	Z, r18

00001744 <.L12>:
    }
    if (rpwm2_active)
    1744:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <rpwm2_active>

00001748 <.Loc.73>:
    1748:	88 23       	and	r24, r24
    174a:	49 f0       	breq	.+18     	; 0x175e <.L14>

0000174c <.Loc.74>:
    {
        PORTL &= ~(1 << RPWM2); // RPWM2 uitschakelen
    174c:	8b e0       	ldi	r24, 0x0B	; 11
    174e:	91 e0       	ldi	r25, 0x01	; 1
    1750:	fc 01       	movw	r30, r24
    1752:	20 81       	ld	r18, Z

00001754 <.Loc.75>:
    1754:	8b e0       	ldi	r24, 0x0B	; 11
    1756:	91 e0       	ldi	r25, 0x01	; 1

00001758 <.Loc.76>:
    1758:	2f 7e       	andi	r18, 0xEF	; 239
    175a:	fc 01       	movw	r30, r24
    175c:	20 83       	st	Z, r18

0000175e <.L14>:
    }
}
    175e:	00 00       	nop
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	ff 91       	pop	r31
    1766:	ef 91       	pop	r30
    1768:	9f 91       	pop	r25
    176a:	8f 91       	pop	r24
    176c:	2f 91       	pop	r18
    176e:	0f 90       	pop	r0
    1770:	0b be       	out	0x3b, r0	; 59
    1772:	0f 90       	pop	r0
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	0f 90       	pop	r0
    1778:	1f 90       	pop	r1
    177a:	18 95       	reti

0000177c <__vector_23>:
/**
 * @brief ISR (Interrupt Service Routine) voor Timer0 Overflow.
 *        Zet de actieve motorpins aan (PWM-signaal hoog).
 */
ISR(TIMER0_OVF_vect)
{
    177c:	1f 92       	push	r1
    177e:	0f 92       	push	r0
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	0b b6       	in	r0, 0x3b	; 59
    1788:	0f 92       	push	r0
    178a:	2f 93       	push	r18
    178c:	8f 93       	push	r24
    178e:	9f 93       	push	r25
    1790:	ef 93       	push	r30
    1792:	ff 93       	push	r31
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62

0000179c <.Loc.79>:
    if (lpwm_active)
    179c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <lpwm_active>

000017a0 <.Loc.80>:
    17a0:	88 23       	and	r24, r24
    17a2:	49 f0       	breq	.+18     	; 0x17b6 <.L16>

000017a4 <.Loc.81>:
    {
        PORTL |= (1 << LPWM); // LPWM inschakelen
    17a4:	8b e0       	ldi	r24, 0x0B	; 11
    17a6:	91 e0       	ldi	r25, 0x01	; 1
    17a8:	fc 01       	movw	r30, r24
    17aa:	20 81       	ld	r18, Z
    17ac:	8b e0       	ldi	r24, 0x0B	; 11
    17ae:	91 e0       	ldi	r25, 0x01	; 1

000017b0 <.Loc.82>:
    17b0:	20 62       	ori	r18, 0x20	; 32
    17b2:	fc 01       	movw	r30, r24
    17b4:	20 83       	st	Z, r18

000017b6 <.L16>:
    }
    if (rpwm_active)
    17b6:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <rpwm_active>

000017ba <.Loc.84>:
    17ba:	88 23       	and	r24, r24
    17bc:	49 f0       	breq	.+18     	; 0x17d0 <.L17>

000017be <.Loc.85>:
    {
        PORTL |= (1 << RPWM); // RPWM inschakelen
    17be:	8b e0       	ldi	r24, 0x0B	; 11
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	fc 01       	movw	r30, r24
    17c4:	20 81       	ld	r18, Z
    17c6:	8b e0       	ldi	r24, 0x0B	; 11
    17c8:	91 e0       	ldi	r25, 0x01	; 1

000017ca <.Loc.86>:
    17ca:	28 60       	ori	r18, 0x08	; 8
    17cc:	fc 01       	movw	r30, r24
    17ce:	20 83       	st	Z, r18

000017d0 <.L17>:
    }
    if (lpwm2_active)
    17d0:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <lpwm2_active>

000017d4 <.Loc.88>:
    17d4:	88 23       	and	r24, r24
    17d6:	49 f0       	breq	.+18     	; 0x17ea <.L18>

000017d8 <.Loc.89>:
    {
        PORTL |= (1 << LPWM2); // LPWM2 inschakelen
    17d8:	8b e0       	ldi	r24, 0x0B	; 11
    17da:	91 e0       	ldi	r25, 0x01	; 1
    17dc:	fc 01       	movw	r30, r24
    17de:	20 81       	ld	r18, Z
    17e0:	8b e0       	ldi	r24, 0x0B	; 11
    17e2:	91 e0       	ldi	r25, 0x01	; 1

000017e4 <.Loc.90>:
    17e4:	24 60       	ori	r18, 0x04	; 4
    17e6:	fc 01       	movw	r30, r24
    17e8:	20 83       	st	Z, r18

000017ea <.L18>:
    }
    if (rpwm2_active)
    17ea:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <rpwm2_active>

000017ee <.Loc.92>:
    17ee:	88 23       	and	r24, r24
    17f0:	49 f0       	breq	.+18     	; 0x1804 <.L20>

000017f2 <.Loc.93>:
    {
        PORTL |= (1 << RPWM2); // RPWM2 inschakelen
    17f2:	8b e0       	ldi	r24, 0x0B	; 11
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	fc 01       	movw	r30, r24
    17f8:	20 81       	ld	r18, Z
    17fa:	8b e0       	ldi	r24, 0x0B	; 11
    17fc:	91 e0       	ldi	r25, 0x01	; 1

000017fe <.Loc.94>:
    17fe:	20 61       	ori	r18, 0x10	; 16
    1800:	fc 01       	movw	r30, r24
    1802:	20 83       	st	Z, r18

00001804 <.L20>:
    }
}
    1804:	00 00       	nop
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	ff 91       	pop	r31
    180c:	ef 91       	pop	r30
    180e:	9f 91       	pop	r25
    1810:	8f 91       	pop	r24
    1812:	2f 91       	pop	r18
    1814:	0f 90       	pop	r0
    1816:	0b be       	out	0x3b, r0	; 59
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	0f 90       	pop	r0
    181e:	1f 90       	pop	r1
    1820:	18 95       	reti

00001822 <isNoodknopIngedrukt>:
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62

0000182a <.Loc.1>:
    182a:	86 e2       	ldi	r24, 0x26	; 38
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	fc 01       	movw	r30, r24
    1830:	80 81       	ld	r24, Z

00001832 <.Loc.2>:
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	82 70       	andi	r24, 0x02	; 2
    1838:	99 27       	eor	r25, r25

0000183a <.Loc.3>:
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	08 95       	ret

00001840 <initPortaalkraan>:
volatile int opgepakt = 0;

/**
 * Functie om de portaalkraan te initialiseren
 */
void initPortaalkraan(void) {
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62

00001848 <.Loc.1>:
    // Initialiseer motor en interface functies
    init();
    1848:	0e 94 11 0b 	call	0x1622	; 0x1622 <init>

0000184c <.Loc.2>:

    // Zet pin 37 voor de magneet als output
    DDRC |= (1 << Magneet);
    184c:	87 e2       	ldi	r24, 0x27	; 39
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	fc 01       	movw	r30, r24
    1852:	20 81       	ld	r18, Z
    1854:	87 e2       	ldi	r24, 0x27	; 39
    1856:	90 e0       	ldi	r25, 0x00	; 0

00001858 <.Loc.3>:
    1858:	21 60       	ori	r18, 0x01	; 1
    185a:	fc 01       	movw	r30, r24
    185c:	20 83       	st	Z, r18

0000185e <.Loc.4>:
    PORTC &= ~(1 << Magneet);
    185e:	88 e2       	ldi	r24, 0x28	; 40
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	fc 01       	movw	r30, r24
    1864:	20 81       	ld	r18, Z

00001866 <.Loc.5>:
    1866:	88 e2       	ldi	r24, 0x28	; 40
    1868:	90 e0       	ldi	r25, 0x00	; 0

0000186a <.Loc.6>:
    186a:	2e 7f       	andi	r18, 0xFE	; 254
    186c:	fc 01       	movw	r30, r24
    186e:	20 83       	st	Z, r18

00001870 <.Loc.7>:

    // Stel PB0, PB1, PB2 in als ingangen voor de limietschakelaars
    DDRB &= ~(1 << PB0) & ~(1 << PB1) & ~(1 << PB2);
    1870:	84 e2       	ldi	r24, 0x24	; 36
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	fc 01       	movw	r30, r24
    1876:	20 81       	ld	r18, Z

00001878 <.Loc.8>:
    1878:	84 e2       	ldi	r24, 0x24	; 36
    187a:	90 e0       	ldi	r25, 0x00	; 0

0000187c <.Loc.9>:
    187c:	28 7f       	andi	r18, 0xF8	; 248
    187e:	fc 01       	movw	r30, r24
    1880:	20 83       	st	Z, r18

00001882 <.Loc.10>:

    // Activeer pull-up weerstanden op PB0, PB1 en PB2
    PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2);
    1882:	85 e2       	ldi	r24, 0x25	; 37
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	fc 01       	movw	r30, r24
    1888:	20 81       	ld	r18, Z
    188a:	85 e2       	ldi	r24, 0x25	; 37
    188c:	90 e0       	ldi	r25, 0x00	; 0

0000188e <.Loc.11>:
    188e:	27 60       	ori	r18, 0x07	; 7
    1890:	fc 01       	movw	r30, r24
    1892:	20 83       	st	Z, r18

00001894 <.Loc.12>:
}
    1894:	00 00       	nop
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	08 95       	ret

0000189c <nulpuntPortaalkraan>:

/**
 * Functie om het nulpunt van de portaalkraan te bepalen
 */
void nulpuntPortaalkraan(void) {
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	c6 56       	subi	r28, 0x66	; 102
    18a6:	d1 09       	sbc	r29, r1
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61

000018b2 <.Loc.14>:
    motorBeweegOmhoog();
    18b2:	0e 94 45 0b 	call	0x168a	; 0x168a <motorBeweegOmhoog>

000018b6 <.Loc.15>:
    while (!isLimitSwitchPressed(PB3, &PORTB, &PINB)) {
    18b6:	98 c0       	rjmp	.+304    	; 0x19e8 <.L3>

000018b8 <.L12>:
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 e8       	ldi	r26, 0x80	; 128
    18be:	bf e3       	ldi	r27, 0x3F	; 63
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	9a 83       	std	Y+2, r25	; 0x02
    18c4:	ab 83       	std	Y+3, r26	; 0x03
    18c6:	bc 83       	std	Y+4, r27	; 0x04

000018c8 <.LBB48>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	4a e7       	ldi	r20, 0x7A	; 122
    18ce:	55 e4       	ldi	r21, 0x45	; 69
    18d0:	69 81       	ldd	r22, Y+1	; 0x01
    18d2:	7a 81       	ldd	r23, Y+2	; 0x02
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	9c 81       	ldd	r25, Y+4	; 0x04
    18d8:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    18dc:	6f ab       	std	Y+55, r22	; 0x37
    18de:	78 af       	std	Y+56, r23	; 0x38
    18e0:	89 af       	std	Y+57, r24	; 0x39
    18e2:	9a af       	std	Y+58, r25	; 0x3a
    18e4:	8f a9       	ldd	r24, Y+55	; 0x37
    18e6:	98 ad       	ldd	r25, Y+56	; 0x38
    18e8:	a9 ad       	ldd	r26, Y+57	; 0x39
    18ea:	ba ad       	ldd	r27, Y+58	; 0x3a
    18ec:	8d 83       	std	Y+5, r24	; 0x05
    18ee:	9e 83       	std	Y+6, r25	; 0x06
    18f0:	af 83       	std	Y+7, r26	; 0x07
    18f2:	b8 87       	std	Y+8, r27	; 0x08

000018f4 <.Loc.17>:
	if (__tmp < 1.0)
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e8       	ldi	r20, 0x80	; 128
    18fa:	5f e3       	ldi	r21, 0x3F	; 63
    18fc:	6d 81       	ldd	r22, Y+5	; 0x05
    18fe:	7e 81       	ldd	r23, Y+6	; 0x06
    1900:	8f 81       	ldd	r24, Y+7	; 0x07
    1902:	98 85       	ldd	r25, Y+8	; 0x08
    1904:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
    1908:	88 23       	and	r24, r24
    190a:	2c f4       	brge	.+10     	; 0x1916 <.L37>

0000190c <.Loc.18>:
		__ticks = 1;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	9a 87       	std	Y+10, r25	; 0x0a
    1912:	89 87       	std	Y+9, r24	; 0x09
    1914:	5e c0       	rjmp	.+188    	; 0x19d2 <.L6>

00001916 <.L37>:
	else if (__tmp > 65535)
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	3f ef       	ldi	r19, 0xFF	; 255
    191a:	4f e7       	ldi	r20, 0x7F	; 127
    191c:	57 e4       	ldi	r21, 0x47	; 71
    191e:	6d 81       	ldd	r22, Y+5	; 0x05
    1920:	7e 81       	ldd	r23, Y+6	; 0x06
    1922:	8f 81       	ldd	r24, Y+7	; 0x07
    1924:	98 85       	ldd	r25, Y+8	; 0x08
    1926:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
    192a:	88 23       	and	r24, r24
    192c:	09 f0       	breq	.+2      	; 0x1930 <L0^A>

0000192e <L0^A>:
    192e:	0c f4       	brge	.+2      	; 0x1932 <.Loc.20>

00001930 <L0^A>:
    1930:	3e c0       	rjmp	.+124    	; 0x19ae <.L38>

00001932 <.Loc.20>:
		__ticks = (uint16_t) (__ms * 10.0);
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e2       	ldi	r20, 0x20	; 32
    1938:	51 e4       	ldi	r21, 0x41	; 65
    193a:	69 81       	ldd	r22, Y+1	; 0x01
    193c:	7a 81       	ldd	r23, Y+2	; 0x02
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	9c 81       	ldd	r25, Y+4	; 0x04
    1942:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    1946:	6b af       	std	Y+59, r22	; 0x3b
    1948:	7c af       	std	Y+60, r23	; 0x3c
    194a:	8d af       	std	Y+61, r24	; 0x3d
    194c:	9e af       	std	Y+62, r25	; 0x3e
    194e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1950:	9c ad       	ldd	r25, Y+60	; 0x3c
    1952:	ad ad       	ldd	r26, Y+61	; 0x3d
    1954:	be ad       	ldd	r27, Y+62	; 0x3e
    1956:	8b a7       	std	Y+43, r24	; 0x2b
    1958:	9c a7       	std	Y+44, r25	; 0x2c
    195a:	ad a7       	std	Y+45, r26	; 0x2d
    195c:	be a7       	std	Y+46, r27	; 0x2e

0000195e <.Loc.21>:
    195e:	6b a5       	ldd	r22, Y+43	; 0x2b
    1960:	7c a5       	ldd	r23, Y+44	; 0x2c
    1962:	8d a5       	ldd	r24, Y+45	; 0x2d
    1964:	9e a5       	ldd	r25, Y+46	; 0x2e
    1966:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    196a:	23 96       	adiw	r28, 0x03	; 3
    196c:	6c af       	std	Y+60, r22	; 0x3c
    196e:	7d af       	std	Y+61, r23	; 0x3d
    1970:	8e af       	std	Y+62, r24	; 0x3e
    1972:	9f af       	std	Y+63, r25	; 0x3f
    1974:	23 97       	sbiw	r28, 0x03	; 3
    1976:	21 96       	adiw	r28, 0x01	; 1
    1978:	ae ad       	ldd	r26, Y+62	; 0x3e
    197a:	bf ad       	ldd	r27, Y+63	; 0x3f
    197c:	21 97       	sbiw	r28, 0x01	; 1
    197e:	ba 87       	std	Y+10, r27	; 0x0a
    1980:	a9 87       	std	Y+9, r26	; 0x09

00001982 <.Loc.22>:
		while(__ticks)
    1982:	10 c0       	rjmp	.+32     	; 0x19a4 <.L9>

00001984 <.L10>:
    1984:	80 e9       	ldi	r24, 0x90	; 144
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	9c 87       	std	Y+12, r25	; 0x0c
    198a:	8b 87       	std	Y+11, r24	; 0x0b

0000198c <.LBB50>:
    198c:	8b 85       	ldd	r24, Y+11	; 0x0b
    198e:	9c 85       	ldd	r25, Y+12	; 0x0c

00001990 <.L1^B1>:
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <.L1^B1>
    1994:	9c 87       	std	Y+12, r25	; 0x0c
    1996:	8b 87       	std	Y+11, r24	; 0x0b

00001998 <.Loc.24>:
	...

0000199a <.LBE50>:
			__ticks --;
    199a:	89 85       	ldd	r24, Y+9	; 0x09
    199c:	9a 85       	ldd	r25, Y+10	; 0x0a
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	9a 87       	std	Y+10, r25	; 0x0a
    19a2:	89 87       	std	Y+9, r24	; 0x09

000019a4 <.L9>:
		while(__ticks)
    19a4:	89 85       	ldd	r24, Y+9	; 0x09
    19a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	61 f7       	brne	.-40     	; 0x1984 <.L10>

000019ac <.Loc.27>:
		return;
    19ac:	1d c0       	rjmp	.+58     	; 0x19e8 <.L3>

000019ae <.L38>:
		__ticks = (uint16_t)__tmp;
    19ae:	6d 81       	ldd	r22, Y+5	; 0x05
    19b0:	7e 81       	ldd	r23, Y+6	; 0x06
    19b2:	8f 81       	ldd	r24, Y+7	; 0x07
    19b4:	98 85       	ldd	r25, Y+8	; 0x08
    19b6:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    19ba:	27 96       	adiw	r28, 0x07	; 7
    19bc:	6c af       	std	Y+60, r22	; 0x3c
    19be:	7d af       	std	Y+61, r23	; 0x3d
    19c0:	8e af       	std	Y+62, r24	; 0x3e
    19c2:	9f af       	std	Y+63, r25	; 0x3f
    19c4:	27 97       	sbiw	r28, 0x07	; 7
    19c6:	25 96       	adiw	r28, 0x05	; 5
    19c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    19ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    19cc:	25 97       	sbiw	r28, 0x05	; 5
    19ce:	9a 87       	std	Y+10, r25	; 0x0a
    19d0:	89 87       	std	Y+9, r24	; 0x09

000019d2 <.L6>:
    19d2:	89 85       	ldd	r24, Y+9	; 0x09
    19d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d6:	9e 87       	std	Y+14, r25	; 0x0e
    19d8:	8d 87       	std	Y+13, r24	; 0x0d

000019da <.LBB52>:
    19da:	8d 85       	ldd	r24, Y+13	; 0x0d
    19dc:	9e 85       	ldd	r25, Y+14	; 0x0e

000019de <.L1^B2>:
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <.L1^B2>
    19e2:	9e 87       	std	Y+14, r25	; 0x0e
    19e4:	8d 87       	std	Y+13, r24	; 0x0d

000019e6 <.Loc.30>:
	...

000019e8 <.L3>:
    19e8:	43 e2       	ldi	r20, 0x23	; 35
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	65 e2       	ldi	r22, 0x25	; 37
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	83 e0       	ldi	r24, 0x03	; 3
    19f2:	0e 94 30 04 	call	0x860	; 0x860 <isLimitSwitchPressed>

000019f6 <.Loc.32>:
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	09 f4       	brne	.+2      	; 0x19fc <.Loc.33>

000019fa <L0^A>:
    19fa:	5e cf       	rjmp	.-324    	; 0x18b8 <.L12>

000019fc <.Loc.33>:
        _delay_ms(1); // Controleer elke milliseconde
    }
    motorStop();
    19fc:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <motorStop>

00001a00 <.Loc.34>:
    motorBeweegRechts(); // Beweeg de motor naar links richting het nulpunt
    1a00:	0e 94 2b 0b 	call	0x1656	; 0x1656 <motorBeweegRechts>

00001a04 <.Loc.35>:

    // Blijf bewegen totdat de limietschakelaar (PB0) is ingedrukt
    while (!isLimitSwitchPressed(PB1, &PORTB, &PINB)) {
    1a04:	a0 c0       	rjmp	.+320    	; 0x1b46 <.L13>

00001a06 <.L22>:
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	a0 e8       	ldi	r26, 0x80	; 128
    1a0c:	bf e3       	ldi	r27, 0x3F	; 63
    1a0e:	8f 87       	std	Y+15, r24	; 0x0f
    1a10:	98 8b       	std	Y+16, r25	; 0x10
    1a12:	a9 8b       	std	Y+17, r26	; 0x11
    1a14:	ba 8b       	std	Y+18, r27	; 0x12

00001a16 <.LBB54>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	4a e7       	ldi	r20, 0x7A	; 122
    1a1c:	55 e4       	ldi	r21, 0x45	; 69
    1a1e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a20:	78 89       	ldd	r23, Y+16	; 0x10
    1a22:	89 89       	ldd	r24, Y+17	; 0x11
    1a24:	9a 89       	ldd	r25, Y+18	; 0x12
    1a26:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    1a2a:	2b 96       	adiw	r28, 0x0b	; 11
    1a2c:	6c af       	std	Y+60, r22	; 0x3c
    1a2e:	7d af       	std	Y+61, r23	; 0x3d
    1a30:	8e af       	std	Y+62, r24	; 0x3e
    1a32:	9f af       	std	Y+63, r25	; 0x3f
    1a34:	2b 97       	sbiw	r28, 0x0b	; 11
    1a36:	2b 96       	adiw	r28, 0x0b	; 11
    1a38:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a3a:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a3c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a3e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a40:	2b 97       	sbiw	r28, 0x0b	; 11
    1a42:	8b 8b       	std	Y+19, r24	; 0x13
    1a44:	9c 8b       	std	Y+20, r25	; 0x14
    1a46:	ad 8b       	std	Y+21, r26	; 0x15
    1a48:	be 8b       	std	Y+22, r27	; 0x16

00001a4a <.Loc.37>:
	if (__tmp < 1.0)
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e8       	ldi	r20, 0x80	; 128
    1a50:	5f e3       	ldi	r21, 0x3F	; 63
    1a52:	6b 89       	ldd	r22, Y+19	; 0x13
    1a54:	7c 89       	ldd	r23, Y+20	; 0x14
    1a56:	8d 89       	ldd	r24, Y+21	; 0x15
    1a58:	9e 89       	ldd	r25, Y+22	; 0x16
    1a5a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
    1a5e:	88 23       	and	r24, r24
    1a60:	2c f4       	brge	.+10     	; 0x1a6c <.L39>

00001a62 <.Loc.38>:
		__ticks = 1;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	98 8f       	std	Y+24, r25	; 0x18
    1a68:	8f 8b       	std	Y+23, r24	; 0x17
    1a6a:	62 c0       	rjmp	.+196    	; 0x1b30 <.L16>

00001a6c <.L39>:
	else if (__tmp > 65535)
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	3f ef       	ldi	r19, 0xFF	; 255
    1a70:	4f e7       	ldi	r20, 0x7F	; 127
    1a72:	57 e4       	ldi	r21, 0x47	; 71
    1a74:	6b 89       	ldd	r22, Y+19	; 0x13
    1a76:	7c 89       	ldd	r23, Y+20	; 0x14
    1a78:	8d 89       	ldd	r24, Y+21	; 0x15
    1a7a:	9e 89       	ldd	r25, Y+22	; 0x16
    1a7c:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
    1a80:	88 23       	and	r24, r24
    1a82:	09 f0       	breq	.+2      	; 0x1a86 <L0^A>

00001a84 <L0^A>:
    1a84:	0c f4       	brge	.+2      	; 0x1a88 <.Loc.40>

00001a86 <L0^A>:
    1a86:	42 c0       	rjmp	.+132    	; 0x1b0c <.L40>

00001a88 <.Loc.40>:
		__ticks = (uint16_t) (__ms * 10.0);
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a92:	78 89       	ldd	r23, Y+16	; 0x10
    1a94:	89 89       	ldd	r24, Y+17	; 0x11
    1a96:	9a 89       	ldd	r25, Y+18	; 0x12
    1a98:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    1a9c:	2f 96       	adiw	r28, 0x0f	; 15
    1a9e:	6c af       	std	Y+60, r22	; 0x3c
    1aa0:	7d af       	std	Y+61, r23	; 0x3d
    1aa2:	8e af       	std	Y+62, r24	; 0x3e
    1aa4:	9f af       	std	Y+63, r25	; 0x3f
    1aa6:	2f 97       	sbiw	r28, 0x0f	; 15
    1aa8:	2f 96       	adiw	r28, 0x0f	; 15
    1aaa:	8c ad       	ldd	r24, Y+60	; 0x3c
    1aac:	9d ad       	ldd	r25, Y+61	; 0x3d
    1aae:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ab0:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ab2:	2f 97       	sbiw	r28, 0x0f	; 15
    1ab4:	8f a7       	std	Y+47, r24	; 0x2f
    1ab6:	98 ab       	std	Y+48, r25	; 0x30
    1ab8:	a9 ab       	std	Y+49, r26	; 0x31
    1aba:	ba ab       	std	Y+50, r27	; 0x32

00001abc <.Loc.41>:
    1abc:	6f a5       	ldd	r22, Y+47	; 0x2f
    1abe:	78 a9       	ldd	r23, Y+48	; 0x30
    1ac0:	89 a9       	ldd	r24, Y+49	; 0x31
    1ac2:	9a a9       	ldd	r25, Y+50	; 0x32
    1ac4:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    1ac8:	63 96       	adiw	r28, 0x13	; 19
    1aca:	6c af       	std	Y+60, r22	; 0x3c
    1acc:	7d af       	std	Y+61, r23	; 0x3d
    1ace:	8e af       	std	Y+62, r24	; 0x3e
    1ad0:	9f af       	std	Y+63, r25	; 0x3f
    1ad2:	63 97       	sbiw	r28, 0x13	; 19
    1ad4:	61 96       	adiw	r28, 0x11	; 17
    1ad6:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ad8:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ada:	61 97       	sbiw	r28, 0x11	; 17
    1adc:	b8 8f       	std	Y+24, r27	; 0x18
    1ade:	af 8b       	std	Y+23, r26	; 0x17

00001ae0 <.Loc.42>:
		while(__ticks)
    1ae0:	10 c0       	rjmp	.+32     	; 0x1b02 <.L19>

00001ae2 <.L20>:
    1ae2:	80 e9       	ldi	r24, 0x90	; 144
    1ae4:	91 e0       	ldi	r25, 0x01	; 1
    1ae6:	9a 8f       	std	Y+26, r25	; 0x1a
    1ae8:	89 8f       	std	Y+25, r24	; 0x19

00001aea <.LBB56>:
    1aea:	89 8d       	ldd	r24, Y+25	; 0x19
    1aec:	9a 8d       	ldd	r25, Y+26	; 0x1a

00001aee <.L1^B3>:
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <.L1^B3>
    1af2:	9a 8f       	std	Y+26, r25	; 0x1a
    1af4:	89 8f       	std	Y+25, r24	; 0x19

00001af6 <.Loc.44>:
	...

00001af8 <.LBE56>:
			__ticks --;
    1af8:	8f 89       	ldd	r24, Y+23	; 0x17
    1afa:	98 8d       	ldd	r25, Y+24	; 0x18
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	98 8f       	std	Y+24, r25	; 0x18
    1b00:	8f 8b       	std	Y+23, r24	; 0x17

00001b02 <.L19>:
		while(__ticks)
    1b02:	8f 89       	ldd	r24, Y+23	; 0x17
    1b04:	98 8d       	ldd	r25, Y+24	; 0x18
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	61 f7       	brne	.-40     	; 0x1ae2 <.L20>

00001b0a <.Loc.47>:
		return;
    1b0a:	1d c0       	rjmp	.+58     	; 0x1b46 <.L13>

00001b0c <.L40>:
		__ticks = (uint16_t)__tmp;
    1b0c:	6b 89       	ldd	r22, Y+19	; 0x13
    1b0e:	7c 89       	ldd	r23, Y+20	; 0x14
    1b10:	8d 89       	ldd	r24, Y+21	; 0x15
    1b12:	9e 89       	ldd	r25, Y+22	; 0x16
    1b14:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    1b18:	67 96       	adiw	r28, 0x17	; 23
    1b1a:	6c af       	std	Y+60, r22	; 0x3c
    1b1c:	7d af       	std	Y+61, r23	; 0x3d
    1b1e:	8e af       	std	Y+62, r24	; 0x3e
    1b20:	9f af       	std	Y+63, r25	; 0x3f
    1b22:	67 97       	sbiw	r28, 0x17	; 23
    1b24:	65 96       	adiw	r28, 0x15	; 21
    1b26:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b28:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b2a:	65 97       	sbiw	r28, 0x15	; 21
    1b2c:	98 8f       	std	Y+24, r25	; 0x18
    1b2e:	8f 8b       	std	Y+23, r24	; 0x17

00001b30 <.L16>:
    1b30:	8f 89       	ldd	r24, Y+23	; 0x17
    1b32:	98 8d       	ldd	r25, Y+24	; 0x18
    1b34:	9c 8f       	std	Y+28, r25	; 0x1c
    1b36:	8b 8f       	std	Y+27, r24	; 0x1b

00001b38 <.LBB58>:
    1b38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b3a:	9c 8d       	ldd	r25, Y+28	; 0x1c

00001b3c <.L1^B4>:
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <.L1^B4>
    1b40:	9c 8f       	std	Y+28, r25	; 0x1c
    1b42:	8b 8f       	std	Y+27, r24	; 0x1b

00001b44 <.Loc.50>:
	...

00001b46 <.L13>:
    1b46:	43 e2       	ldi	r20, 0x23	; 35
    1b48:	50 e0       	ldi	r21, 0x00	; 0
    1b4a:	65 e2       	ldi	r22, 0x25	; 37
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	0e 94 30 04 	call	0x860	; 0x860 <isLimitSwitchPressed>

00001b54 <.Loc.52>:
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <.Loc.53>

00001b58 <L0^A>:
    1b58:	56 cf       	rjmp	.-340    	; 0x1a06 <.L22>

00001b5a <.Loc.53>:
        _delay_ms(1); // Controleer elke milliseconde
    }

    motorStop(); // Stop de motor zodra het nulpunt is bereikt
    1b5a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <motorStop>

00001b5e <.Loc.54>:
    motorBeweegRechts(); // Beweeg een klein stukje naar rechts
    1b5e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <motorBeweegRechts>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a0 e2       	ldi	r26, 0x20	; 32
    1b68:	b1 e4       	ldi	r27, 0x41	; 65
    1b6a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b6e:	af 8f       	std	Y+31, r26	; 0x1f
    1b70:	b8 a3       	std	Y+32, r27	; 0x20

00001b72 <.LBB60>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	4a e7       	ldi	r20, 0x7A	; 122
    1b78:	55 e4       	ldi	r21, 0x45	; 69
    1b7a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b7c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b80:	98 a1       	ldd	r25, Y+32	; 0x20
    1b82:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    1b86:	6b 96       	adiw	r28, 0x1b	; 27
    1b88:	6c af       	std	Y+60, r22	; 0x3c
    1b8a:	7d af       	std	Y+61, r23	; 0x3d
    1b8c:	8e af       	std	Y+62, r24	; 0x3e
    1b8e:	9f af       	std	Y+63, r25	; 0x3f
    1b90:	6b 97       	sbiw	r28, 0x1b	; 27
    1b92:	6b 96       	adiw	r28, 0x1b	; 27
    1b94:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b96:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b98:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b9a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b9c:	6b 97       	sbiw	r28, 0x1b	; 27
    1b9e:	89 a3       	std	Y+33, r24	; 0x21
    1ba0:	9a a3       	std	Y+34, r25	; 0x22
    1ba2:	ab a3       	std	Y+35, r26	; 0x23
    1ba4:	bc a3       	std	Y+36, r27	; 0x24

00001ba6 <.Loc.56>:
	if (__tmp < 1.0)
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e8       	ldi	r20, 0x80	; 128
    1bac:	5f e3       	ldi	r21, 0x3F	; 63
    1bae:	69 a1       	ldd	r22, Y+33	; 0x21
    1bb0:	7a a1       	ldd	r23, Y+34	; 0x22
    1bb2:	8b a1       	ldd	r24, Y+35	; 0x23
    1bb4:	9c a1       	ldd	r25, Y+36	; 0x24
    1bb6:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
    1bba:	88 23       	and	r24, r24
    1bbc:	2c f4       	brge	.+10     	; 0x1bc8 <.L41>

00001bbe <.Loc.57>:
		__ticks = 1;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9e a3       	std	Y+38, r25	; 0x26
    1bc4:	8d a3       	std	Y+37, r24	; 0x25
    1bc6:	62 c0       	rjmp	.+196    	; 0x1c8c <.L25>

00001bc8 <.L41>:
	else if (__tmp > 65535)
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	3f ef       	ldi	r19, 0xFF	; 255
    1bcc:	4f e7       	ldi	r20, 0x7F	; 127
    1bce:	57 e4       	ldi	r21, 0x47	; 71
    1bd0:	69 a1       	ldd	r22, Y+33	; 0x21
    1bd2:	7a a1       	ldd	r23, Y+34	; 0x22
    1bd4:	8b a1       	ldd	r24, Y+35	; 0x23
    1bd6:	9c a1       	ldd	r25, Y+36	; 0x24
    1bd8:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
    1bdc:	88 23       	and	r24, r24
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <L0^A>

00001be0 <L0^A>:
    1be0:	0c f4       	brge	.+2      	; 0x1be4 <.Loc.59>

00001be2 <L0^A>:
    1be2:	42 c0       	rjmp	.+132    	; 0x1c68 <.L42>

00001be4 <.Loc.59>:
		__ticks = (uint16_t) (__ms * 10.0);
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e2       	ldi	r20, 0x20	; 32
    1bea:	51 e4       	ldi	r21, 0x41	; 65
    1bec:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1bee:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1bf0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bf2:	98 a1       	ldd	r25, Y+32	; 0x20
    1bf4:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    1bf8:	6f 96       	adiw	r28, 0x1f	; 31
    1bfa:	6c af       	std	Y+60, r22	; 0x3c
    1bfc:	7d af       	std	Y+61, r23	; 0x3d
    1bfe:	8e af       	std	Y+62, r24	; 0x3e
    1c00:	9f af       	std	Y+63, r25	; 0x3f
    1c02:	6f 97       	sbiw	r28, 0x1f	; 31
    1c04:	6f 96       	adiw	r28, 0x1f	; 31
    1c06:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c08:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c0a:	ae ad       	ldd	r26, Y+62	; 0x3e
    1c0c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c0e:	6f 97       	sbiw	r28, 0x1f	; 31
    1c10:	8b ab       	std	Y+51, r24	; 0x33
    1c12:	9c ab       	std	Y+52, r25	; 0x34
    1c14:	ad ab       	std	Y+53, r26	; 0x35
    1c16:	be ab       	std	Y+54, r27	; 0x36

00001c18 <.Loc.60>:
    1c18:	6b a9       	ldd	r22, Y+51	; 0x33
    1c1a:	7c a9       	ldd	r23, Y+52	; 0x34
    1c1c:	8d a9       	ldd	r24, Y+53	; 0x35
    1c1e:	9e a9       	ldd	r25, Y+54	; 0x36
    1c20:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    1c24:	a3 96       	adiw	r28, 0x23	; 35
    1c26:	6c af       	std	Y+60, r22	; 0x3c
    1c28:	7d af       	std	Y+61, r23	; 0x3d
    1c2a:	8e af       	std	Y+62, r24	; 0x3e
    1c2c:	9f af       	std	Y+63, r25	; 0x3f
    1c2e:	a3 97       	sbiw	r28, 0x23	; 35
    1c30:	a1 96       	adiw	r28, 0x21	; 33
    1c32:	ae ad       	ldd	r26, Y+62	; 0x3e
    1c34:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c36:	a1 97       	sbiw	r28, 0x21	; 33
    1c38:	be a3       	std	Y+38, r27	; 0x26
    1c3a:	ad a3       	std	Y+37, r26	; 0x25

00001c3c <.Loc.61>:
		while(__ticks)
    1c3c:	10 c0       	rjmp	.+32     	; 0x1c5e <.L28>

00001c3e <.L29>:
    1c3e:	80 e9       	ldi	r24, 0x90	; 144
    1c40:	91 e0       	ldi	r25, 0x01	; 1
    1c42:	98 a7       	std	Y+40, r25	; 0x28
    1c44:	8f a3       	std	Y+39, r24	; 0x27

00001c46 <.LBB62>:
    1c46:	8f a1       	ldd	r24, Y+39	; 0x27
    1c48:	98 a5       	ldd	r25, Y+40	; 0x28

00001c4a <.L1^B5>:
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <.L1^B5>
    1c4e:	98 a7       	std	Y+40, r25	; 0x28
    1c50:	8f a3       	std	Y+39, r24	; 0x27

00001c52 <.Loc.63>:
	...

00001c54 <.LBE62>:
			__ticks --;
    1c54:	8d a1       	ldd	r24, Y+37	; 0x25
    1c56:	9e a1       	ldd	r25, Y+38	; 0x26
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	9e a3       	std	Y+38, r25	; 0x26
    1c5c:	8d a3       	std	Y+37, r24	; 0x25

00001c5e <.L28>:
		while(__ticks)
    1c5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c60:	9e a1       	ldd	r25, Y+38	; 0x26
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	61 f7       	brne	.-40     	; 0x1c3e <.L29>

00001c66 <.Loc.66>:
		return;
    1c66:	1d c0       	rjmp	.+58     	; 0x1ca2 <.L30>

00001c68 <.L42>:
		__ticks = (uint16_t)__tmp;
    1c68:	69 a1       	ldd	r22, Y+33	; 0x21
    1c6a:	7a a1       	ldd	r23, Y+34	; 0x22
    1c6c:	8b a1       	ldd	r24, Y+35	; 0x23
    1c6e:	9c a1       	ldd	r25, Y+36	; 0x24
    1c70:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    1c74:	a7 96       	adiw	r28, 0x27	; 39
    1c76:	6c af       	std	Y+60, r22	; 0x3c
    1c78:	7d af       	std	Y+61, r23	; 0x3d
    1c7a:	8e af       	std	Y+62, r24	; 0x3e
    1c7c:	9f af       	std	Y+63, r25	; 0x3f
    1c7e:	a7 97       	sbiw	r28, 0x27	; 39
    1c80:	a5 96       	adiw	r28, 0x25	; 37
    1c82:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c84:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c86:	a5 97       	sbiw	r28, 0x25	; 37
    1c88:	9e a3       	std	Y+38, r25	; 0x26
    1c8a:	8d a3       	std	Y+37, r24	; 0x25

00001c8c <.L25>:
    1c8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c90:	9a a7       	std	Y+42, r25	; 0x2a
    1c92:	89 a7       	std	Y+41, r24	; 0x29

00001c94 <.LBB64>:
    1c94:	89 a5       	ldd	r24, Y+41	; 0x29
    1c96:	9a a5       	ldd	r25, Y+42	; 0x2a

00001c98 <.L1^B6>:
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <.L1^B6>
    1c9c:	9a a7       	std	Y+42, r25	; 0x2a
    1c9e:	89 a7       	std	Y+41, r24	; 0x29

00001ca0 <.Loc.69>:
	...

00001ca2 <.L30>:
    _delay_ms(10);       // Wacht 10 ms
    motorStop();         // Stop de motor
    1ca2:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <motorStop>

00001ca6 <.Loc.71>:

    distanceCount = 0;   // Reset de afstandsteller
    1ca6:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <distanceCount+0x1>
    1caa:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <distanceCount>

00001cae <.Loc.72>:
}
    1cae:	00 00       	nop
    1cb0:	ca 59       	subi	r28, 0x9A	; 154
    1cb2:	df 4f       	sbci	r29, 0xFF	; 255
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	08 95       	ret

00001cc4 <pakPotplantOp>:

/**
 * Functie om een potplant op te pakken
 */
void pakPotplantOp(void) {
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	c4 54       	subi	r28, 0x44	; 68
    1cce:	d1 09       	sbc	r29, r1
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61

00001cda <.Loc.74>:
    motorBeweegOmlaag();      // Beweeg de motor naar beneden
    1cda:	0e 94 38 0b 	call	0x1670	; 0x1670 <motorBeweegOmlaag>

00001cde <.Loc.75>:
    // Blijf bewegen totdat de onderste limietschakelaar (PB2) is ingedrukt
    while (!isLimitSwitchPressed(PB2, &PORTB, &PINB)) {
    1cde:	8f c0       	rjmp	.+286    	; 0x1dfe <.L44>

00001ce0 <.L53>:
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	a0 e8       	ldi	r26, 0x80	; 128
    1ce6:	bf e3       	ldi	r27, 0x3F	; 63
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	9a 83       	std	Y+2, r25	; 0x02
    1cec:	ab 83       	std	Y+3, r26	; 0x03
    1cee:	bc 83       	std	Y+4, r27	; 0x04

00001cf0 <.LBB66>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a e7       	ldi	r20, 0x7A	; 122
    1cf6:	55 e4       	ldi	r21, 0x45	; 69
    1cf8:	69 81       	ldd	r22, Y+1	; 0x01
    1cfa:	7a 81       	ldd	r23, Y+2	; 0x02
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    1d04:	6d a3       	std	Y+37, r22	; 0x25
    1d06:	7e a3       	std	Y+38, r23	; 0x26
    1d08:	8f a3       	std	Y+39, r24	; 0x27
    1d0a:	98 a7       	std	Y+40, r25	; 0x28
    1d0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d10:	af a1       	ldd	r26, Y+39	; 0x27
    1d12:	b8 a5       	ldd	r27, Y+40	; 0x28
    1d14:	8d 83       	std	Y+5, r24	; 0x05
    1d16:	9e 83       	std	Y+6, r25	; 0x06
    1d18:	af 83       	std	Y+7, r26	; 0x07
    1d1a:	b8 87       	std	Y+8, r27	; 0x08

00001d1c <.Loc.77>:
	if (__tmp < 1.0)
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e8       	ldi	r20, 0x80	; 128
    1d22:	5f e3       	ldi	r21, 0x3F	; 63
    1d24:	6d 81       	ldd	r22, Y+5	; 0x05
    1d26:	7e 81       	ldd	r23, Y+6	; 0x06
    1d28:	8f 81       	ldd	r24, Y+7	; 0x07
    1d2a:	98 85       	ldd	r25, Y+8	; 0x08
    1d2c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
    1d30:	88 23       	and	r24, r24
    1d32:	2c f4       	brge	.+10     	; 0x1d3e <.L68>

00001d34 <.Loc.78>:
		__ticks = 1;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9a 87       	std	Y+10, r25	; 0x0a
    1d3a:	89 87       	std	Y+9, r24	; 0x09
    1d3c:	55 c0       	rjmp	.+170    	; 0x1de8 <.L47>

00001d3e <.L68>:
	else if (__tmp > 65535)
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	3f ef       	ldi	r19, 0xFF	; 255
    1d42:	4f e7       	ldi	r20, 0x7F	; 127
    1d44:	57 e4       	ldi	r21, 0x47	; 71
    1d46:	6d 81       	ldd	r22, Y+5	; 0x05
    1d48:	7e 81       	ldd	r23, Y+6	; 0x06
    1d4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d4c:	98 85       	ldd	r25, Y+8	; 0x08
    1d4e:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
    1d52:	88 23       	and	r24, r24
    1d54:	d9 f1       	breq	.+118    	; 0x1dcc <.L69>
    1d56:	d4 f1       	brlt	.+116    	; 0x1dcc <.L69>

00001d58 <.Loc.80>:
		__ticks = (uint16_t) (__ms * 10.0);
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e2       	ldi	r20, 0x20	; 32
    1d5e:	51 e4       	ldi	r21, 0x41	; 65
    1d60:	69 81       	ldd	r22, Y+1	; 0x01
    1d62:	7a 81       	ldd	r23, Y+2	; 0x02
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    1d6c:	69 a7       	std	Y+41, r22	; 0x29
    1d6e:	7a a7       	std	Y+42, r23	; 0x2a
    1d70:	8b a7       	std	Y+43, r24	; 0x2b
    1d72:	9c a7       	std	Y+44, r25	; 0x2c
    1d74:	89 a5       	ldd	r24, Y+41	; 0x29
    1d76:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d78:	ab a5       	ldd	r26, Y+43	; 0x2b
    1d7a:	bc a5       	ldd	r27, Y+44	; 0x2c
    1d7c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d80:	af 8f       	std	Y+31, r26	; 0x1f
    1d82:	b8 a3       	std	Y+32, r27	; 0x20

00001d84 <.Loc.81>:
    1d84:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d86:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1d88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d8a:	98 a1       	ldd	r25, Y+32	; 0x20
    1d8c:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    1d90:	6d a7       	std	Y+45, r22	; 0x2d
    1d92:	7e a7       	std	Y+46, r23	; 0x2e
    1d94:	8f a7       	std	Y+47, r24	; 0x2f
    1d96:	98 ab       	std	Y+48, r25	; 0x30
    1d98:	ad a5       	ldd	r26, Y+45	; 0x2d
    1d9a:	be a5       	ldd	r27, Y+46	; 0x2e
    1d9c:	ba 87       	std	Y+10, r27	; 0x0a
    1d9e:	a9 87       	std	Y+9, r26	; 0x09

00001da0 <.Loc.82>:
		while(__ticks)
    1da0:	10 c0       	rjmp	.+32     	; 0x1dc2 <.L50>

00001da2 <.L51>:
    1da2:	80 e9       	ldi	r24, 0x90	; 144
    1da4:	91 e0       	ldi	r25, 0x01	; 1
    1da6:	9c 87       	std	Y+12, r25	; 0x0c
    1da8:	8b 87       	std	Y+11, r24	; 0x0b

00001daa <.LBB68>:
    1daa:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dac:	9c 85       	ldd	r25, Y+12	; 0x0c

00001dae <.L1^B7>:
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <.L1^B7>
    1db2:	9c 87       	std	Y+12, r25	; 0x0c
    1db4:	8b 87       	std	Y+11, r24	; 0x0b

00001db6 <.Loc.84>:
	...

00001db8 <.LBE68>:
			__ticks --;
    1db8:	89 85       	ldd	r24, Y+9	; 0x09
    1dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	9a 87       	std	Y+10, r25	; 0x0a
    1dc0:	89 87       	std	Y+9, r24	; 0x09

00001dc2 <.L50>:
		while(__ticks)
    1dc2:	89 85       	ldd	r24, Y+9	; 0x09
    1dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	61 f7       	brne	.-40     	; 0x1da2 <.L51>

00001dca <.Loc.87>:
		return;
    1dca:	19 c0       	rjmp	.+50     	; 0x1dfe <.L44>

00001dcc <.L69>:
		__ticks = (uint16_t)__tmp;
    1dcc:	6d 81       	ldd	r22, Y+5	; 0x05
    1dce:	7e 81       	ldd	r23, Y+6	; 0x06
    1dd0:	8f 81       	ldd	r24, Y+7	; 0x07
    1dd2:	98 85       	ldd	r25, Y+8	; 0x08
    1dd4:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    1dd8:	69 ab       	std	Y+49, r22	; 0x31
    1dda:	7a ab       	std	Y+50, r23	; 0x32
    1ddc:	8b ab       	std	Y+51, r24	; 0x33
    1dde:	9c ab       	std	Y+52, r25	; 0x34
    1de0:	89 a9       	ldd	r24, Y+49	; 0x31
    1de2:	9a a9       	ldd	r25, Y+50	; 0x32
    1de4:	9a 87       	std	Y+10, r25	; 0x0a
    1de6:	89 87       	std	Y+9, r24	; 0x09

00001de8 <.L47>:
    1de8:	89 85       	ldd	r24, Y+9	; 0x09
    1dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dec:	9e 87       	std	Y+14, r25	; 0x0e
    1dee:	8d 87       	std	Y+13, r24	; 0x0d

00001df0 <.LBB70>:
    1df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df2:	9e 85       	ldd	r25, Y+14	; 0x0e

00001df4 <.L1^B8>:
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <.L1^B8>
    1df8:	9e 87       	std	Y+14, r25	; 0x0e
    1dfa:	8d 87       	std	Y+13, r24	; 0x0d

00001dfc <.Loc.90>:
	...

00001dfe <.L44>:
    1dfe:	43 e2       	ldi	r20, 0x23	; 35
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	65 e2       	ldi	r22, 0x25	; 37
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	0e 94 30 04 	call	0x860	; 0x860 <isLimitSwitchPressed>

00001e0c <.Loc.92>:
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <.Loc.93>

00001e10 <L0^A>:
    1e10:	67 cf       	rjmp	.-306    	; 0x1ce0 <.L53>

00001e12 <.Loc.93>:
        _delay_ms(1); // Controleer elke milliseconde
    }
    motorStop();
    1e12:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <motorStop>

00001e16 <.Loc.94>:
    portaalkraanMagneetAan();
    1e16:	0e 94 30 11 	call	0x2260	; 0x2260 <portaalkraanMagneetAan>

00001e1a <.Loc.95>:
    motorBeweegOmhoog();
    1e1a:	0e 94 45 0b 	call	0x168a	; 0x168a <motorBeweegOmhoog>

00001e1e <.Loc.96>:
    while (!isLimitSwitchPressed(PB3, &PORTB, &PINB)) {
    1e1e:	96 c0       	rjmp	.+300    	; 0x1f4c <.L54>

00001e20 <.L63>:
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	a0 e8       	ldi	r26, 0x80	; 128
    1e26:	bf e3       	ldi	r27, 0x3F	; 63
    1e28:	8f 87       	std	Y+15, r24	; 0x0f
    1e2a:	98 8b       	std	Y+16, r25	; 0x10
    1e2c:	a9 8b       	std	Y+17, r26	; 0x11
    1e2e:	ba 8b       	std	Y+18, r27	; 0x12

00001e30 <.LBB72>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4a e7       	ldi	r20, 0x7A	; 122
    1e36:	55 e4       	ldi	r21, 0x45	; 69
    1e38:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e3a:	78 89       	ldd	r23, Y+16	; 0x10
    1e3c:	89 89       	ldd	r24, Y+17	; 0x11
    1e3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e40:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    1e44:	6d ab       	std	Y+53, r22	; 0x35
    1e46:	7e ab       	std	Y+54, r23	; 0x36
    1e48:	8f ab       	std	Y+55, r24	; 0x37
    1e4a:	98 af       	std	Y+56, r25	; 0x38
    1e4c:	8d a9       	ldd	r24, Y+53	; 0x35
    1e4e:	9e a9       	ldd	r25, Y+54	; 0x36
    1e50:	af a9       	ldd	r26, Y+55	; 0x37
    1e52:	b8 ad       	ldd	r27, Y+56	; 0x38
    1e54:	8b 8b       	std	Y+19, r24	; 0x13
    1e56:	9c 8b       	std	Y+20, r25	; 0x14
    1e58:	ad 8b       	std	Y+21, r26	; 0x15
    1e5a:	be 8b       	std	Y+22, r27	; 0x16

00001e5c <.Loc.98>:
	if (__tmp < 1.0)
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e8       	ldi	r20, 0x80	; 128
    1e62:	5f e3       	ldi	r21, 0x3F	; 63
    1e64:	6b 89       	ldd	r22, Y+19	; 0x13
    1e66:	7c 89       	ldd	r23, Y+20	; 0x14
    1e68:	8d 89       	ldd	r24, Y+21	; 0x15
    1e6a:	9e 89       	ldd	r25, Y+22	; 0x16
    1e6c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <.L70>

00001e74 <.Loc.99>:
		__ticks = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	98 8f       	std	Y+24, r25	; 0x18
    1e7a:	8f 8b       	std	Y+23, r24	; 0x17
    1e7c:	5c c0       	rjmp	.+184    	; 0x1f36 <.L57>

00001e7e <.L70>:
	else if (__tmp > 65535)
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	3f ef       	ldi	r19, 0xFF	; 255
    1e82:	4f e7       	ldi	r20, 0x7F	; 127
    1e84:	57 e4       	ldi	r21, 0x47	; 71
    1e86:	6b 89       	ldd	r22, Y+19	; 0x13
    1e88:	7c 89       	ldd	r23, Y+20	; 0x14
    1e8a:	8d 89       	ldd	r24, Y+21	; 0x15
    1e8c:	9e 89       	ldd	r25, Y+22	; 0x16
    1e8e:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
    1e92:	88 23       	and	r24, r24
    1e94:	09 f0       	breq	.+2      	; 0x1e98 <L0^A>

00001e96 <L0^A>:
    1e96:	0c f4       	brge	.+2      	; 0x1e9a <.Loc.101>

00001e98 <L0^A>:
    1e98:	3c c0       	rjmp	.+120    	; 0x1f12 <.L71>

00001e9a <.Loc.101>:
		__ticks = (uint16_t) (__ms * 10.0);
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ea4:	78 89       	ldd	r23, Y+16	; 0x10
    1ea6:	89 89       	ldd	r24, Y+17	; 0x11
    1ea8:	9a 89       	ldd	r25, Y+18	; 0x12
    1eaa:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    1eae:	69 af       	std	Y+57, r22	; 0x39
    1eb0:	7a af       	std	Y+58, r23	; 0x3a
    1eb2:	8b af       	std	Y+59, r24	; 0x3b
    1eb4:	9c af       	std	Y+60, r25	; 0x3c
    1eb6:	89 ad       	ldd	r24, Y+57	; 0x39
    1eb8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1eba:	ab ad       	ldd	r26, Y+59	; 0x3b
    1ebc:	bc ad       	ldd	r27, Y+60	; 0x3c
    1ebe:	89 a3       	std	Y+33, r24	; 0x21
    1ec0:	9a a3       	std	Y+34, r25	; 0x22
    1ec2:	ab a3       	std	Y+35, r26	; 0x23
    1ec4:	bc a3       	std	Y+36, r27	; 0x24

00001ec6 <.Loc.102>:
    1ec6:	69 a1       	ldd	r22, Y+33	; 0x21
    1ec8:	7a a1       	ldd	r23, Y+34	; 0x22
    1eca:	8b a1       	ldd	r24, Y+35	; 0x23
    1ecc:	9c a1       	ldd	r25, Y+36	; 0x24
    1ece:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    1ed2:	21 96       	adiw	r28, 0x01	; 1
    1ed4:	6c af       	std	Y+60, r22	; 0x3c
    1ed6:	7d af       	std	Y+61, r23	; 0x3d
    1ed8:	8e af       	std	Y+62, r24	; 0x3e
    1eda:	9f af       	std	Y+63, r25	; 0x3f
    1edc:	21 97       	sbiw	r28, 0x01	; 1
    1ede:	ad ad       	ldd	r26, Y+61	; 0x3d
    1ee0:	be ad       	ldd	r27, Y+62	; 0x3e
    1ee2:	b8 8f       	std	Y+24, r27	; 0x18
    1ee4:	af 8b       	std	Y+23, r26	; 0x17

00001ee6 <.Loc.103>:
		while(__ticks)
    1ee6:	10 c0       	rjmp	.+32     	; 0x1f08 <.L60>

00001ee8 <.L61>:
    1ee8:	80 e9       	ldi	r24, 0x90	; 144
    1eea:	91 e0       	ldi	r25, 0x01	; 1
    1eec:	9a 8f       	std	Y+26, r25	; 0x1a
    1eee:	89 8f       	std	Y+25, r24	; 0x19

00001ef0 <.LBB74>:
    1ef0:	89 8d       	ldd	r24, Y+25	; 0x19
    1ef2:	9a 8d       	ldd	r25, Y+26	; 0x1a

00001ef4 <.L1^B9>:
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <.L1^B9>
    1ef8:	9a 8f       	std	Y+26, r25	; 0x1a
    1efa:	89 8f       	std	Y+25, r24	; 0x19

00001efc <.Loc.105>:
	...

00001efe <.LBE74>:
			__ticks --;
    1efe:	8f 89       	ldd	r24, Y+23	; 0x17
    1f00:	98 8d       	ldd	r25, Y+24	; 0x18
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	98 8f       	std	Y+24, r25	; 0x18
    1f06:	8f 8b       	std	Y+23, r24	; 0x17

00001f08 <.L60>:
		while(__ticks)
    1f08:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	61 f7       	brne	.-40     	; 0x1ee8 <.L61>

00001f10 <.Loc.108>:
		return;
    1f10:	1d c0       	rjmp	.+58     	; 0x1f4c <.L54>

00001f12 <.L71>:
		__ticks = (uint16_t)__tmp;
    1f12:	6b 89       	ldd	r22, Y+19	; 0x13
    1f14:	7c 89       	ldd	r23, Y+20	; 0x14
    1f16:	8d 89       	ldd	r24, Y+21	; 0x15
    1f18:	9e 89       	ldd	r25, Y+22	; 0x16
    1f1a:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    1f1e:	25 96       	adiw	r28, 0x05	; 5
    1f20:	6c af       	std	Y+60, r22	; 0x3c
    1f22:	7d af       	std	Y+61, r23	; 0x3d
    1f24:	8e af       	std	Y+62, r24	; 0x3e
    1f26:	9f af       	std	Y+63, r25	; 0x3f
    1f28:	25 97       	sbiw	r28, 0x05	; 5
    1f2a:	23 96       	adiw	r28, 0x03	; 3
    1f2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f30:	23 97       	sbiw	r28, 0x03	; 3
    1f32:	98 8f       	std	Y+24, r25	; 0x18
    1f34:	8f 8b       	std	Y+23, r24	; 0x17

00001f36 <.L57>:
    1f36:	8f 89       	ldd	r24, Y+23	; 0x17
    1f38:	98 8d       	ldd	r25, Y+24	; 0x18
    1f3a:	9c 8f       	std	Y+28, r25	; 0x1c
    1f3c:	8b 8f       	std	Y+27, r24	; 0x1b

00001f3e <.LBB76>:
    1f3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f40:	9c 8d       	ldd	r25, Y+28	; 0x1c

00001f42 <.L1^B10>:
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <.L1^B10>
    1f46:	9c 8f       	std	Y+28, r25	; 0x1c
    1f48:	8b 8f       	std	Y+27, r24	; 0x1b

00001f4a <.Loc.111>:
	...

00001f4c <.L54>:
    1f4c:	43 e2       	ldi	r20, 0x23	; 35
    1f4e:	50 e0       	ldi	r21, 0x00	; 0
    1f50:	65 e2       	ldi	r22, 0x25	; 37
    1f52:	70 e0       	ldi	r23, 0x00	; 0
    1f54:	83 e0       	ldi	r24, 0x03	; 3
    1f56:	0e 94 30 04 	call	0x860	; 0x860 <isLimitSwitchPressed>

00001f5a <.Loc.113>:
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <.Loc.114>

00001f5e <L0^A>:
    1f5e:	60 cf       	rjmp	.-320    	; 0x1e20 <.L63>

00001f60 <.Loc.114>:
        _delay_ms(1); // Controleer elke milliseconde
    }
    motorStop();
    1f60:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <motorStop>

00001f64 <.Loc.115>:
    opgepakt = 1;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <opgepakt+0x1>
    1f6c:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <opgepakt>

00001f70 <.Loc.116>:
}
    1f70:	00 00       	nop
    1f72:	cc 5b       	subi	r28, 0xBC	; 188
    1f74:	df 4f       	sbci	r29, 0xFF	; 255
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	08 95       	ret

00001f86 <zetPotplantNeer>:

void zetPotplantNeer(void) {
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	c4 54       	subi	r28, 0x44	; 68
    1f90:	d1 09       	sbc	r29, r1
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61

00001f9c <.Loc.118>:
    motorBeweegOmlaag();      // Beweeg de motor naar beneden
    1f9c:	0e 94 38 0b 	call	0x1670	; 0x1670 <motorBeweegOmlaag>

00001fa0 <.Loc.119>:
    // Blijf bewegen totdat de onderste limietschakelaar (PB2) is ingedrukt
    while (!isLimitSwitchPressed(PB2, &PORTB, &PINB)) {
    1fa0:	8f c0       	rjmp	.+286    	; 0x20c0 <.L73>

00001fa2 <.L82>:
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	a0 e8       	ldi	r26, 0x80	; 128
    1fa8:	bf e3       	ldi	r27, 0x3F	; 63
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	9a 83       	std	Y+2, r25	; 0x02
    1fae:	ab 83       	std	Y+3, r26	; 0x03
    1fb0:	bc 83       	std	Y+4, r27	; 0x04

00001fb2 <.LBB78>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	4a e7       	ldi	r20, 0x7A	; 122
    1fb8:	55 e4       	ldi	r21, 0x45	; 69
    1fba:	69 81       	ldd	r22, Y+1	; 0x01
    1fbc:	7a 81       	ldd	r23, Y+2	; 0x02
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    1fc6:	6d a3       	std	Y+37, r22	; 0x25
    1fc8:	7e a3       	std	Y+38, r23	; 0x26
    1fca:	8f a3       	std	Y+39, r24	; 0x27
    1fcc:	98 a7       	std	Y+40, r25	; 0x28
    1fce:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd2:	af a1       	ldd	r26, Y+39	; 0x27
    1fd4:	b8 a5       	ldd	r27, Y+40	; 0x28
    1fd6:	8d 83       	std	Y+5, r24	; 0x05
    1fd8:	9e 83       	std	Y+6, r25	; 0x06
    1fda:	af 83       	std	Y+7, r26	; 0x07
    1fdc:	b8 87       	std	Y+8, r27	; 0x08

00001fde <.Loc.121>:
	if (__tmp < 1.0)
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e8       	ldi	r20, 0x80	; 128
    1fe4:	5f e3       	ldi	r21, 0x3F	; 63
    1fe6:	6d 81       	ldd	r22, Y+5	; 0x05
    1fe8:	7e 81       	ldd	r23, Y+6	; 0x06
    1fea:	8f 81       	ldd	r24, Y+7	; 0x07
    1fec:	98 85       	ldd	r25, Y+8	; 0x08
    1fee:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	2c f4       	brge	.+10     	; 0x2000 <.L97>

00001ff6 <.Loc.122>:
		__ticks = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	9a 87       	std	Y+10, r25	; 0x0a
    1ffc:	89 87       	std	Y+9, r24	; 0x09
    1ffe:	55 c0       	rjmp	.+170    	; 0x20aa <.L76>

00002000 <.L97>:
	else if (__tmp > 65535)
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	3f ef       	ldi	r19, 0xFF	; 255
    2004:	4f e7       	ldi	r20, 0x7F	; 127
    2006:	57 e4       	ldi	r21, 0x47	; 71
    2008:	6d 81       	ldd	r22, Y+5	; 0x05
    200a:	7e 81       	ldd	r23, Y+6	; 0x06
    200c:	8f 81       	ldd	r24, Y+7	; 0x07
    200e:	98 85       	ldd	r25, Y+8	; 0x08
    2010:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
    2014:	88 23       	and	r24, r24
    2016:	d9 f1       	breq	.+118    	; 0x208e <.L98>
    2018:	d4 f1       	brlt	.+116    	; 0x208e <.L98>

0000201a <.Loc.124>:
		__ticks = (uint16_t) (__ms * 10.0);
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e2       	ldi	r20, 0x20	; 32
    2020:	51 e4       	ldi	r21, 0x41	; 65
    2022:	69 81       	ldd	r22, Y+1	; 0x01
    2024:	7a 81       	ldd	r23, Y+2	; 0x02
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	9c 81       	ldd	r25, Y+4	; 0x04
    202a:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    202e:	69 a7       	std	Y+41, r22	; 0x29
    2030:	7a a7       	std	Y+42, r23	; 0x2a
    2032:	8b a7       	std	Y+43, r24	; 0x2b
    2034:	9c a7       	std	Y+44, r25	; 0x2c
    2036:	89 a5       	ldd	r24, Y+41	; 0x29
    2038:	9a a5       	ldd	r25, Y+42	; 0x2a
    203a:	ab a5       	ldd	r26, Y+43	; 0x2b
    203c:	bc a5       	ldd	r27, Y+44	; 0x2c
    203e:	8d 8f       	std	Y+29, r24	; 0x1d
    2040:	9e 8f       	std	Y+30, r25	; 0x1e
    2042:	af 8f       	std	Y+31, r26	; 0x1f
    2044:	b8 a3       	std	Y+32, r27	; 0x20

00002046 <.Loc.125>:
    2046:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2048:	7e 8d       	ldd	r23, Y+30	; 0x1e
    204a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    204c:	98 a1       	ldd	r25, Y+32	; 0x20
    204e:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    2052:	6d a7       	std	Y+45, r22	; 0x2d
    2054:	7e a7       	std	Y+46, r23	; 0x2e
    2056:	8f a7       	std	Y+47, r24	; 0x2f
    2058:	98 ab       	std	Y+48, r25	; 0x30
    205a:	ad a5       	ldd	r26, Y+45	; 0x2d
    205c:	be a5       	ldd	r27, Y+46	; 0x2e
    205e:	ba 87       	std	Y+10, r27	; 0x0a
    2060:	a9 87       	std	Y+9, r26	; 0x09

00002062 <.Loc.126>:
		while(__ticks)
    2062:	10 c0       	rjmp	.+32     	; 0x2084 <.L79>

00002064 <.L80>:
    2064:	80 e9       	ldi	r24, 0x90	; 144
    2066:	91 e0       	ldi	r25, 0x01	; 1
    2068:	9c 87       	std	Y+12, r25	; 0x0c
    206a:	8b 87       	std	Y+11, r24	; 0x0b

0000206c <.LBB80>:
    206c:	8b 85       	ldd	r24, Y+11	; 0x0b
    206e:	9c 85       	ldd	r25, Y+12	; 0x0c

00002070 <.L1^B11>:
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <.L1^B11>
    2074:	9c 87       	std	Y+12, r25	; 0x0c
    2076:	8b 87       	std	Y+11, r24	; 0x0b

00002078 <.Loc.128>:
	...

0000207a <.LBE80>:
			__ticks --;
    207a:	89 85       	ldd	r24, Y+9	; 0x09
    207c:	9a 85       	ldd	r25, Y+10	; 0x0a
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	9a 87       	std	Y+10, r25	; 0x0a
    2082:	89 87       	std	Y+9, r24	; 0x09

00002084 <.L79>:
		while(__ticks)
    2084:	89 85       	ldd	r24, Y+9	; 0x09
    2086:	9a 85       	ldd	r25, Y+10	; 0x0a
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	61 f7       	brne	.-40     	; 0x2064 <.L80>

0000208c <.Loc.131>:
		return;
    208c:	19 c0       	rjmp	.+50     	; 0x20c0 <.L73>

0000208e <.L98>:
		__ticks = (uint16_t)__tmp;
    208e:	6d 81       	ldd	r22, Y+5	; 0x05
    2090:	7e 81       	ldd	r23, Y+6	; 0x06
    2092:	8f 81       	ldd	r24, Y+7	; 0x07
    2094:	98 85       	ldd	r25, Y+8	; 0x08
    2096:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    209a:	69 ab       	std	Y+49, r22	; 0x31
    209c:	7a ab       	std	Y+50, r23	; 0x32
    209e:	8b ab       	std	Y+51, r24	; 0x33
    20a0:	9c ab       	std	Y+52, r25	; 0x34
    20a2:	89 a9       	ldd	r24, Y+49	; 0x31
    20a4:	9a a9       	ldd	r25, Y+50	; 0x32
    20a6:	9a 87       	std	Y+10, r25	; 0x0a
    20a8:	89 87       	std	Y+9, r24	; 0x09

000020aa <.L76>:
    20aa:	89 85       	ldd	r24, Y+9	; 0x09
    20ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ae:	9e 87       	std	Y+14, r25	; 0x0e
    20b0:	8d 87       	std	Y+13, r24	; 0x0d

000020b2 <.LBB82>:
    20b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b4:	9e 85       	ldd	r25, Y+14	; 0x0e

000020b6 <.L1^B12>:
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <.L1^B12>
    20ba:	9e 87       	std	Y+14, r25	; 0x0e
    20bc:	8d 87       	std	Y+13, r24	; 0x0d

000020be <.Loc.134>:
	...

000020c0 <.L73>:
    20c0:	43 e2       	ldi	r20, 0x23	; 35
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	65 e2       	ldi	r22, 0x25	; 37
    20c6:	70 e0       	ldi	r23, 0x00	; 0
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	0e 94 30 04 	call	0x860	; 0x860 <isLimitSwitchPressed>

000020ce <.Loc.136>:
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <.Loc.137>

000020d2 <L0^A>:
    20d2:	67 cf       	rjmp	.-306    	; 0x1fa2 <.L82>

000020d4 <.Loc.137>:
        _delay_ms(1); // Controleer elke milliseconde
    }
    motorStop();
    20d4:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <motorStop>

000020d8 <.Loc.138>:
    portaalkraanMagneetUit();
    20d8:	0e 94 41 11 	call	0x2282	; 0x2282 <portaalkraanMagneetUit>

000020dc <.Loc.139>:
    motorBeweegOmhoog();
    20dc:	0e 94 45 0b 	call	0x168a	; 0x168a <motorBeweegOmhoog>

000020e0 <.Loc.140>:
    while (!isLimitSwitchPressed(PB3, &PORTB, &PINB)) {
    20e0:	96 c0       	rjmp	.+300    	; 0x220e <.L83>

000020e2 <.L92>:
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a0 e8       	ldi	r26, 0x80	; 128
    20e8:	bf e3       	ldi	r27, 0x3F	; 63
    20ea:	8f 87       	std	Y+15, r24	; 0x0f
    20ec:	98 8b       	std	Y+16, r25	; 0x10
    20ee:	a9 8b       	std	Y+17, r26	; 0x11
    20f0:	ba 8b       	std	Y+18, r27	; 0x12

000020f2 <.LBB84>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	4a e7       	ldi	r20, 0x7A	; 122
    20f8:	55 e4       	ldi	r21, 0x45	; 69
    20fa:	6f 85       	ldd	r22, Y+15	; 0x0f
    20fc:	78 89       	ldd	r23, Y+16	; 0x10
    20fe:	89 89       	ldd	r24, Y+17	; 0x11
    2100:	9a 89       	ldd	r25, Y+18	; 0x12
    2102:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    2106:	6d ab       	std	Y+53, r22	; 0x35
    2108:	7e ab       	std	Y+54, r23	; 0x36
    210a:	8f ab       	std	Y+55, r24	; 0x37
    210c:	98 af       	std	Y+56, r25	; 0x38
    210e:	8d a9       	ldd	r24, Y+53	; 0x35
    2110:	9e a9       	ldd	r25, Y+54	; 0x36
    2112:	af a9       	ldd	r26, Y+55	; 0x37
    2114:	b8 ad       	ldd	r27, Y+56	; 0x38
    2116:	8b 8b       	std	Y+19, r24	; 0x13
    2118:	9c 8b       	std	Y+20, r25	; 0x14
    211a:	ad 8b       	std	Y+21, r26	; 0x15
    211c:	be 8b       	std	Y+22, r27	; 0x16

0000211e <.Loc.142>:
	if (__tmp < 1.0)
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e8       	ldi	r20, 0x80	; 128
    2124:	5f e3       	ldi	r21, 0x3F	; 63
    2126:	6b 89       	ldd	r22, Y+19	; 0x13
    2128:	7c 89       	ldd	r23, Y+20	; 0x14
    212a:	8d 89       	ldd	r24, Y+21	; 0x15
    212c:	9e 89       	ldd	r25, Y+22	; 0x16
    212e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__cmpsf2>
    2132:	88 23       	and	r24, r24
    2134:	2c f4       	brge	.+10     	; 0x2140 <.L99>

00002136 <.Loc.143>:
		__ticks = 1;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	98 8f       	std	Y+24, r25	; 0x18
    213c:	8f 8b       	std	Y+23, r24	; 0x17
    213e:	5c c0       	rjmp	.+184    	; 0x21f8 <.L86>

00002140 <.L99>:
	else if (__tmp > 65535)
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	3f ef       	ldi	r19, 0xFF	; 255
    2144:	4f e7       	ldi	r20, 0x7F	; 127
    2146:	57 e4       	ldi	r21, 0x47	; 71
    2148:	6b 89       	ldd	r22, Y+19	; 0x13
    214a:	7c 89       	ldd	r23, Y+20	; 0x14
    214c:	8d 89       	ldd	r24, Y+21	; 0x15
    214e:	9e 89       	ldd	r25, Y+22	; 0x16
    2150:	0e 94 1f 12 	call	0x243e	; 0x243e <__gesf2>
    2154:	88 23       	and	r24, r24
    2156:	09 f0       	breq	.+2      	; 0x215a <L0^A>

00002158 <L0^A>:
    2158:	0c f4       	brge	.+2      	; 0x215c <.Loc.145>

0000215a <L0^A>:
    215a:	3c c0       	rjmp	.+120    	; 0x21d4 <.L100>

0000215c <.Loc.145>:
		__ticks = (uint16_t) (__ms * 10.0);
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e2       	ldi	r20, 0x20	; 32
    2162:	51 e4       	ldi	r21, 0x41	; 65
    2164:	6f 85       	ldd	r22, Y+15	; 0x0f
    2166:	78 89       	ldd	r23, Y+16	; 0x10
    2168:	89 89       	ldd	r24, Y+17	; 0x11
    216a:	9a 89       	ldd	r25, Y+18	; 0x12
    216c:	0e 94 24 12 	call	0x2448	; 0x2448 <__mulsf3>
    2170:	69 af       	std	Y+57, r22	; 0x39
    2172:	7a af       	std	Y+58, r23	; 0x3a
    2174:	8b af       	std	Y+59, r24	; 0x3b
    2176:	9c af       	std	Y+60, r25	; 0x3c
    2178:	89 ad       	ldd	r24, Y+57	; 0x39
    217a:	9a ad       	ldd	r25, Y+58	; 0x3a
    217c:	ab ad       	ldd	r26, Y+59	; 0x3b
    217e:	bc ad       	ldd	r27, Y+60	; 0x3c
    2180:	89 a3       	std	Y+33, r24	; 0x21
    2182:	9a a3       	std	Y+34, r25	; 0x22
    2184:	ab a3       	std	Y+35, r26	; 0x23
    2186:	bc a3       	std	Y+36, r27	; 0x24

00002188 <.Loc.146>:
    2188:	69 a1       	ldd	r22, Y+33	; 0x21
    218a:	7a a1       	ldd	r23, Y+34	; 0x22
    218c:	8b a1       	ldd	r24, Y+35	; 0x23
    218e:	9c a1       	ldd	r25, Y+36	; 0x24
    2190:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    2194:	21 96       	adiw	r28, 0x01	; 1
    2196:	6c af       	std	Y+60, r22	; 0x3c
    2198:	7d af       	std	Y+61, r23	; 0x3d
    219a:	8e af       	std	Y+62, r24	; 0x3e
    219c:	9f af       	std	Y+63, r25	; 0x3f
    219e:	21 97       	sbiw	r28, 0x01	; 1
    21a0:	ad ad       	ldd	r26, Y+61	; 0x3d
    21a2:	be ad       	ldd	r27, Y+62	; 0x3e
    21a4:	b8 8f       	std	Y+24, r27	; 0x18
    21a6:	af 8b       	std	Y+23, r26	; 0x17

000021a8 <.Loc.147>:
		while(__ticks)
    21a8:	10 c0       	rjmp	.+32     	; 0x21ca <.L89>

000021aa <.L90>:
    21aa:	80 e9       	ldi	r24, 0x90	; 144
    21ac:	91 e0       	ldi	r25, 0x01	; 1
    21ae:	9a 8f       	std	Y+26, r25	; 0x1a
    21b0:	89 8f       	std	Y+25, r24	; 0x19

000021b2 <.LBB86>:
    21b2:	89 8d       	ldd	r24, Y+25	; 0x19
    21b4:	9a 8d       	ldd	r25, Y+26	; 0x1a

000021b6 <.L1^B13>:
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <.L1^B13>
    21ba:	9a 8f       	std	Y+26, r25	; 0x1a
    21bc:	89 8f       	std	Y+25, r24	; 0x19

000021be <.Loc.149>:
	...

000021c0 <.LBE86>:
			__ticks --;
    21c0:	8f 89       	ldd	r24, Y+23	; 0x17
    21c2:	98 8d       	ldd	r25, Y+24	; 0x18
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	98 8f       	std	Y+24, r25	; 0x18
    21c8:	8f 8b       	std	Y+23, r24	; 0x17

000021ca <.L89>:
		while(__ticks)
    21ca:	8f 89       	ldd	r24, Y+23	; 0x17
    21cc:	98 8d       	ldd	r25, Y+24	; 0x18
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	61 f7       	brne	.-40     	; 0x21aa <.L90>

000021d2 <.Loc.152>:
		return;
    21d2:	1d c0       	rjmp	.+58     	; 0x220e <.L83>

000021d4 <.L100>:
		__ticks = (uint16_t)__tmp;
    21d4:	6b 89       	ldd	r22, Y+19	; 0x13
    21d6:	7c 89       	ldd	r23, Y+20	; 0x14
    21d8:	8d 89       	ldd	r24, Y+21	; 0x15
    21da:	9e 89       	ldd	r25, Y+22	; 0x16
    21dc:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fixunssfsi>
    21e0:	25 96       	adiw	r28, 0x05	; 5
    21e2:	6c af       	std	Y+60, r22	; 0x3c
    21e4:	7d af       	std	Y+61, r23	; 0x3d
    21e6:	8e af       	std	Y+62, r24	; 0x3e
    21e8:	9f af       	std	Y+63, r25	; 0x3f
    21ea:	25 97       	sbiw	r28, 0x05	; 5
    21ec:	23 96       	adiw	r28, 0x03	; 3
    21ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    21f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    21f2:	23 97       	sbiw	r28, 0x03	; 3
    21f4:	98 8f       	std	Y+24, r25	; 0x18
    21f6:	8f 8b       	std	Y+23, r24	; 0x17

000021f8 <.L86>:
    21f8:	8f 89       	ldd	r24, Y+23	; 0x17
    21fa:	98 8d       	ldd	r25, Y+24	; 0x18
    21fc:	9c 8f       	std	Y+28, r25	; 0x1c
    21fe:	8b 8f       	std	Y+27, r24	; 0x1b

00002200 <.LBB88>:
    2200:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2202:	9c 8d       	ldd	r25, Y+28	; 0x1c

00002204 <.L1^B14>:
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <.L1^B14>
    2208:	9c 8f       	std	Y+28, r25	; 0x1c
    220a:	8b 8f       	std	Y+27, r24	; 0x1b

0000220c <.Loc.155>:
	...

0000220e <.L83>:
    220e:	43 e2       	ldi	r20, 0x23	; 35
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	65 e2       	ldi	r22, 0x25	; 37
    2214:	70 e0       	ldi	r23, 0x00	; 0
    2216:	83 e0       	ldi	r24, 0x03	; 3
    2218:	0e 94 30 04 	call	0x860	; 0x860 <isLimitSwitchPressed>

0000221c <.Loc.157>:
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	09 f4       	brne	.+2      	; 0x2222 <.Loc.158>

00002220 <L0^A>:
    2220:	60 cf       	rjmp	.-320    	; 0x20e2 <.L92>

00002222 <.Loc.158>:
        _delay_ms(1); // Controleer elke milliseconde
    }
    motorStop();
    2222:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <motorStop>

00002226 <.Loc.159>:
    opgepakt = 0;
    2226:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <opgepakt+0x1>
    222a:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <opgepakt>

0000222e <.Loc.160>:
}
    222e:	00 00       	nop
    2230:	cc 5b       	subi	r28, 0xBC	; 188
    2232:	df 4f       	sbci	r29, 0xFF	; 255
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	08 95       	ret

00002244 <afstandPortaalkraan>:

/**
 * Functie om de afgelegde afstand van de portaalkraan op te vragen
 * @return De totale afstand (aantal limietschakelaar-activeringen)
 */
uint16_t afstandPortaalkraan(void) {
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62

0000224c <.Loc.162>:
    return countLimitSwitchPresses(PB0, &PORTB, &PINB); // Geef het totaal aantal limietschakelaar-activeringen terug
    224c:	43 e2       	ldi	r20, 0x23	; 35
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	65 e2       	ldi	r22, 0x25	; 37
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	0e 94 71 04 	call	0x8e2	; 0x8e2 <countLimitSwitchPresses>

0000225a <.Loc.163>:
}
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	08 95       	ret

00002260 <portaalkraanMagneetAan>:

/**
 * Functie om de magneet van de portaalkraan aan te zetten
 */
void portaalkraanMagneetAan(void) {
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62

00002268 <.Loc.165>:
    PORTC |= (1 << Magneet);
    2268:	88 e2       	ldi	r24, 0x28	; 40
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	fc 01       	movw	r30, r24
    226e:	20 81       	ld	r18, Z
    2270:	88 e2       	ldi	r24, 0x28	; 40
    2272:	90 e0       	ldi	r25, 0x00	; 0

00002274 <.Loc.166>:
    2274:	21 60       	ori	r18, 0x01	; 1
    2276:	fc 01       	movw	r30, r24
    2278:	20 83       	st	Z, r18

0000227a <.Loc.167>:
}
    227a:	00 00       	nop
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	08 95       	ret

00002282 <portaalkraanMagneetUit>:

/**
 * Functie om de magneet van de portaalkraan aan te zetten
 */
void portaalkraanMagneetUit(void) {
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62

0000228a <.Loc.169>:
    PORTC &= ~(1 << Magneet);
    228a:	88 e2       	ldi	r24, 0x28	; 40
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	fc 01       	movw	r30, r24
    2290:	20 81       	ld	r18, Z

00002292 <.Loc.170>:
    2292:	88 e2       	ldi	r24, 0x28	; 40
    2294:	90 e0       	ldi	r25, 0x00	; 0

00002296 <.Loc.171>:
    2296:	2e 7f       	andi	r18, 0xFE	; 254
    2298:	fc 01       	movw	r30, r24
    229a:	20 83       	st	Z, r18

0000229c <.Loc.172>:
}
    229c:	00 00       	nop
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	08 95       	ret

000022a4 <__umulhisi3>:
    22a4:	a2 9f       	mul	r26, r18

000022a6 <.Loc.1>:
    22a6:	b0 01       	movw	r22, r0

000022a8 <.Loc.2>:
    22a8:	b3 9f       	mul	r27, r19

000022aa <.Loc.3>:
    22aa:	c0 01       	movw	r24, r0

000022ac <.Loc.4>:
    22ac:	a3 9f       	mul	r26, r19

000022ae <.Loc.5>:
    22ae:	70 0d       	add	r23, r0

000022b0 <.Loc.6>:
    22b0:	81 1d       	adc	r24, r1

000022b2 <.Loc.7>:
    22b2:	11 24       	eor	r1, r1

000022b4 <.Loc.8>:
    22b4:	91 1d       	adc	r25, r1

000022b6 <.Loc.9>:
    22b6:	b2 9f       	mul	r27, r18

000022b8 <.Loc.10>:
    22b8:	70 0d       	add	r23, r0

000022ba <.Loc.11>:
    22ba:	81 1d       	adc	r24, r1

000022bc <.Loc.12>:
    22bc:	11 24       	eor	r1, r1

000022be <.Loc.13>:
    22be:	91 1d       	adc	r25, r1

000022c0 <.Loc.14>:
    22c0:	08 95       	ret

000022c2 <__cmpsf2>:
    22c2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__fp_cmp>
    22c6:	08 f4       	brcc	.+2      	; 0x22ca <.L1^B1>
    22c8:	81 e0       	ldi	r24, 0x01	; 1

000022ca <.L1^B1>:
    22ca:	08 95       	ret

000022cc <__fixunssfsi>:
    22cc:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__fp_splitA>
    22d0:	88 f0       	brcs	.+34     	; 0x22f4 <.L_err>
    22d2:	9f 57       	subi	r25, 0x7F	; 127
    22d4:	98 f0       	brcs	.+38     	; 0x22fc <.L_zr>
    22d6:	b9 2f       	mov	r27, r25
    22d8:	99 27       	eor	r25, r25
    22da:	b7 51       	subi	r27, 0x17	; 23
    22dc:	b0 f0       	brcs	.+44     	; 0x230a <.L4^B1>
    22de:	e1 f0       	breq	.+56     	; 0x2318 <.L_sign>

000022e0 <.L1^B1>:
    22e0:	66 0f       	add	r22, r22
    22e2:	77 1f       	adc	r23, r23
    22e4:	88 1f       	adc	r24, r24
    22e6:	99 1f       	adc	r25, r25
    22e8:	1a f0       	brmi	.+6      	; 0x22f0 <.L2^B1>
    22ea:	ba 95       	dec	r27
    22ec:	c9 f7       	brne	.-14     	; 0x22e0 <.L1^B1>
    22ee:	14 c0       	rjmp	.+40     	; 0x2318 <.L_sign>

000022f0 <.L2^B1>:
    22f0:	b1 30       	cpi	r27, 0x01	; 1
    22f2:	91 f0       	breq	.+36     	; 0x2318 <.L_sign>

000022f4 <.L_err>:
    22f4:	0e 94 18 12 	call	0x2430	; 0x2430 <__fp_zero>
    22f8:	b1 e0       	ldi	r27, 0x01	; 1
    22fa:	08 95       	ret

000022fc <.L_zr>:
    22fc:	0c 94 18 12 	jmp	0x2430	; 0x2430 <__fp_zero>

00002300 <.L3^B1>:
    2300:	67 2f       	mov	r22, r23
    2302:	78 2f       	mov	r23, r24
    2304:	88 27       	eor	r24, r24
    2306:	b8 5f       	subi	r27, 0xF8	; 248
    2308:	39 f0       	breq	.+14     	; 0x2318 <.L_sign>

0000230a <.L4^B1>:
    230a:	b9 3f       	cpi	r27, 0xF9	; 249
    230c:	cc f3       	brlt	.-14     	; 0x2300 <.L3^B1>

0000230e <.L5^B1>:
    230e:	86 95       	lsr	r24
    2310:	77 95       	ror	r23
    2312:	67 95       	ror	r22
    2314:	b3 95       	inc	r27
    2316:	d9 f7       	brne	.-10     	; 0x230e <.L5^B1>

00002318 <.L_sign>:
    2318:	3e f4       	brtc	.+14     	; 0x2328 <.L6^B1>
    231a:	90 95       	com	r25
    231c:	80 95       	com	r24
    231e:	70 95       	com	r23
    2320:	61 95       	neg	r22
    2322:	7f 4f       	sbci	r23, 0xFF	; 255
    2324:	8f 4f       	sbci	r24, 0xFF	; 255
    2326:	9f 4f       	sbci	r25, 0xFF	; 255

00002328 <.L6^B1>:
    2328:	08 95       	ret

0000232a <__floatunsisf>:
    232a:	e8 94       	clt
    232c:	09 c0       	rjmp	.+18     	; 0x2340 <.L1^B1>

0000232e <__floatsisf>:
    232e:	97 fb       	bst	r25, 7
    2330:	3e f4       	brtc	.+14     	; 0x2340 <.L1^B1>
    2332:	90 95       	com	r25
    2334:	80 95       	com	r24
    2336:	70 95       	com	r23
    2338:	61 95       	neg	r22
    233a:	7f 4f       	sbci	r23, 0xFF	; 255
    233c:	8f 4f       	sbci	r24, 0xFF	; 255
    233e:	9f 4f       	sbci	r25, 0xFF	; 255

00002340 <.L1^B1>:
    2340:	99 23       	and	r25, r25
    2342:	a9 f0       	breq	.+42     	; 0x236e <.L4^B1>
    2344:	f9 2f       	mov	r31, r25
    2346:	96 e9       	ldi	r25, 0x96	; 150
    2348:	bb 27       	eor	r27, r27

0000234a <.L2^B1>:
    234a:	93 95       	inc	r25
    234c:	f6 95       	lsr	r31
    234e:	87 95       	ror	r24
    2350:	77 95       	ror	r23
    2352:	67 95       	ror	r22
    2354:	b7 95       	ror	r27
    2356:	f1 11       	cpse	r31, r1
    2358:	f8 cf       	rjmp	.-16     	; 0x234a <.L2^B1>
    235a:	fa f4       	brpl	.+62     	; 0x239a <.L_pack>
    235c:	bb 0f       	add	r27, r27
    235e:	11 f4       	brne	.+4      	; 0x2364 <.L3^B1>
    2360:	60 ff       	sbrs	r22, 0
    2362:	1b c0       	rjmp	.+54     	; 0x239a <.L_pack>

00002364 <.L3^B1>:
    2364:	6f 5f       	subi	r22, 0xFF	; 255
    2366:	7f 4f       	sbci	r23, 0xFF	; 255
    2368:	8f 4f       	sbci	r24, 0xFF	; 255
    236a:	9f 4f       	sbci	r25, 0xFF	; 255
    236c:	16 c0       	rjmp	.+44     	; 0x239a <.L_pack>

0000236e <.L4^B1>:
    236e:	88 23       	and	r24, r24
    2370:	11 f0       	breq	.+4      	; 0x2376 <.L5^B1>
    2372:	96 e9       	ldi	r25, 0x96	; 150
    2374:	11 c0       	rjmp	.+34     	; 0x2398 <.L8^B1>

00002376 <.L5^B1>:
    2376:	77 23       	and	r23, r23
    2378:	21 f0       	breq	.+8      	; 0x2382 <.L6^B1>
    237a:	9e e8       	ldi	r25, 0x8E	; 142
    237c:	87 2f       	mov	r24, r23
    237e:	76 2f       	mov	r23, r22
    2380:	05 c0       	rjmp	.+10     	; 0x238c <.L7^B1>

00002382 <.L6^B1>:
    2382:	66 23       	and	r22, r22
    2384:	71 f0       	breq	.+28     	; 0x23a2 <.L9^B1>
    2386:	96 e8       	ldi	r25, 0x86	; 134
    2388:	86 2f       	mov	r24, r22
    238a:	70 e0       	ldi	r23, 0x00	; 0

0000238c <.L7^B1>:
    238c:	60 e0       	ldi	r22, 0x00	; 0
    238e:	2a f0       	brmi	.+10     	; 0x239a <.L_pack>

00002390 <.L10^B1>:
    2390:	9a 95       	dec	r25
    2392:	66 0f       	add	r22, r22
    2394:	77 1f       	adc	r23, r23
    2396:	88 1f       	adc	r24, r24

00002398 <.L8^B1>:
    2398:	da f7       	brpl	.-10     	; 0x2390 <.L10^B1>

0000239a <.L_pack>:
    239a:	88 0f       	add	r24, r24
    239c:	96 95       	lsr	r25
    239e:	87 95       	ror	r24
    23a0:	97 f9       	bld	r25, 7

000023a2 <.L9^B1>:
    23a2:	08 95       	ret

000023a4 <__fp_cmp>:
    23a4:	99 0f       	add	r25, r25
    23a6:	00 08       	sbc	r0, r0
    23a8:	55 0f       	add	r21, r21
    23aa:	aa 0b       	sbc	r26, r26
    23ac:	e0 e8       	ldi	r30, 0x80	; 128
    23ae:	fe ef       	ldi	r31, 0xFE	; 254
    23b0:	16 16       	cp	r1, r22
    23b2:	17 06       	cpc	r1, r23
    23b4:	e8 07       	cpc	r30, r24
    23b6:	f9 07       	cpc	r31, r25
    23b8:	c0 f0       	brcs	.+48     	; 0x23ea <.L9^B1>
    23ba:	12 16       	cp	r1, r18
    23bc:	13 06       	cpc	r1, r19
    23be:	e4 07       	cpc	r30, r20
    23c0:	f5 07       	cpc	r31, r21
    23c2:	98 f0       	brcs	.+38     	; 0x23ea <.L9^B1>
    23c4:	62 1b       	sub	r22, r18
    23c6:	73 0b       	sbc	r23, r19
    23c8:	84 0b       	sbc	r24, r20
    23ca:	95 0b       	sbc	r25, r21
    23cc:	39 f4       	brne	.+14     	; 0x23dc <.L1^B1>
    23ce:	0a 26       	eor	r0, r26
    23d0:	61 f0       	breq	.+24     	; 0x23ea <.L9^B1>
    23d2:	23 2b       	or	r18, r19
    23d4:	24 2b       	or	r18, r20
    23d6:	25 2b       	or	r18, r21
    23d8:	21 f4       	brne	.+8      	; 0x23e2 <.L2^B1>
    23da:	08 95       	ret

000023dc <.L1^B1>:
    23dc:	0a 26       	eor	r0, r26
    23de:	09 f4       	brne	.+2      	; 0x23e2 <.L2^B1>
    23e0:	a1 40       	sbci	r26, 0x01	; 1

000023e2 <.L2^B1>:
    23e2:	a6 95       	lsr	r26
    23e4:	8f ef       	ldi	r24, 0xFF	; 255
    23e6:	81 1d       	adc	r24, r1
    23e8:	81 1d       	adc	r24, r1

000023ea <.L9^B1>:
    23ea:	08 95       	ret

000023ec <__fp_split3>:
    23ec:	57 fd       	sbrc	r21, 7
    23ee:	90 58       	subi	r25, 0x80	; 128
    23f0:	44 0f       	add	r20, r20
    23f2:	55 1f       	adc	r21, r21
    23f4:	59 f0       	breq	.+22     	; 0x240c <.L4^B1>
    23f6:	5f 3f       	cpi	r21, 0xFF	; 255
    23f8:	71 f0       	breq	.+28     	; 0x2416 <.L5^B1>

000023fa <.L1^B1>:
    23fa:	47 95       	ror	r20

000023fc <__fp_splitA>:
    23fc:	88 0f       	add	r24, r24
    23fe:	97 fb       	bst	r25, 7
    2400:	99 1f       	adc	r25, r25
    2402:	61 f0       	breq	.+24     	; 0x241c <.L6^B1>
    2404:	9f 3f       	cpi	r25, 0xFF	; 255
    2406:	79 f0       	breq	.+30     	; 0x2426 <.L7^B1>

00002408 <.L3^B1>:
    2408:	87 95       	ror	r24
    240a:	08 95       	ret

0000240c <.L4^B1>:
    240c:	12 16       	cp	r1, r18
    240e:	13 06       	cpc	r1, r19
    2410:	14 06       	cpc	r1, r20
    2412:	55 1f       	adc	r21, r21
    2414:	f2 cf       	rjmp	.-28     	; 0x23fa <.L1^B1>

00002416 <.L5^B1>:
    2416:	46 95       	lsr	r20
    2418:	f1 df       	rcall	.-30     	; 0x23fc <__fp_splitA>
    241a:	08 c0       	rjmp	.+16     	; 0x242c <.L8^B1>

0000241c <.L6^B1>:
    241c:	16 16       	cp	r1, r22
    241e:	17 06       	cpc	r1, r23
    2420:	18 06       	cpc	r1, r24
    2422:	99 1f       	adc	r25, r25
    2424:	f1 cf       	rjmp	.-30     	; 0x2408 <.L3^B1>

00002426 <.L7^B1>:
    2426:	86 95       	lsr	r24
    2428:	71 05       	cpc	r23, r1
    242a:	61 05       	cpc	r22, r1

0000242c <.L8^B1>:
    242c:	08 94       	sec
    242e:	08 95       	ret

00002430 <__fp_zero>:
    2430:	e8 94       	clt

00002432 <__fp_szero>:
    2432:	bb 27       	eor	r27, r27
    2434:	66 27       	eor	r22, r22
    2436:	77 27       	eor	r23, r23
    2438:	cb 01       	movw	r24, r22
    243a:	97 f9       	bld	r25, 7
    243c:	08 95       	ret

0000243e <__gesf2>:
    243e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__fp_cmp>
    2442:	08 f4       	brcc	.+2      	; 0x2446 <.L1^B1>
    2444:	8f ef       	ldi	r24, 0xFF	; 255

00002446 <.L1^B1>:
    2446:	08 95       	ret

00002448 <__mulsf3>:
    2448:	0e 94 37 12 	call	0x246e	; 0x246e <__mulsf3x>
    244c:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__fp_round>

00002450 <.L^B1>:
    2450:	0e 94 9a 12 	call	0x2534	; 0x2534 <__fp_pscA>
    2454:	38 f0       	brcs	.+14     	; 0x2464 <.L1^B1>
    2456:	0e 94 a1 12 	call	0x2542	; 0x2542 <__fp_pscB>
    245a:	20 f0       	brcs	.+8      	; 0x2464 <.L1^B1>
    245c:	95 23       	and	r25, r21
    245e:	11 f0       	breq	.+4      	; 0x2464 <.L1^B1>
    2460:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__fp_inf>

00002464 <.L1^B1>:
    2464:	0c 94 97 12 	jmp	0x252e	; 0x252e <__fp_nan>

00002468 <.L2^B1>:
    2468:	11 24       	eor	r1, r1
    246a:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__fp_szero>

0000246e <__mulsf3x>:
    246e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__fp_split3>
    2472:	70 f3       	brcs	.-36     	; 0x2450 <.L^B1>

00002474 <__mulsf3_pse>:
    2474:	95 9f       	mul	r25, r21
    2476:	c1 f3       	breq	.-16     	; 0x2468 <.L2^B1>
    2478:	95 0f       	add	r25, r21
    247a:	50 e0       	ldi	r21, 0x00	; 0
    247c:	55 1f       	adc	r21, r21
    247e:	62 9f       	mul	r22, r18
    2480:	f0 01       	movw	r30, r0
    2482:	72 9f       	mul	r23, r18
    2484:	bb 27       	eor	r27, r27
    2486:	f0 0d       	add	r31, r0
    2488:	b1 1d       	adc	r27, r1
    248a:	63 9f       	mul	r22, r19
    248c:	aa 27       	eor	r26, r26
    248e:	f0 0d       	add	r31, r0
    2490:	b1 1d       	adc	r27, r1
    2492:	aa 1f       	adc	r26, r26
    2494:	64 9f       	mul	r22, r20
    2496:	66 27       	eor	r22, r22
    2498:	b0 0d       	add	r27, r0
    249a:	a1 1d       	adc	r26, r1
    249c:	66 1f       	adc	r22, r22
    249e:	82 9f       	mul	r24, r18
    24a0:	22 27       	eor	r18, r18
    24a2:	b0 0d       	add	r27, r0
    24a4:	a1 1d       	adc	r26, r1
    24a6:	62 1f       	adc	r22, r18
    24a8:	73 9f       	mul	r23, r19
    24aa:	b0 0d       	add	r27, r0
    24ac:	a1 1d       	adc	r26, r1
    24ae:	62 1f       	adc	r22, r18
    24b0:	83 9f       	mul	r24, r19
    24b2:	a0 0d       	add	r26, r0
    24b4:	61 1d       	adc	r22, r1
    24b6:	22 1f       	adc	r18, r18
    24b8:	74 9f       	mul	r23, r20
    24ba:	33 27       	eor	r19, r19
    24bc:	a0 0d       	add	r26, r0
    24be:	61 1d       	adc	r22, r1
    24c0:	23 1f       	adc	r18, r19
    24c2:	84 9f       	mul	r24, r20
    24c4:	60 0d       	add	r22, r0
    24c6:	21 1d       	adc	r18, r1
    24c8:	82 2f       	mov	r24, r18
    24ca:	76 2f       	mov	r23, r22
    24cc:	6a 2f       	mov	r22, r26
    24ce:	11 24       	eor	r1, r1
    24d0:	9f 57       	subi	r25, 0x7F	; 127
    24d2:	50 40       	sbci	r21, 0x00	; 0
    24d4:	9a f0       	brmi	.+38     	; 0x24fc <.L13^B1>
    24d6:	f1 f0       	breq	.+60     	; 0x2514 <.L15^B1>

000024d8 <.L10^B1>:
    24d8:	88 23       	and	r24, r24
    24da:	4a f0       	brmi	.+18     	; 0x24ee <.L11^B1>
    24dc:	ee 0f       	add	r30, r30
    24de:	ff 1f       	adc	r31, r31
    24e0:	bb 1f       	adc	r27, r27
    24e2:	66 1f       	adc	r22, r22
    24e4:	77 1f       	adc	r23, r23
    24e6:	88 1f       	adc	r24, r24
    24e8:	91 50       	subi	r25, 0x01	; 1
    24ea:	50 40       	sbci	r21, 0x00	; 0
    24ec:	a9 f7       	brne	.-22     	; 0x24d8 <.L10^B1>

000024ee <.L11^B1>:
    24ee:	9e 3f       	cpi	r25, 0xFE	; 254
    24f0:	51 05       	cpc	r21, r1
    24f2:	80 f0       	brcs	.+32     	; 0x2514 <.L15^B1>
    24f4:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__fp_inf>

000024f8 <.L12^B1>:
    24f8:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__fp_szero>

000024fc <.L13^B1>:
    24fc:	5f 3f       	cpi	r21, 0xFF	; 255
    24fe:	e4 f3       	brlt	.-8      	; 0x24f8 <.L12^B1>
    2500:	98 3e       	cpi	r25, 0xE8	; 232
    2502:	d4 f3       	brlt	.-12     	; 0x24f8 <.L12^B1>

00002504 <.L14^B1>:
    2504:	86 95       	lsr	r24
    2506:	77 95       	ror	r23
    2508:	67 95       	ror	r22
    250a:	b7 95       	ror	r27
    250c:	f7 95       	ror	r31
    250e:	e7 95       	ror	r30
    2510:	9f 5f       	subi	r25, 0xFF	; 255
    2512:	c1 f7       	brne	.-16     	; 0x2504 <.L14^B1>

00002514 <.L15^B1>:
    2514:	fe 2b       	or	r31, r30
    2516:	88 0f       	add	r24, r24
    2518:	91 1d       	adc	r25, r1
    251a:	96 95       	lsr	r25
    251c:	87 95       	ror	r24
    251e:	97 f9       	bld	r25, 7
    2520:	08 95       	ret

00002522 <__fp_inf>:
    2522:	97 f9       	bld	r25, 7
    2524:	9f 67       	ori	r25, 0x7F	; 127
    2526:	80 e8       	ldi	r24, 0x80	; 128
    2528:	70 e0       	ldi	r23, 0x00	; 0
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	08 95       	ret

0000252e <__fp_nan>:
    252e:	9f ef       	ldi	r25, 0xFF	; 255
    2530:	80 ec       	ldi	r24, 0xC0	; 192
    2532:	08 95       	ret

00002534 <__fp_pscA>:
    2534:	00 24       	eor	r0, r0
    2536:	0a 94       	dec	r0
    2538:	16 16       	cp	r1, r22
    253a:	17 06       	cpc	r1, r23
    253c:	18 06       	cpc	r1, r24
    253e:	09 06       	cpc	r0, r25
    2540:	08 95       	ret

00002542 <__fp_pscB>:
    2542:	00 24       	eor	r0, r0
    2544:	0a 94       	dec	r0
    2546:	12 16       	cp	r1, r18
    2548:	13 06       	cpc	r1, r19
    254a:	14 06       	cpc	r1, r20
    254c:	05 06       	cpc	r0, r21
    254e:	08 95       	ret

00002550 <__fp_round>:
    2550:	09 2e       	mov	r0, r25
    2552:	03 94       	inc	r0
    2554:	00 0c       	add	r0, r0
    2556:	11 f4       	brne	.+4      	; 0x255c <.L1^B1>
    2558:	88 23       	and	r24, r24
    255a:	52 f0       	brmi	.+20     	; 0x2570 <.L3^B1>

0000255c <.L1^B1>:
    255c:	bb 0f       	add	r27, r27
    255e:	40 f4       	brcc	.+16     	; 0x2570 <.L3^B1>
    2560:	bf 2b       	or	r27, r31
    2562:	11 f4       	brne	.+4      	; 0x2568 <.L2^B1>
    2564:	60 ff       	sbrs	r22, 0
    2566:	04 c0       	rjmp	.+8      	; 0x2570 <.L3^B1>

00002568 <.L2^B1>:
    2568:	6f 5f       	subi	r22, 0xFF	; 255
    256a:	7f 4f       	sbci	r23, 0xFF	; 255
    256c:	8f 4f       	sbci	r24, 0xFF	; 255
    256e:	9f 4f       	sbci	r25, 0xFF	; 255

00002570 <.L3^B1>:
    2570:	08 95       	ret

00002572 <_exit>:
    2572:	f8 94       	cli

00002574 <__stop_program>:
    2574:	ff cf       	rjmp	.-2      	; 0x2574 <__stop_program>
