
bin\Debug\Oefentoets-2023.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  00000a3a  00000ace  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  00000aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000012  00000000  00000000  00000af1  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b04  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000138  00000000  00000000  00000b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00001242  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000f66  00000000  00000000  00001ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   000009ad  00000000  00000000  00002e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000002c4  00000000  00000000  000037d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000618  00000000  00000000  00003a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000001bc  00000000  00000000  000040b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	ea e3       	ldi	r30, 0x3A	; 58

000000fc <.Loc.4>:
  fc:	fa e0       	ldi	r31, 0x0A	; 10

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a0 32       	cpi	r26, 0x20	; 32

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <L0^A>:
 10e:	0e 94 8d 02 	call	0x51a	; 0x51a <main>
 112:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <init>:
	~0x66, ~0xB6, ~0xBE, ~0xE0,
	~0xFE, ~0xF6, ~0xEE, ~0x3E,
	~0x9C, ~0x7A, ~0x9E, ~0x8E };

void init (void)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62

00000122 <.Loc.1>:
	// Initialiseer de pinnen voor datain, shiftclk en latchclk als output
	DDR_SDI    |= (1 << SDI_BIT);
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	fc 01       	movw	r30, r24
 128:	20 81       	ld	r18, Z
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	91 e0       	ldi	r25, 0x01	; 1

0000012e <.Loc.2>:
 12e:	20 62       	ori	r18, 0x20	; 32
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18

00000134 <.Loc.3>:
	DDR_SFTCLK |= (1 << SFTCLK_BIT);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	fc 01       	movw	r30, r24
 13a:	20 81       	ld	r18, Z
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	91 e0       	ldi	r25, 0x01	; 1

00000140 <.Loc.4>:
 140:	20 61       	ori	r18, 0x10	; 16
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18

00000146 <.Loc.5>:
	DDR_LCHCLK |= (1 << LCHCLK_BIT);
 146:	83 e3       	ldi	r24, 0x33	; 51
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	20 81       	ld	r18, Z
 14e:	83 e3       	ldi	r24, 0x33	; 51
 150:	90 e0       	ldi	r25, 0x00	; 0

00000152 <.Loc.6>:
 152:	20 62       	ori	r18, 0x20	; 32
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18

00000158 <.Loc.7>:

	// Maak shiftclk en latchclk laag
	PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	fc 01       	movw	r30, r24
 15e:	20 81       	ld	r18, Z

00000160 <.Loc.8>:
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	91 e0       	ldi	r25, 0x01	; 1

00000164 <.Loc.9>:
 164:	2f 7e       	andi	r18, 0xEF	; 239
 166:	fc 01       	movw	r30, r24
 168:	20 83       	st	Z, r18

0000016a <.Loc.10>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
 16a:	84 e3       	ldi	r24, 0x34	; 52
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	fc 01       	movw	r30, r24
 170:	20 81       	ld	r18, Z

00000172 <.Loc.11>:
 172:	84 e3       	ldi	r24, 0x34	; 52
 174:	90 e0       	ldi	r25, 0x00	; 0

00000176 <.Loc.12>:
 176:	2f 7d       	andi	r18, 0xDF	; 223
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18

0000017c <.Loc.13>:
	init_adc();
 17c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <init_adc>

00000180 <.Loc.14>:
}
 180:	00 00       	nop
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <send_data>:

void send_data(char data)
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	00 d0       	rcall	.+0      	; 0x18e <L0^A>

0000018e <L0^A>:
 18e:	0f 92       	push	r0
 190:	0f 92       	push	r0
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	8d 83       	std	Y+5, r24	; 0x05

00000198 <.LBB13>:
	for (unsigned i = 0; i < 8; i++)
 198:	1a 82       	std	Y+2, r1	; 0x02
 19a:	19 82       	std	Y+1, r1	; 0x01

0000019c <.Loc.17>:
 19c:	39 c0       	rjmp	.+114    	; 0x210 <.L3>

0000019e <.L6>:
	// Herhaal voor alle bits in een char
	{
		// Bepaal de waarde van de bit die je naar het schuifregister
		// wil sturen
		int bit = data & 1;
 19e:	8d 81       	ldd	r24, Y+5	; 0x05
 1a0:	08 2e       	mov	r0, r24
 1a2:	00 0c       	add	r0, r0
 1a4:	99 0b       	sbc	r25, r25

000001a6 <.Loc.19>:
 1a6:	81 70       	andi	r24, 0x01	; 1
 1a8:	99 27       	eor	r25, r25
 1aa:	9c 83       	std	Y+4, r25	; 0x04
 1ac:	8b 83       	std	Y+3, r24	; 0x03

000001ae <.Loc.20>:
		data >>= 1;
 1ae:	8d 81       	ldd	r24, Y+5	; 0x05
 1b0:	85 95       	asr	r24
 1b2:	8d 83       	std	Y+5, r24	; 0x05

000001b4 <.Loc.21>:

		// Maak de juiste pin hoog of laag op basis van de bepaalde waarde
		// van het bit
		if (bit)
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	9c 81       	ldd	r25, Y+4	; 0x04
 1b8:	00 97       	sbiw	r24, 0x00	; 0
 1ba:	51 f0       	breq	.+20     	; 0x1d0 <.L4>

000001bc <.Loc.22>:
		{
			PORT_SDI |= (1 << SDI_BIT);
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 81       	ld	r18, Z
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	91 e0       	ldi	r25, 0x01	; 1

000001c8 <.Loc.23>:
 1c8:	20 62       	ori	r18, 0x20	; 32
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <.L5>

000001d0 <.L4>:
		}
		else
		{
			PORT_SDI &= ~(1 << SDI_BIT);
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	fc 01       	movw	r30, r24
 1d6:	20 81       	ld	r18, Z

000001d8 <.Loc.25>:
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	91 e0       	ldi	r25, 0x01	; 1

000001dc <.Loc.26>:
 1dc:	2f 7d       	andi	r18, 0xDF	; 223
 1de:	fc 01       	movw	r30, r24
 1e0:	20 83       	st	Z, r18

000001e2 <.L5>:
		}

		// Toggle shiftclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
		// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
		// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
		PORT_SFTCLK |= (1 << SFTCLK_BIT);
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 81       	ld	r18, Z
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	91 e0       	ldi	r25, 0x01	; 1

000001ee <.Loc.28>:
 1ee:	20 61       	ori	r18, 0x10	; 16
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18

000001f4 <.Loc.29>:
		PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 81       	ld	r18, Z

000001fc <.Loc.30>:
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	91 e0       	ldi	r25, 0x01	; 1

00000200 <.Loc.31>:
 200:	2f 7e       	andi	r18, 0xEF	; 239
 202:	fc 01       	movw	r30, r24
 204:	20 83       	st	Z, r18

00000206 <.LBE14>:
	for (unsigned i = 0; i < 8; i++)
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	9a 81       	ldd	r25, Y+2	; 0x02
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	9a 83       	std	Y+2, r25	; 0x02
 20e:	89 83       	std	Y+1, r24	; 0x01

00000210 <.L3>:
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	9a 81       	ldd	r25, Y+2	; 0x02
 214:	87 30       	cpi	r24, 0x07	; 7
 216:	91 05       	cpc	r25, r1
 218:	11 f2       	breq	.-124    	; 0x19e <.L6>
 21a:	08 f2       	brcs	.-126    	; 0x19e <.L6>

0000021c <.LBE13>:
	}
}
 21c:	00 00       	nop
 21e:	00 00       	nop
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <send_enable>:

void send_enable(int display_nummer)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	0f 92       	push	r0
 236:	0f 92       	push	r0
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	9a 83       	std	Y+2, r25	; 0x02
 23e:	89 83       	std	Y+1, r24	; 0x01

00000240 <.Loc.36>:
	send_data(0x10 << display_nummer);
 240:	80 e1       	ldi	r24, 0x10	; 16
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	09 80       	ldd	r0, Y+1	; 0x01
 246:	02 c0       	rjmp	.+4      	; 0x24c <.L2^B1>

00000248 <.L1^B1>:
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25

0000024c <.L2^B1>:
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <.L1^B1>

00000250 <.Loc.37>:
 250:	0e 94 c4 00 	call	0x188	; 0x188 <send_data>

00000254 <.Loc.38>:
}
 254:	00 00       	nop
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <display>:

void display(char data, int display_nummer)
{
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	00 d0       	rcall	.+0      	; 0x266 <L0^A>

00000266 <L0^A>:
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	89 83       	std	Y+1, r24	; 0x01
 26c:	7b 83       	std	Y+3, r23	; 0x03
 26e:	6a 83       	std	Y+2, r22	; 0x02

00000270 <.Loc.40>:
	send_data(data);
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	0e 94 c4 00 	call	0x188	; 0x188 <send_data>

00000276 <.Loc.41>:
	send_enable(display_nummer);
 276:	8a 81       	ldd	r24, Y+2	; 0x02
 278:	9b 81       	ldd	r25, Y+3	; 0x03
 27a:	0e 94 18 01 	call	0x230	; 0x230 <send_enable>

0000027e <.Loc.42>:

	// Toggle latchclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
	// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
	// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
	PORT_LCHCLK |= (1 << LCHCLK_BIT);
 27e:	84 e3       	ldi	r24, 0x34	; 52
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	fc 01       	movw	r30, r24
 284:	20 81       	ld	r18, Z
 286:	84 e3       	ldi	r24, 0x34	; 52
 288:	90 e0       	ldi	r25, 0x00	; 0

0000028a <.Loc.43>:
 28a:	20 62       	ori	r18, 0x20	; 32
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18

00000290 <.Loc.44>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
 290:	84 e3       	ldi	r24, 0x34	; 52
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	20 81       	ld	r18, Z

00000298 <.Loc.45>:
 298:	84 e3       	ldi	r24, 0x34	; 52
 29a:	90 e0       	ldi	r25, 0x00	; 0

0000029c <.Loc.46>:
 29c:	2f 7d       	andi	r18, 0xDF	; 223
 29e:	fc 01       	movw	r30, r24
 2a0:	20 83       	st	Z, r18

000002a2 <.Loc.47>:
}
 2a2:	00 00       	nop
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <display_getal>:

void display_getal(unsigned int getal)
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	a6 97       	sbiw	r28, 0x26	; 38
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
 2c4:	9a 8b       	std	Y+18, r25	; 0x12
 2c6:	89 8b       	std	Y+17, r24	; 0x11

000002c8 <.LBB15>:
	for (int i = 0; i < 4; i++)
 2c8:	1a 82       	std	Y+2, r1	; 0x02
 2ca:	19 82       	std	Y+1, r1	; 0x01

000002cc <.Loc.50>:
 2cc:	cc c0       	rjmp	.+408    	; 0x466 <.L10>

000002ce <.L19>:
	{
		display(segmentcodes[getal%10], i);
 2ce:	49 89       	ldd	r20, Y+17	; 0x11
 2d0:	5a 89       	ldd	r21, Y+18	; 0x12
 2d2:	9a 01       	movw	r18, r20
 2d4:	ad ec       	ldi	r26, 0xCD	; 205
 2d6:	bc ec       	ldi	r27, 0xCC	; 204
 2d8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__umulhisi3>
 2dc:	9c 01       	movw	r18, r24
 2de:	36 95       	lsr	r19
 2e0:	27 95       	ror	r18
 2e2:	36 95       	lsr	r19
 2e4:	27 95       	ror	r18
 2e6:	36 95       	lsr	r19
 2e8:	27 95       	ror	r18
 2ea:	c9 01       	movw	r24, r18
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	82 0f       	add	r24, r18
 2f6:	93 1f       	adc	r25, r19
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	9a 01       	movw	r18, r20
 2fe:	28 1b       	sub	r18, r24
 300:	39 0b       	sbc	r19, r25

00000302 <.Loc.52>:
 302:	c9 01       	movw	r24, r18
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	80 50       	subi	r24, 0x00	; 0
 30a:	9e 4f       	sbci	r25, 0xFE	; 254
 30c:	dc 01       	movw	r26, r24
 30e:	8d 91       	ld	r24, X+
 310:	9c 91       	ld	r25, X

00000312 <.Loc.53>:
 312:	28 2f       	mov	r18, r24
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	9a 81       	ldd	r25, Y+2	; 0x02
 318:	bc 01       	movw	r22, r24
 31a:	82 2f       	mov	r24, r18
 31c:	0e 94 30 01 	call	0x260	; 0x260 <display>

00000320 <.Loc.54>:
		getal /= 10;
 320:	89 89       	ldd	r24, Y+17	; 0x11
 322:	9a 89       	ldd	r25, Y+18	; 0x12
 324:	9c 01       	movw	r18, r24
 326:	ad ec       	ldi	r26, 0xCD	; 205
 328:	bc ec       	ldi	r27, 0xCC	; 204
 32a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__umulhisi3>
 32e:	96 95       	lsr	r25
 330:	87 95       	ror	r24
 332:	96 95       	lsr	r25
 334:	87 95       	ror	r24
 336:	96 95       	lsr	r25
 338:	87 95       	ror	r24
 33a:	9a 8b       	std	Y+18, r25	; 0x12
 33c:	89 8b       	std	Y+17, r24	; 0x11
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	a0 e8       	ldi	r26, 0x80	; 128
 344:	bf e3       	ldi	r27, 0x3F	; 63
 346:	8b 83       	std	Y+3, r24	; 0x03
 348:	9c 83       	std	Y+4, r25	; 0x04
 34a:	ad 83       	std	Y+5, r26	; 0x05
 34c:	be 83       	std	Y+6, r27	; 0x06

0000034e <.LBB16>:

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	4a e7       	ldi	r20, 0x7A	; 122
 354:	55 e4       	ldi	r21, 0x45	; 69
 356:	6b 81       	ldd	r22, Y+3	; 0x03
 358:	7c 81       	ldd	r23, Y+4	; 0x04
 35a:	8d 81       	ldd	r24, Y+5	; 0x05
 35c:	9e 81       	ldd	r25, Y+6	; 0x06
 35e:	0e 94 86 04 	call	0x90c	; 0x90c <__mulsf3>
 362:	6f 8b       	std	Y+23, r22	; 0x17
 364:	78 8f       	std	Y+24, r23	; 0x18
 366:	89 8f       	std	Y+25, r24	; 0x19
 368:	9a 8f       	std	Y+26, r25	; 0x1a
 36a:	8f 89       	ldd	r24, Y+23	; 0x17
 36c:	98 8d       	ldd	r25, Y+24	; 0x18
 36e:	a9 8d       	ldd	r26, Y+25	; 0x19
 370:	ba 8d       	ldd	r27, Y+26	; 0x1a
 372:	8f 83       	std	Y+7, r24	; 0x07
 374:	98 87       	std	Y+8, r25	; 0x08
 376:	a9 87       	std	Y+9, r26	; 0x09
 378:	ba 87       	std	Y+10, r27	; 0x0a

0000037a <.Loc.56>:
	if (__tmp < 1.0)
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	40 e8       	ldi	r20, 0x80	; 128
 380:	5f e3       	ldi	r21, 0x3F	; 63
 382:	6f 81       	ldd	r22, Y+7	; 0x07
 384:	78 85       	ldd	r23, Y+8	; 0x08
 386:	89 85       	ldd	r24, Y+9	; 0x09
 388:	9a 85       	ldd	r25, Y+10	; 0x0a
 38a:	0e 94 00 04 	call	0x800	; 0x800 <__cmpsf2>
 38e:	88 23       	and	r24, r24
 390:	2c f4       	brge	.+10     	; 0x39c <.L22>

00000392 <.Loc.57>:
		__ticks = 1;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	9c 87       	std	Y+12, r25	; 0x0c
 398:	8b 87       	std	Y+11, r24	; 0x0b
 39a:	55 c0       	rjmp	.+170    	; 0x446 <.L13>

0000039c <.L22>:
	else if (__tmp > 65535)
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	3f ef       	ldi	r19, 0xFF	; 255
 3a0:	4f e7       	ldi	r20, 0x7F	; 127
 3a2:	57 e4       	ldi	r21, 0x47	; 71
 3a4:	6f 81       	ldd	r22, Y+7	; 0x07
 3a6:	78 85       	ldd	r23, Y+8	; 0x08
 3a8:	89 85       	ldd	r24, Y+9	; 0x09
 3aa:	9a 85       	ldd	r25, Y+10	; 0x0a
 3ac:	0e 94 81 04 	call	0x902	; 0x902 <__gesf2>
 3b0:	88 23       	and	r24, r24
 3b2:	d9 f1       	breq	.+118    	; 0x42a <.L23>
 3b4:	d4 f1       	brlt	.+116    	; 0x42a <.L23>

000003b6 <.Loc.59>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3b6:	20 e0       	ldi	r18, 0x00	; 0
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	40 e2       	ldi	r20, 0x20	; 32
 3bc:	51 e4       	ldi	r21, 0x41	; 65
 3be:	6b 81       	ldd	r22, Y+3	; 0x03
 3c0:	7c 81       	ldd	r23, Y+4	; 0x04
 3c2:	8d 81       	ldd	r24, Y+5	; 0x05
 3c4:	9e 81       	ldd	r25, Y+6	; 0x06
 3c6:	0e 94 86 04 	call	0x90c	; 0x90c <__mulsf3>
 3ca:	6b 8f       	std	Y+27, r22	; 0x1b
 3cc:	7c 8f       	std	Y+28, r23	; 0x1c
 3ce:	8d 8f       	std	Y+29, r24	; 0x1d
 3d0:	9e 8f       	std	Y+30, r25	; 0x1e
 3d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
 3d6:	ad 8d       	ldd	r26, Y+29	; 0x1d
 3d8:	be 8d       	ldd	r27, Y+30	; 0x1e
 3da:	8b 8b       	std	Y+19, r24	; 0x13
 3dc:	9c 8b       	std	Y+20, r25	; 0x14
 3de:	ad 8b       	std	Y+21, r26	; 0x15
 3e0:	be 8b       	std	Y+22, r27	; 0x16

000003e2 <.Loc.60>:
 3e2:	6b 89       	ldd	r22, Y+19	; 0x13
 3e4:	7c 89       	ldd	r23, Y+20	; 0x14
 3e6:	8d 89       	ldd	r24, Y+21	; 0x15
 3e8:	9e 89       	ldd	r25, Y+22	; 0x16
 3ea:	0e 94 05 04 	call	0x80a	; 0x80a <__fixunssfsi>
 3ee:	6f 8f       	std	Y+31, r22	; 0x1f
 3f0:	78 a3       	std	Y+32, r23	; 0x20
 3f2:	89 a3       	std	Y+33, r24	; 0x21
 3f4:	9a a3       	std	Y+34, r25	; 0x22
 3f6:	af 8d       	ldd	r26, Y+31	; 0x1f
 3f8:	b8 a1       	ldd	r27, Y+32	; 0x20
 3fa:	bc 87       	std	Y+12, r27	; 0x0c
 3fc:	ab 87       	std	Y+11, r26	; 0x0b

000003fe <.Loc.61>:
		while(__ticks)
 3fe:	10 c0       	rjmp	.+32     	; 0x420 <.L16>

00000400 <.L17>:
 400:	80 e9       	ldi	r24, 0x90	; 144
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	9e 87       	std	Y+14, r25	; 0x0e
 406:	8d 87       	std	Y+13, r24	; 0x0d

00000408 <.LBB18>:
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
 408:	8d 85       	ldd	r24, Y+13	; 0x0d
 40a:	9e 85       	ldd	r25, Y+14	; 0x0e

0000040c <.L1^B2>:
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <.L1^B2>
 410:	9e 87       	std	Y+14, r25	; 0x0e
 412:	8d 87       	std	Y+13, r24	; 0x0d

00000414 <.Loc.63>:
	...

00000416 <.LBE18>:
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 416:	8b 85       	ldd	r24, Y+11	; 0x0b
 418:	9c 85       	ldd	r25, Y+12	; 0x0c
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	9c 87       	std	Y+12, r25	; 0x0c
 41e:	8b 87       	std	Y+11, r24	; 0x0b

00000420 <.L16>:
		while(__ticks)
 420:	8b 85       	ldd	r24, Y+11	; 0x0b
 422:	9c 85       	ldd	r25, Y+12	; 0x0c
 424:	00 97       	sbiw	r24, 0x00	; 0
 426:	61 f7       	brne	.-40     	; 0x400 <.L17>

00000428 <.Loc.66>:
		}
		return;
 428:	19 c0       	rjmp	.+50     	; 0x45c <.L18>

0000042a <.L23>:
	}
	else
		__ticks = (uint16_t)__tmp;
 42a:	6f 81       	ldd	r22, Y+7	; 0x07
 42c:	78 85       	ldd	r23, Y+8	; 0x08
 42e:	89 85       	ldd	r24, Y+9	; 0x09
 430:	9a 85       	ldd	r25, Y+10	; 0x0a
 432:	0e 94 05 04 	call	0x80a	; 0x80a <__fixunssfsi>
 436:	6b a3       	std	Y+35, r22	; 0x23
 438:	7c a3       	std	Y+36, r23	; 0x24
 43a:	8d a3       	std	Y+37, r24	; 0x25
 43c:	9e a3       	std	Y+38, r25	; 0x26
 43e:	eb a1       	ldd	r30, Y+35	; 0x23
 440:	fc a1       	ldd	r31, Y+36	; 0x24
 442:	fc 87       	std	Y+12, r31	; 0x0c
 444:	eb 87       	std	Y+11, r30	; 0x0b

00000446 <.L13>:
 446:	8b 85       	ldd	r24, Y+11	; 0x0b
 448:	9c 85       	ldd	r25, Y+12	; 0x0c
 44a:	98 8b       	std	Y+16, r25	; 0x10
 44c:	8f 87       	std	Y+15, r24	; 0x0f

0000044e <.LBB20>:
 44e:	8f 85       	ldd	r24, Y+15	; 0x0f
 450:	98 89       	ldd	r25, Y+16	; 0x10

00000452 <.L1^B3>:
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <.L1^B3>
 456:	98 8b       	std	Y+16, r25	; 0x10
 458:	8f 87       	std	Y+15, r24	; 0x0f

0000045a <.Loc.69>:
	...

0000045c <.L18>:
	for (int i = 0; i < 4; i++)
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	9a 81       	ldd	r25, Y+2	; 0x02
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	9a 83       	std	Y+2, r25	; 0x02
 464:	89 83       	std	Y+1, r24	; 0x01

00000466 <.L10>:
 466:	89 81       	ldd	r24, Y+1	; 0x01
 468:	9a 81       	ldd	r25, Y+2	; 0x02
 46a:	83 30       	cpi	r24, 0x03	; 3
 46c:	91 05       	cpc	r25, r1
 46e:	09 f0       	breq	.+2      	; 0x472 <L0^A>

00000470 <L0^A>:
 470:	0c f4       	brge	.+2      	; 0x474 <.LBE15>

00000472 <L0^A>:
 472:	2d cf       	rjmp	.-422    	; 0x2ce <.L19>

00000474 <.LBE15>:
		_delay_ms(1);   // 1 kHz
	}
}
 474:	00 00       	nop
 476:	00 00       	nop
 478:	a6 96       	adiw	r28, 0x26	; 38
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	f8 94       	cli
 47e:	de bf       	out	0x3e, r29	; 62
 480:	0f be       	out	0x3f, r0	; 63
 482:	cd bf       	out	0x3d, r28	; 61
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <display_clear>:

void display_clear(void)
{
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62

00000492 <.Loc.74>:
    display(0xFF, 0);
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	8f ef       	ldi	r24, 0xFF	; 255
 498:	0e 94 30 01 	call	0x260	; 0x260 <display>

0000049c <.Loc.75>:
}
 49c:	00 00       	nop
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <init_adc>:


void init_adc(void) {
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62

000004ac <.Loc.77>:
    ADMUX = (1 << REFS0) | (0 << REFS1);
 4ac:	8c e7       	ldi	r24, 0x7C	; 124
 4ae:	90 e0       	ldi	r25, 0x00	; 0

000004b0 <.Loc.78>:
 4b0:	20 e4       	ldi	r18, 0x40	; 64
 4b2:	fc 01       	movw	r30, r24
 4b4:	20 83       	st	Z, r18

000004b6 <.Loc.79>:
    ADCSRA = (0 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 4b6:	8a e7       	ldi	r24, 0x7A	; 122
 4b8:	90 e0       	ldi	r25, 0x00	; 0

000004ba <.Loc.80>:
 4ba:	23 e0       	ldi	r18, 0x03	; 3
 4bc:	fc 01       	movw	r30, r24
 4be:	20 83       	st	Z, r18

000004c0 <.Loc.81>:
    ADCSRA |= (1 << ADEN);
 4c0:	8a e7       	ldi	r24, 0x7A	; 122
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 81       	ld	r18, Z
 4c8:	8a e7       	ldi	r24, 0x7A	; 122
 4ca:	90 e0       	ldi	r25, 0x00	; 0

000004cc <.Loc.82>:
 4cc:	20 68       	ori	r18, 0x80	; 128
 4ce:	fc 01       	movw	r30, r24
 4d0:	20 83       	st	Z, r18

000004d2 <.Loc.83>:
}
 4d2:	00 00       	nop
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <get_adc_value>:

int get_adc_value(void) {
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62

000004e2 <.Loc.85>:
    ADCSRA |= (1 << ADSC);
 4e2:	8a e7       	ldi	r24, 0x7A	; 122
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	fc 01       	movw	r30, r24
 4e8:	20 81       	ld	r18, Z
 4ea:	8a e7       	ldi	r24, 0x7A	; 122
 4ec:	90 e0       	ldi	r25, 0x00	; 0

000004ee <.Loc.86>:
 4ee:	20 64       	ori	r18, 0x40	; 64
 4f0:	fc 01       	movw	r30, r24
 4f2:	20 83       	st	Z, r18

000004f4 <.Loc.87>:
	...

000004f6 <.L27>:
    while(ADCSRA & (1 << ADSC)) {}
 4f6:	8a e7       	ldi	r24, 0x7A	; 122
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	fc 01       	movw	r30, r24
 4fc:	80 81       	ld	r24, Z

000004fe <.Loc.89>:
 4fe:	88 2f       	mov	r24, r24
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	80 74       	andi	r24, 0x40	; 64
 504:	99 27       	eor	r25, r25

00000506 <.Loc.90>:
 506:	00 97       	sbiw	r24, 0x00	; 0
 508:	b1 f7       	brne	.-20     	; 0x4f6 <.L27>

0000050a <.Loc.91>:
    return ADC;
 50a:	88 e7       	ldi	r24, 0x78	; 120
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	fc 01       	movw	r30, r24
 510:	80 81       	ld	r24, Z
 512:	91 81       	ldd	r25, Z+1	; 0x01

00000514 <.Loc.92>:
}
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <main>:

int main(void)
{
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	00 d0       	rcall	.+0      	; 0x520 <L0^A>

00000520 <L0^A>:
 520:	00 d0       	rcall	.+0      	; 0x522 <L0^A>

00000522 <L0^A>:
 522:	0f 92       	push	r0
 524:	0f 92       	push	r0
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62

0000052a <.Loc.94>:
	init();
 52a:	0e 94 8d 00 	call	0x11a	; 0x11a <init>

0000052e <.L32>:
	while (1)
	{
	    int value = get_adc_value();
 52e:	0e 94 6d 02 	call	0x4da	; 0x4da <get_adc_value>
 532:	9a 83       	std	Y+2, r25	; 0x02
 534:	89 83       	std	Y+1, r24	; 0x01

00000536 <.Loc.96>:

        int voltage_mV = (value * 5000ul) / 1024;
 536:	89 81       	ldd	r24, Y+1	; 0x01
 538:	9a 81       	ldd	r25, Y+2	; 0x02
 53a:	ac 01       	movw	r20, r24
 53c:	99 0f       	add	r25, r25
 53e:	66 0b       	sbc	r22, r22
 540:	77 0b       	sbc	r23, r23
 542:	88 e8       	ldi	r24, 0x88	; 136
 544:	93 e1       	ldi	r25, 0x13	; 19
 546:	dc 01       	movw	r26, r24
 548:	9a 01       	movw	r18, r20
 54a:	ab 01       	movw	r20, r22
 54c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__muluhisi3>
 550:	6d 83       	std	Y+5, r22	; 0x05
 552:	7e 83       	std	Y+6, r23	; 0x06
 554:	8f 83       	std	Y+7, r24	; 0x07
 556:	98 87       	std	Y+8, r25	; 0x08

00000558 <.Loc.97>:
 558:	8d 81       	ldd	r24, Y+5	; 0x05
 55a:	9e 81       	ldd	r25, Y+6	; 0x06
 55c:	af 81       	ldd	r26, Y+7	; 0x07
 55e:	b8 85       	ldd	r27, Y+8	; 0x08
 560:	07 2e       	mov	r0, r23
 562:	7a e0       	ldi	r23, 0x0A	; 10

00000564 <.L1^B4>:
 564:	b6 95       	lsr	r27
 566:	a7 95       	ror	r26
 568:	97 95       	ror	r25
 56a:	87 95       	ror	r24
 56c:	7a 95       	dec	r23
 56e:	d1 f7       	brne	.-12     	; 0x564 <.L1^B4>
 570:	70 2d       	mov	r23, r0

00000572 <.Loc.98>:
 572:	9c 83       	std	Y+4, r25	; 0x04
 574:	8b 83       	std	Y+3, r24	; 0x03

00000576 <.Loc.99>:
	    if(voltage_mV > 1000 && voltage_mV < 3000) {
 576:	8b 81       	ldd	r24, Y+3	; 0x03
 578:	9c 81       	ldd	r25, Y+4	; 0x04
 57a:	88 3e       	cpi	r24, 0xE8	; 232
 57c:	23 e0       	ldi	r18, 0x03	; 3
 57e:	92 07       	cpc	r25, r18
 580:	69 f0       	breq	.+26     	; 0x59c <.L30>
 582:	64 f0       	brlt	.+24     	; 0x59c <.L30>

00000584 <.Loc.100>:
 584:	8b 81       	ldd	r24, Y+3	; 0x03
 586:	9c 81       	ldd	r25, Y+4	; 0x04
 588:	87 3b       	cpi	r24, 0xB7	; 183
 58a:	2b e0       	ldi	r18, 0x0B	; 11
 58c:	92 07       	cpc	r25, r18
 58e:	09 f0       	breq	.+2      	; 0x592 <.Loc.101>

00000590 <L0^A>:
 590:	2c f4       	brge	.+10     	; 0x59c <.L30>

00000592 <.Loc.101>:
            display_getal(voltage_mV);
 592:	8b 81       	ldd	r24, Y+3	; 0x03
 594:	9c 81       	ldd	r25, Y+4	; 0x04
 596:	0e 94 58 01 	call	0x2b0	; 0x2b0 <display_getal>
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <.L31>

0000059c <.L30>:
	    } else {
            display_clear();
 59c:	0e 94 45 02 	call	0x48a	; 0x48a <display_clear>

000005a0 <.L31>:
	{
 5a0:	c6 cf       	rjmp	.-116    	; 0x52e <.L32>

000005a2 <init1>:

#define S1 PF1
#define S2 PF2
#define S3 PF3

void init1(void) {
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	cd b7       	in	r28, 0x3d	; 61
 5a8:	de b7       	in	r29, 0x3e	; 62

000005aa <.Loc.1>:
    DDRB |= (1 << D2) | (1 << D3);
 5aa:	84 e2       	ldi	r24, 0x24	; 36
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	fc 01       	movw	r30, r24
 5b0:	20 81       	ld	r18, Z
 5b2:	84 e2       	ldi	r24, 0x24	; 36
 5b4:	90 e0       	ldi	r25, 0x00	; 0

000005b6 <.Loc.2>:
 5b6:	20 66       	ori	r18, 0x60	; 96
 5b8:	fc 01       	movw	r30, r24
 5ba:	20 83       	st	Z, r18

000005bc <.Loc.3>:
}
 5bc:	00 00       	nop
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	08 95       	ret

000005c4 <opdracht1>:

void opdracht1(void) {
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62

000005cc <.Loc.5>:
    if(!(PINF & (1 << S1))) {
 5cc:	8f e2       	ldi	r24, 0x2F	; 47
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	fc 01       	movw	r30, r24
 5d2:	80 81       	ld	r24, Z

000005d4 <.Loc.6>:
 5d4:	88 2f       	mov	r24, r24
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	82 70       	andi	r24, 0x02	; 2
 5da:	99 27       	eor	r25, r25

000005dc <.Loc.7>:
 5dc:	00 97       	sbiw	r24, 0x00	; 0
 5de:	51 f4       	brne	.+20     	; 0x5f4 <.L3>

000005e0 <.Loc.8>:
        PORTB |= (1 << D3);
 5e0:	85 e2       	ldi	r24, 0x25	; 37
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	fc 01       	movw	r30, r24
 5e6:	20 81       	ld	r18, Z
 5e8:	85 e2       	ldi	r24, 0x25	; 37
 5ea:	90 e0       	ldi	r25, 0x00	; 0

000005ec <.Loc.9>:
 5ec:	20 62       	ori	r18, 0x20	; 32
 5ee:	fc 01       	movw	r30, r24
 5f0:	20 83       	st	Z, r18

000005f2 <.Loc.10>:
    } else {
        PORTB &= ~(1 << D3);
    }
}
 5f2:	09 c0       	rjmp	.+18     	; 0x606 <.L5>

000005f4 <.L3>:
        PORTB &= ~(1 << D3);
 5f4:	85 e2       	ldi	r24, 0x25	; 37
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	fc 01       	movw	r30, r24
 5fa:	20 81       	ld	r18, Z

000005fc <.Loc.12>:
 5fc:	85 e2       	ldi	r24, 0x25	; 37
 5fe:	90 e0       	ldi	r25, 0x00	; 0

00000600 <.Loc.13>:
 600:	2f 7d       	andi	r18, 0xDF	; 223
 602:	fc 01       	movw	r30, r24
 604:	20 83       	st	Z, r18

00000606 <.L5>:
}
 606:	00 00       	nop
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	08 95       	ret

0000060e <init2>:

#define S1 PF1
#define S2 PF2
#define S3 PF3

void init2(void) {
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	cd b7       	in	r28, 0x3d	; 61
 614:	de b7       	in	r29, 0x3e	; 62

00000616 <.Loc.1>:
    DDRB |= (1 << D1) | (1 << D4);
 616:	84 e2       	ldi	r24, 0x24	; 36
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	fc 01       	movw	r30, r24
 61c:	20 81       	ld	r18, Z
 61e:	84 e2       	ldi	r24, 0x24	; 36
 620:	90 e0       	ldi	r25, 0x00	; 0

00000622 <.Loc.2>:
 622:	20 69       	ori	r18, 0x90	; 144
 624:	fc 01       	movw	r30, r24
 626:	20 83       	st	Z, r18

00000628 <.Loc.3>:
    PORTB |= (1 << D1);
 628:	85 e2       	ldi	r24, 0x25	; 37
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	fc 01       	movw	r30, r24
 62e:	20 81       	ld	r18, Z
 630:	85 e2       	ldi	r24, 0x25	; 37
 632:	90 e0       	ldi	r25, 0x00	; 0

00000634 <.Loc.4>:
 634:	20 68       	ori	r18, 0x80	; 128
 636:	fc 01       	movw	r30, r24
 638:	20 83       	st	Z, r18

0000063a <.Loc.5>:
}
 63a:	00 00       	nop
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	08 95       	ret

00000642 <opdracht2>:

void opdracht2(void) {
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	cd b7       	in	r28, 0x3d	; 61
 648:	de b7       	in	r29, 0x3e	; 62

0000064a <.Loc.7>:
    if(!(PINF & (1 << S3))) {
 64a:	8f e2       	ldi	r24, 0x2F	; 47
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	fc 01       	movw	r30, r24
 650:	80 81       	ld	r24, Z

00000652 <.Loc.8>:
 652:	88 2f       	mov	r24, r24
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	88 70       	andi	r24, 0x08	; 8
 658:	99 27       	eor	r25, r25

0000065a <.Loc.9>:
 65a:	00 97       	sbiw	r24, 0x00	; 0
 65c:	49 f4       	brne	.+18     	; 0x670 <.L4>

0000065e <.Loc.10>:
        PORTB &= ~(1 << D1);
 65e:	85 e2       	ldi	r24, 0x25	; 37
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	fc 01       	movw	r30, r24
 664:	20 81       	ld	r18, Z

00000666 <.Loc.11>:
 666:	85 e2       	ldi	r24, 0x25	; 37
 668:	90 e0       	ldi	r25, 0x00	; 0

0000066a <.Loc.12>:
 66a:	2f 77       	andi	r18, 0x7F	; 127
 66c:	fc 01       	movw	r30, r24
 66e:	20 83       	st	Z, r18

00000670 <.L4>:
    }
}
 670:	00 00       	nop
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	08 95       	ret

00000678 <init3>:

#define S1 PF1
#define S2 PF2
#define S3 PF3

void init3(void) {
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	cd b7       	in	r28, 0x3d	; 61
 67e:	de b7       	in	r29, 0x3e	; 62

00000680 <.Loc.1>:
    DDRB |= (1 << D1) | (1 << D2) | (1 << D4);
 680:	84 e2       	ldi	r24, 0x24	; 36
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	fc 01       	movw	r30, r24
 686:	20 81       	ld	r18, Z
 688:	84 e2       	ldi	r24, 0x24	; 36
 68a:	90 e0       	ldi	r25, 0x00	; 0

0000068c <.Loc.2>:
 68c:	20 6d       	ori	r18, 0xD0	; 208
 68e:	fc 01       	movw	r30, r24
 690:	20 83       	st	Z, r18

00000692 <.Loc.3>:
    PORTB |= (1 << D4);
 692:	85 e2       	ldi	r24, 0x25	; 37
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	fc 01       	movw	r30, r24
 698:	20 81       	ld	r18, Z
 69a:	85 e2       	ldi	r24, 0x25	; 37
 69c:	90 e0       	ldi	r25, 0x00	; 0

0000069e <.Loc.4>:
 69e:	20 61       	ori	r18, 0x10	; 16
 6a0:	fc 01       	movw	r30, r24
 6a2:	20 83       	st	Z, r18

000006a4 <.Loc.5>:
}
 6a4:	00 00       	nop
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	08 95       	ret

000006ac <opdracht3>:

void opdracht3(void) {
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
 6b0:	0f 92       	push	r0
 6b2:	0f 92       	push	r0
 6b4:	cd b7       	in	r28, 0x3d	; 61
 6b6:	de b7       	in	r29, 0x3e	; 62

000006b8 <.Loc.7>:
    int ingedrukt = 0;
 6b8:	1a 82       	std	Y+2, r1	; 0x02
 6ba:	19 82       	std	Y+1, r1	; 0x01

000006bc <.Loc.8>:
    while(!(PINF & (1 << S2))) {
 6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <.L3>

000006be <.L4>:
        ingedrukt = 1;
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	9a 83       	std	Y+2, r25	; 0x02
 6c4:	89 83       	std	Y+1, r24	; 0x01

000006c6 <.L3>:
    while(!(PINF & (1 << S2))) {
 6c6:	8f e2       	ldi	r24, 0x2F	; 47
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	fc 01       	movw	r30, r24
 6cc:	80 81       	ld	r24, Z

000006ce <.Loc.11>:
 6ce:	88 2f       	mov	r24, r24
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	84 70       	andi	r24, 0x04	; 4
 6d4:	99 27       	eor	r25, r25

000006d6 <.Loc.12>:
 6d6:	00 97       	sbiw	r24, 0x00	; 0
 6d8:	91 f3       	breq	.-28     	; 0x6be <.L4>

000006da <.Loc.13>:
    }
    if(ingedrukt) {
 6da:	89 81       	ldd	r24, Y+1	; 0x01
 6dc:	9a 81       	ldd	r25, Y+2	; 0x02
 6de:	00 97       	sbiw	r24, 0x00	; 0
 6e0:	51 f0       	breq	.+20     	; 0x6f6 <.L6>

000006e2 <.Loc.14>:
        PORTB ^= (1 << D2);
 6e2:	85 e2       	ldi	r24, 0x25	; 37
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	fc 01       	movw	r30, r24
 6e8:	30 81       	ld	r19, Z
 6ea:	85 e2       	ldi	r24, 0x25	; 37
 6ec:	90 e0       	ldi	r25, 0x00	; 0

000006ee <.Loc.15>:
 6ee:	20 e4       	ldi	r18, 0x40	; 64
 6f0:	23 27       	eor	r18, r19
 6f2:	fc 01       	movw	r30, r24
 6f4:	20 83       	st	Z, r18

000006f6 <.L6>:
    }
}
 6f6:	00 00       	nop
 6f8:	0f 90       	pop	r0
 6fa:	0f 90       	pop	r0
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	08 95       	ret

00000702 <init4>:
/**
Schrijf een programma dat gebruik maakt van timer 4 om via polling led D3 te laten
knipperen. De periodetijd moet 1.5 s bedragen.
*/

void init4 (void) {
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	cd b7       	in	r28, 0x3d	; 61
 708:	de b7       	in	r29, 0x3e	; 62

0000070a <.Loc.1>:
    initLed1();
 70a:	0e 94 8d 03 	call	0x71a	; 0x71a <initLed1>

0000070e <.Loc.2>:
    initTimer1();
 70e:	0e 94 9e 03 	call	0x73c	; 0x73c <initTimer1>

00000712 <.Loc.3>:
}
 712:	00 00       	nop
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	08 95       	ret

0000071a <initLed1>:

void initLed1(void) {
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	cd b7       	in	r28, 0x3d	; 61
 720:	de b7       	in	r29, 0x3e	; 62

00000722 <.Loc.5>:
    DDRB |= (1 << D3);
 722:	84 e2       	ldi	r24, 0x24	; 36
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	fc 01       	movw	r30, r24
 728:	20 81       	ld	r18, Z
 72a:	84 e2       	ldi	r24, 0x24	; 36
 72c:	90 e0       	ldi	r25, 0x00	; 0

0000072e <.Loc.6>:
 72e:	20 62       	ori	r18, 0x20	; 32
 730:	fc 01       	movw	r30, r24
 732:	20 83       	st	Z, r18

00000734 <.Loc.7>:
}
 734:	00 00       	nop
 736:	df 91       	pop	r29
 738:	cf 91       	pop	r28
 73a:	08 95       	ret

0000073c <initTimer1>:

void initTimer1(void) {
 73c:	cf 93       	push	r28
 73e:	df 93       	push	r29
 740:	cd b7       	in	r28, 0x3d	; 61
 742:	de b7       	in	r29, 0x3e	; 62

00000744 <.Loc.9>:
    TCCR4A = 0;
 744:	80 ea       	ldi	r24, 0xA0	; 160
 746:	90 e0       	ldi	r25, 0x00	; 0

00000748 <.Loc.10>:
 748:	fc 01       	movw	r30, r24
 74a:	10 82       	st	Z, r1

0000074c <.Loc.11>:
    TCCR4B = (1 << CS42) | (0 << CS41) | (0 >> CS40);
 74c:	81 ea       	ldi	r24, 0xA1	; 161
 74e:	90 e0       	ldi	r25, 0x00	; 0

00000750 <.Loc.12>:
 750:	24 e0       	ldi	r18, 0x04	; 4
 752:	fc 01       	movw	r30, r24
 754:	20 83       	st	Z, r18

00000756 <.Loc.13>:
    TCCR4C = 0;
 756:	82 ea       	ldi	r24, 0xA2	; 162
 758:	90 e0       	ldi	r25, 0x00	; 0

0000075a <.Loc.14>:
 75a:	fc 01       	movw	r30, r24
 75c:	10 82       	st	Z, r1

0000075e <.Loc.15>:

    TCNT4 = TCNT_INIT;
 75e:	84 ea       	ldi	r24, 0xA4	; 164
 760:	90 e0       	ldi	r25, 0x00	; 0

00000762 <.Loc.16>:
 762:	2d e1       	ldi	r18, 0x1D	; 29
 764:	38 e4       	ldi	r19, 0x48	; 72
 766:	fc 01       	movw	r30, r24
 768:	31 83       	std	Z+1, r19	; 0x01
 76a:	20 83       	st	Z, r18

0000076c <.Loc.17>:
}
 76c:	00 00       	nop
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	08 95       	ret

00000774 <opdracht4>:

void opdracht4(void) {
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62

0000077c <.Loc.19>:
    if(TIFR4 & (1 << TOV4)) {
 77c:	89 e3       	ldi	r24, 0x39	; 57
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	fc 01       	movw	r30, r24
 782:	80 81       	ld	r24, Z

00000784 <.Loc.20>:
 784:	88 2f       	mov	r24, r24
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	81 70       	andi	r24, 0x01	; 1
 78a:	99 27       	eor	r25, r25

0000078c <.Loc.21>:
 78c:	00 97       	sbiw	r24, 0x00	; 0
 78e:	d1 f0       	breq	.+52     	; 0x7c4 <.L6>

00000790 <.Loc.22>:
        PORTB ^= (1 << D3);
 790:	85 e2       	ldi	r24, 0x25	; 37
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	fc 01       	movw	r30, r24
 796:	30 81       	ld	r19, Z
 798:	85 e2       	ldi	r24, 0x25	; 37
 79a:	90 e0       	ldi	r25, 0x00	; 0

0000079c <.Loc.23>:
 79c:	20 e2       	ldi	r18, 0x20	; 32
 79e:	23 27       	eor	r18, r19
 7a0:	fc 01       	movw	r30, r24
 7a2:	20 83       	st	Z, r18

000007a4 <.Loc.24>:
        TIFR4 |= (1 >> TOV4);
 7a4:	89 e3       	ldi	r24, 0x39	; 57
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	fc 01       	movw	r30, r24
 7aa:	20 81       	ld	r18, Z
 7ac:	89 e3       	ldi	r24, 0x39	; 57
 7ae:	90 e0       	ldi	r25, 0x00	; 0

000007b0 <.Loc.25>:
 7b0:	21 60       	ori	r18, 0x01	; 1
 7b2:	fc 01       	movw	r30, r24
 7b4:	20 83       	st	Z, r18

000007b6 <.Loc.26>:
        TCNT4 = TCNT_INIT;
 7b6:	84 ea       	ldi	r24, 0xA4	; 164
 7b8:	90 e0       	ldi	r25, 0x00	; 0

000007ba <.Loc.27>:
 7ba:	2d e1       	ldi	r18, 0x1D	; 29
 7bc:	38 e4       	ldi	r19, 0x48	; 72
 7be:	fc 01       	movw	r30, r24
 7c0:	31 83       	std	Z+1, r19	; 0x01
 7c2:	20 83       	st	Z, r18

000007c4 <.L6>:
    }
}
 7c4:	00 00       	nop
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	08 95       	ret

000007cc <__umulhisi3>:
 7cc:	a2 9f       	mul	r26, r18

000007ce <.Loc.1>:
 7ce:	b0 01       	movw	r22, r0

000007d0 <.Loc.2>:
 7d0:	b3 9f       	mul	r27, r19

000007d2 <.Loc.3>:
 7d2:	c0 01       	movw	r24, r0

000007d4 <.Loc.4>:
 7d4:	a3 9f       	mul	r26, r19

000007d6 <.Loc.5>:
 7d6:	70 0d       	add	r23, r0

000007d8 <.Loc.6>:
 7d8:	81 1d       	adc	r24, r1

000007da <.Loc.7>:
 7da:	11 24       	eor	r1, r1

000007dc <.Loc.8>:
 7dc:	91 1d       	adc	r25, r1

000007de <.Loc.9>:
 7de:	b2 9f       	mul	r27, r18

000007e0 <.Loc.10>:
 7e0:	70 0d       	add	r23, r0

000007e2 <.Loc.11>:
 7e2:	81 1d       	adc	r24, r1

000007e4 <.Loc.12>:
 7e4:	11 24       	eor	r1, r1

000007e6 <.Loc.13>:
 7e6:	91 1d       	adc	r25, r1

000007e8 <.Loc.14>:
 7e8:	08 95       	ret

000007ea <__muluhisi3>:
 7ea:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__umulhisi3>

000007ee <.Loc.1>:
 7ee:	a5 9f       	mul	r26, r21

000007f0 <.Loc.2>:
 7f0:	90 0d       	add	r25, r0

000007f2 <.Loc.3>:
 7f2:	b4 9f       	mul	r27, r20

000007f4 <.Loc.4>:
 7f4:	90 0d       	add	r25, r0

000007f6 <.Loc.5>:
 7f6:	a4 9f       	mul	r26, r20

000007f8 <.Loc.6>:
 7f8:	80 0d       	add	r24, r0

000007fa <.Loc.7>:
 7fa:	91 1d       	adc	r25, r1

000007fc <.Loc.8>:
 7fc:	11 24       	eor	r1, r1

000007fe <.Loc.9>:
 7fe:	08 95       	ret

00000800 <__cmpsf2>:
 800:	0e 94 34 04 	call	0x868	; 0x868 <__fp_cmp>
 804:	08 f4       	brcc	.+2      	; 0x808 <.L1^B1>
 806:	81 e0       	ldi	r24, 0x01	; 1

00000808 <.L1^B1>:
 808:	08 95       	ret

0000080a <__fixunssfsi>:
 80a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_splitA>
 80e:	88 f0       	brcs	.+34     	; 0x832 <.L_err>
 810:	9f 57       	subi	r25, 0x7F	; 127
 812:	98 f0       	brcs	.+38     	; 0x83a <.L_zr>
 814:	b9 2f       	mov	r27, r25
 816:	99 27       	eor	r25, r25
 818:	b7 51       	subi	r27, 0x17	; 23
 81a:	b0 f0       	brcs	.+44     	; 0x848 <.L4^B1>
 81c:	e1 f0       	breq	.+56     	; 0x856 <.L_sign>

0000081e <.L1^B1>:
 81e:	66 0f       	add	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	88 1f       	adc	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	1a f0       	brmi	.+6      	; 0x82e <.L2^B1>
 828:	ba 95       	dec	r27
 82a:	c9 f7       	brne	.-14     	; 0x81e <.L1^B1>
 82c:	14 c0       	rjmp	.+40     	; 0x856 <.L_sign>

0000082e <.L2^B1>:
 82e:	b1 30       	cpi	r27, 0x01	; 1
 830:	91 f0       	breq	.+36     	; 0x856 <.L_sign>

00000832 <.L_err>:
 832:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__fp_zero>
 836:	b1 e0       	ldi	r27, 0x01	; 1
 838:	08 95       	ret

0000083a <.L_zr>:
 83a:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__fp_zero>

0000083e <.L3^B1>:
 83e:	67 2f       	mov	r22, r23
 840:	78 2f       	mov	r23, r24
 842:	88 27       	eor	r24, r24
 844:	b8 5f       	subi	r27, 0xF8	; 248
 846:	39 f0       	breq	.+14     	; 0x856 <.L_sign>

00000848 <.L4^B1>:
 848:	b9 3f       	cpi	r27, 0xF9	; 249
 84a:	cc f3       	brlt	.-14     	; 0x83e <.L3^B1>

0000084c <.L5^B1>:
 84c:	86 95       	lsr	r24
 84e:	77 95       	ror	r23
 850:	67 95       	ror	r22
 852:	b3 95       	inc	r27
 854:	d9 f7       	brne	.-10     	; 0x84c <.L5^B1>

00000856 <.L_sign>:
 856:	3e f4       	brtc	.+14     	; 0x866 <.L6^B1>
 858:	90 95       	com	r25
 85a:	80 95       	com	r24
 85c:	70 95       	com	r23
 85e:	61 95       	neg	r22
 860:	7f 4f       	sbci	r23, 0xFF	; 255
 862:	8f 4f       	sbci	r24, 0xFF	; 255
 864:	9f 4f       	sbci	r25, 0xFF	; 255

00000866 <.L6^B1>:
 866:	08 95       	ret

00000868 <__fp_cmp>:
 868:	99 0f       	add	r25, r25
 86a:	00 08       	sbc	r0, r0
 86c:	55 0f       	add	r21, r21
 86e:	aa 0b       	sbc	r26, r26
 870:	e0 e8       	ldi	r30, 0x80	; 128
 872:	fe ef       	ldi	r31, 0xFE	; 254
 874:	16 16       	cp	r1, r22
 876:	17 06       	cpc	r1, r23
 878:	e8 07       	cpc	r30, r24
 87a:	f9 07       	cpc	r31, r25
 87c:	c0 f0       	brcs	.+48     	; 0x8ae <.L9^B1>
 87e:	12 16       	cp	r1, r18
 880:	13 06       	cpc	r1, r19
 882:	e4 07       	cpc	r30, r20
 884:	f5 07       	cpc	r31, r21
 886:	98 f0       	brcs	.+38     	; 0x8ae <.L9^B1>
 888:	62 1b       	sub	r22, r18
 88a:	73 0b       	sbc	r23, r19
 88c:	84 0b       	sbc	r24, r20
 88e:	95 0b       	sbc	r25, r21
 890:	39 f4       	brne	.+14     	; 0x8a0 <.L1^B1>
 892:	0a 26       	eor	r0, r26
 894:	61 f0       	breq	.+24     	; 0x8ae <.L9^B1>
 896:	23 2b       	or	r18, r19
 898:	24 2b       	or	r18, r20
 89a:	25 2b       	or	r18, r21
 89c:	21 f4       	brne	.+8      	; 0x8a6 <.L2^B1>
 89e:	08 95       	ret

000008a0 <.L1^B1>:
 8a0:	0a 26       	eor	r0, r26
 8a2:	09 f4       	brne	.+2      	; 0x8a6 <.L2^B1>
 8a4:	a1 40       	sbci	r26, 0x01	; 1

000008a6 <.L2^B1>:
 8a6:	a6 95       	lsr	r26
 8a8:	8f ef       	ldi	r24, 0xFF	; 255
 8aa:	81 1d       	adc	r24, r1
 8ac:	81 1d       	adc	r24, r1

000008ae <.L9^B1>:
 8ae:	08 95       	ret

000008b0 <__fp_split3>:
 8b0:	57 fd       	sbrc	r21, 7
 8b2:	90 58       	subi	r25, 0x80	; 128
 8b4:	44 0f       	add	r20, r20
 8b6:	55 1f       	adc	r21, r21
 8b8:	59 f0       	breq	.+22     	; 0x8d0 <.L4^B1>
 8ba:	5f 3f       	cpi	r21, 0xFF	; 255
 8bc:	71 f0       	breq	.+28     	; 0x8da <.L5^B1>

000008be <.L1^B1>:
 8be:	47 95       	ror	r20

000008c0 <__fp_splitA>:
 8c0:	88 0f       	add	r24, r24
 8c2:	97 fb       	bst	r25, 7
 8c4:	99 1f       	adc	r25, r25
 8c6:	61 f0       	breq	.+24     	; 0x8e0 <.L6^B1>
 8c8:	9f 3f       	cpi	r25, 0xFF	; 255
 8ca:	79 f0       	breq	.+30     	; 0x8ea <.L7^B1>

000008cc <.L3^B1>:
 8cc:	87 95       	ror	r24
 8ce:	08 95       	ret

000008d0 <.L4^B1>:
 8d0:	12 16       	cp	r1, r18
 8d2:	13 06       	cpc	r1, r19
 8d4:	14 06       	cpc	r1, r20
 8d6:	55 1f       	adc	r21, r21
 8d8:	f2 cf       	rjmp	.-28     	; 0x8be <.L1^B1>

000008da <.L5^B1>:
 8da:	46 95       	lsr	r20
 8dc:	f1 df       	rcall	.-30     	; 0x8c0 <__fp_splitA>
 8de:	08 c0       	rjmp	.+16     	; 0x8f0 <.L8^B1>

000008e0 <.L6^B1>:
 8e0:	16 16       	cp	r1, r22
 8e2:	17 06       	cpc	r1, r23
 8e4:	18 06       	cpc	r1, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	f1 cf       	rjmp	.-30     	; 0x8cc <.L3^B1>

000008ea <.L7^B1>:
 8ea:	86 95       	lsr	r24
 8ec:	71 05       	cpc	r23, r1
 8ee:	61 05       	cpc	r22, r1

000008f0 <.L8^B1>:
 8f0:	08 94       	sec
 8f2:	08 95       	ret

000008f4 <__fp_zero>:
 8f4:	e8 94       	clt

000008f6 <__fp_szero>:
 8f6:	bb 27       	eor	r27, r27
 8f8:	66 27       	eor	r22, r22
 8fa:	77 27       	eor	r23, r23
 8fc:	cb 01       	movw	r24, r22
 8fe:	97 f9       	bld	r25, 7
 900:	08 95       	ret

00000902 <__gesf2>:
 902:	0e 94 34 04 	call	0x868	; 0x868 <__fp_cmp>
 906:	08 f4       	brcc	.+2      	; 0x90a <.L1^B1>
 908:	8f ef       	ldi	r24, 0xFF	; 255

0000090a <.L1^B1>:
 90a:	08 95       	ret

0000090c <__mulsf3>:
 90c:	0e 94 99 04 	call	0x932	; 0x932 <__mulsf3x>
 910:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_round>

00000914 <.L^B1>:
 914:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fp_pscA>
 918:	38 f0       	brcs	.+14     	; 0x928 <.L1^B1>
 91a:	0e 94 03 05 	call	0xa06	; 0xa06 <__fp_pscB>
 91e:	20 f0       	brcs	.+8      	; 0x928 <.L1^B1>
 920:	95 23       	and	r25, r21
 922:	11 f0       	breq	.+4      	; 0x928 <.L1^B1>
 924:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__fp_inf>

00000928 <.L1^B1>:
 928:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__fp_nan>

0000092c <.L2^B1>:
 92c:	11 24       	eor	r1, r1
 92e:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_szero>

00000932 <__mulsf3x>:
 932:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fp_split3>
 936:	70 f3       	brcs	.-36     	; 0x914 <.L^B1>

00000938 <__mulsf3_pse>:
 938:	95 9f       	mul	r25, r21
 93a:	c1 f3       	breq	.-16     	; 0x92c <.L2^B1>
 93c:	95 0f       	add	r25, r21
 93e:	50 e0       	ldi	r21, 0x00	; 0
 940:	55 1f       	adc	r21, r21
 942:	62 9f       	mul	r22, r18
 944:	f0 01       	movw	r30, r0
 946:	72 9f       	mul	r23, r18
 948:	bb 27       	eor	r27, r27
 94a:	f0 0d       	add	r31, r0
 94c:	b1 1d       	adc	r27, r1
 94e:	63 9f       	mul	r22, r19
 950:	aa 27       	eor	r26, r26
 952:	f0 0d       	add	r31, r0
 954:	b1 1d       	adc	r27, r1
 956:	aa 1f       	adc	r26, r26
 958:	64 9f       	mul	r22, r20
 95a:	66 27       	eor	r22, r22
 95c:	b0 0d       	add	r27, r0
 95e:	a1 1d       	adc	r26, r1
 960:	66 1f       	adc	r22, r22
 962:	82 9f       	mul	r24, r18
 964:	22 27       	eor	r18, r18
 966:	b0 0d       	add	r27, r0
 968:	a1 1d       	adc	r26, r1
 96a:	62 1f       	adc	r22, r18
 96c:	73 9f       	mul	r23, r19
 96e:	b0 0d       	add	r27, r0
 970:	a1 1d       	adc	r26, r1
 972:	62 1f       	adc	r22, r18
 974:	83 9f       	mul	r24, r19
 976:	a0 0d       	add	r26, r0
 978:	61 1d       	adc	r22, r1
 97a:	22 1f       	adc	r18, r18
 97c:	74 9f       	mul	r23, r20
 97e:	33 27       	eor	r19, r19
 980:	a0 0d       	add	r26, r0
 982:	61 1d       	adc	r22, r1
 984:	23 1f       	adc	r18, r19
 986:	84 9f       	mul	r24, r20
 988:	60 0d       	add	r22, r0
 98a:	21 1d       	adc	r18, r1
 98c:	82 2f       	mov	r24, r18
 98e:	76 2f       	mov	r23, r22
 990:	6a 2f       	mov	r22, r26
 992:	11 24       	eor	r1, r1
 994:	9f 57       	subi	r25, 0x7F	; 127
 996:	50 40       	sbci	r21, 0x00	; 0
 998:	9a f0       	brmi	.+38     	; 0x9c0 <.L13^B1>
 99a:	f1 f0       	breq	.+60     	; 0x9d8 <.L15^B1>

0000099c <.L10^B1>:
 99c:	88 23       	and	r24, r24
 99e:	4a f0       	brmi	.+18     	; 0x9b2 <.L11^B1>
 9a0:	ee 0f       	add	r30, r30
 9a2:	ff 1f       	adc	r31, r31
 9a4:	bb 1f       	adc	r27, r27
 9a6:	66 1f       	adc	r22, r22
 9a8:	77 1f       	adc	r23, r23
 9aa:	88 1f       	adc	r24, r24
 9ac:	91 50       	subi	r25, 0x01	; 1
 9ae:	50 40       	sbci	r21, 0x00	; 0
 9b0:	a9 f7       	brne	.-22     	; 0x99c <.L10^B1>

000009b2 <.L11^B1>:
 9b2:	9e 3f       	cpi	r25, 0xFE	; 254
 9b4:	51 05       	cpc	r21, r1
 9b6:	80 f0       	brcs	.+32     	; 0x9d8 <.L15^B1>
 9b8:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__fp_inf>

000009bc <.L12^B1>:
 9bc:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_szero>

000009c0 <.L13^B1>:
 9c0:	5f 3f       	cpi	r21, 0xFF	; 255
 9c2:	e4 f3       	brlt	.-8      	; 0x9bc <.L12^B1>
 9c4:	98 3e       	cpi	r25, 0xE8	; 232
 9c6:	d4 f3       	brlt	.-12     	; 0x9bc <.L12^B1>

000009c8 <.L14^B1>:
 9c8:	86 95       	lsr	r24
 9ca:	77 95       	ror	r23
 9cc:	67 95       	ror	r22
 9ce:	b7 95       	ror	r27
 9d0:	f7 95       	ror	r31
 9d2:	e7 95       	ror	r30
 9d4:	9f 5f       	subi	r25, 0xFF	; 255
 9d6:	c1 f7       	brne	.-16     	; 0x9c8 <.L14^B1>

000009d8 <.L15^B1>:
 9d8:	fe 2b       	or	r31, r30
 9da:	88 0f       	add	r24, r24
 9dc:	91 1d       	adc	r25, r1
 9de:	96 95       	lsr	r25
 9e0:	87 95       	ror	r24
 9e2:	97 f9       	bld	r25, 7
 9e4:	08 95       	ret

000009e6 <__fp_inf>:
 9e6:	97 f9       	bld	r25, 7
 9e8:	9f 67       	ori	r25, 0x7F	; 127
 9ea:	80 e8       	ldi	r24, 0x80	; 128
 9ec:	70 e0       	ldi	r23, 0x00	; 0
 9ee:	60 e0       	ldi	r22, 0x00	; 0
 9f0:	08 95       	ret

000009f2 <__fp_nan>:
 9f2:	9f ef       	ldi	r25, 0xFF	; 255
 9f4:	80 ec       	ldi	r24, 0xC0	; 192
 9f6:	08 95       	ret

000009f8 <__fp_pscA>:
 9f8:	00 24       	eor	r0, r0
 9fa:	0a 94       	dec	r0
 9fc:	16 16       	cp	r1, r22
 9fe:	17 06       	cpc	r1, r23
 a00:	18 06       	cpc	r1, r24
 a02:	09 06       	cpc	r0, r25
 a04:	08 95       	ret

00000a06 <__fp_pscB>:
 a06:	00 24       	eor	r0, r0
 a08:	0a 94       	dec	r0
 a0a:	12 16       	cp	r1, r18
 a0c:	13 06       	cpc	r1, r19
 a0e:	14 06       	cpc	r1, r20
 a10:	05 06       	cpc	r0, r21
 a12:	08 95       	ret

00000a14 <__fp_round>:
 a14:	09 2e       	mov	r0, r25
 a16:	03 94       	inc	r0
 a18:	00 0c       	add	r0, r0
 a1a:	11 f4       	brne	.+4      	; 0xa20 <.L1^B1>
 a1c:	88 23       	and	r24, r24
 a1e:	52 f0       	brmi	.+20     	; 0xa34 <.L3^B1>

00000a20 <.L1^B1>:
 a20:	bb 0f       	add	r27, r27
 a22:	40 f4       	brcc	.+16     	; 0xa34 <.L3^B1>
 a24:	bf 2b       	or	r27, r31
 a26:	11 f4       	brne	.+4      	; 0xa2c <.L2^B1>
 a28:	60 ff       	sbrs	r22, 0
 a2a:	04 c0       	rjmp	.+8      	; 0xa34 <.L3^B1>

00000a2c <.L2^B1>:
 a2c:	6f 5f       	subi	r22, 0xFF	; 255
 a2e:	7f 4f       	sbci	r23, 0xFF	; 255
 a30:	8f 4f       	sbci	r24, 0xFF	; 255
 a32:	9f 4f       	sbci	r25, 0xFF	; 255

00000a34 <.L3^B1>:
 a34:	08 95       	ret

00000a36 <_exit>:
 a36:	f8 94       	cli

00000a38 <__stop_program>:
 a38:	ff cf       	rjmp	.-2      	; 0xa38 <__stop_program>
