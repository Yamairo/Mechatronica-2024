
bin\Debug\LimitSwitch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000007cc  00000880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007cc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800200  00800200  00000880  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000883  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000898  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000098  00000000  00000000  000008d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00000ffa  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000df8  00000000  00000000  0000196a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   0000050d  00000000  00000000  00002762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000088  00000000  00000000  00002c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000005a2  00000000  00000000  00002cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 0000016b  00000000  00000000  0000329a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.Loc.5>

000000fc <.Loc.4>:
  fc:	1d 92       	st	X+, r1

000000fe <.Loc.5>:
  fe:	a3 30       	cpi	r26, 0x03	; 3

00000100 <.Loc.6>:
 100:	b2 07       	cpc	r27, r18

00000102 <.Loc.7>:
 102:	e1 f7       	brne	.-8      	; 0xfc <.Loc.4>

00000104 <L0^A>:
 104:	0e 94 b0 01 	call	0x360	; 0x360 <main>
 108:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <isLimitSwitchPressed>:
#include "LimitSwitch.h"
#include <util/delay.h> // For debouncing delay

int isLimitSwitchPressed(uint8_t inputPin, volatile uint8_t *inputPort, volatile uint8_t *pinReg) {
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	00 d0       	rcall	.+0      	; 0x116 <L0^A>

00000116 <L0^A>:
 116:	0f 92       	push	r0
 118:	0f 92       	push	r0
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	7b 83       	std	Y+3, r23	; 0x03
 122:	6a 83       	std	Y+2, r22	; 0x02
 124:	5d 83       	std	Y+5, r21	; 0x05
 126:	4c 83       	std	Y+4, r20	; 0x04

00000128 <.Loc.1>:
    // Configure the input pin with pull-up resistor
    *inputPort |= (1 << inputPin); // Enable pull-up resistor
 128:	8a 81       	ldd	r24, Y+2	; 0x02
 12a:	9b 81       	ldd	r25, Y+3	; 0x03
 12c:	fc 01       	movw	r30, r24
 12e:	80 81       	ld	r24, Z
 130:	48 2f       	mov	r20, r24

00000132 <.Loc.2>:
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	28 2f       	mov	r18, r24
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <.L2^B1>

0000013e <.L1^B1>:
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25

00000142 <.L2^B1>:
 142:	2a 95       	dec	r18
 144:	e2 f7       	brpl	.-8      	; 0x13e <.L1^B1>

00000146 <.Loc.3>:
 146:	84 2b       	or	r24, r20
 148:	28 2f       	mov	r18, r24
 14a:	8a 81       	ldd	r24, Y+2	; 0x02
 14c:	9b 81       	ldd	r25, Y+3	; 0x03
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18

00000152 <.Loc.4>:

    // Check if the button is pressed
    if (!(*pinReg & (1 << inputPin))) { // Input pin LOW (button pressed)
 152:	8c 81       	ldd	r24, Y+4	; 0x04
 154:	9d 81       	ldd	r25, Y+5	; 0x05
 156:	fc 01       	movw	r30, r24
 158:	80 81       	ld	r24, Z
 15a:	88 2f       	mov	r24, r24
 15c:	90 e0       	ldi	r25, 0x00	; 0

0000015e <.Loc.5>:
 15e:	29 81       	ldd	r18, Y+1	; 0x01
 160:	22 2f       	mov	r18, r18
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	02 2e       	mov	r0, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <.L2^B2>

00000168 <.L1^B2>:
 168:	95 95       	asr	r25
 16a:	87 95       	ror	r24

0000016c <.L2^B2>:
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <.L1^B2>
 170:	81 70       	andi	r24, 0x01	; 1
 172:	99 27       	eor	r25, r25

00000174 <.Loc.6>:
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	19 f4       	brne	.+6      	; 0x17e <.L2>

00000178 <.Loc.7>:
        return 1; // Button is pressed
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <.L3>

0000017e <.L2>:
    } else { // Input pin HIGH (button not pressed)
        return 0; // Button is not pressed
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0

00000182 <.L3>:
    }
}
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <countLimitSwitchPresses>:

uint16_t countLimitSwitchPresses(uint8_t inputPin, volatile uint8_t *inputPort, volatile uint8_t *pinReg) {
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	a7 97       	sbiw	r28, 0x27	; 39
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
 1a6:	8f 87       	std	Y+15, r24	; 0x0f
 1a8:	79 8b       	std	Y+17, r23	; 0x11
 1aa:	68 8b       	std	Y+16, r22	; 0x10
 1ac:	5b 8b       	std	Y+19, r21	; 0x13
 1ae:	4a 8b       	std	Y+18, r20	; 0x12

000001b0 <.Loc.11>:
    static uint16_t pressCount = 0; // Persistent count of presses
    static uint8_t wasPressed = 0; // Tracks the previous state of the button

    // Configure the input pin with pull-up resistor
    *inputPort |= (1 << inputPin); // Enable pull-up resistor
 1b0:	88 89       	ldd	r24, Y+16	; 0x10
 1b2:	99 89       	ldd	r25, Y+17	; 0x11
 1b4:	dc 01       	movw	r26, r24
 1b6:	8c 91       	ld	r24, X
 1b8:	48 2f       	mov	r20, r24

000001ba <.Loc.12>:
 1ba:	8f 85       	ldd	r24, Y+15	; 0x0f
 1bc:	28 2f       	mov	r18, r24
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <.L2^B3>

000001c6 <.L1^B3>:
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25

000001ca <.L2^B3>:
 1ca:	2a 95       	dec	r18
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <.L1^B3>

000001ce <.Loc.13>:
 1ce:	84 2b       	or	r24, r20
 1d0:	28 2f       	mov	r18, r24
 1d2:	88 89       	ldd	r24, Y+16	; 0x10
 1d4:	99 89       	ldd	r25, Y+17	; 0x11
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18

000001da <.Loc.14>:

    // Check if the button is currently pressed
    if (!(*pinReg & (1 << inputPin))) { // Button is pressed
 1da:	8a 89       	ldd	r24, Y+18	; 0x12
 1dc:	9b 89       	ldd	r25, Y+19	; 0x13
 1de:	dc 01       	movw	r26, r24
 1e0:	8c 91       	ld	r24, X
 1e2:	88 2f       	mov	r24, r24
 1e4:	90 e0       	ldi	r25, 0x00	; 0

000001e6 <.Loc.15>:
 1e6:	2f 85       	ldd	r18, Y+15	; 0x0f
 1e8:	22 2f       	mov	r18, r18
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	02 2e       	mov	r0, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <.L2^B4>

000001f0 <.L1^B4>:
 1f0:	95 95       	asr	r25
 1f2:	87 95       	ror	r24

000001f4 <.L2^B4>:
 1f4:	0a 94       	dec	r0
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <.L1^B4>
 1f8:	81 70       	andi	r24, 0x01	; 1
 1fa:	99 27       	eor	r25, r25

000001fc <.Loc.16>:
 1fc:	00 97       	sbiw	r24, 0x00	; 0
 1fe:	09 f0       	breq	.+2      	; 0x202 <.Loc.17>

00000200 <L0^A>:
 200:	a0 c0       	rjmp	.+320    	; 0x342 <.L5>

00000202 <.Loc.17>:
        if (!wasPressed) { // Detect transition from not pressed to pressed
 202:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <wasPressed.1>

00000206 <.Loc.18>:
 206:	88 23       	and	r24, r24
 208:	09 f0       	breq	.+2      	; 0x20c <.Loc.19>

0000020a <L0^A>:
 20a:	9d c0       	rjmp	.+314    	; 0x346 <.L6>

0000020c <.Loc.19>:
            pressCount++;  // Increment the press count
 20c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pressCount.0>
 210:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pressCount.0+0x1>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <pressCount.0+0x1>
 21a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <pressCount.0>

0000021e <.Loc.20>:
            wasPressed = 1; // Mark the button as pressed
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <wasPressed.1>
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	a8 e4       	ldi	r26, 0x48	; 72
 22a:	b2 e4       	ldi	r27, 0x42	; 66
 22c:	89 83       	std	Y+1, r24	; 0x01
 22e:	9a 83       	std	Y+2, r25	; 0x02
 230:	ab 83       	std	Y+3, r26	; 0x03
 232:	bc 83       	std	Y+4, r27	; 0x04

00000234 <.LBB12>:

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	4a e7       	ldi	r20, 0x7A	; 122
 23a:	55 e4       	ldi	r21, 0x45	; 69
 23c:	69 81       	ldd	r22, Y+1	; 0x01
 23e:	7a 81       	ldd	r23, Y+2	; 0x02
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	9c 81       	ldd	r25, Y+4	; 0x04
 244:	0e 94 4f 03 	call	0x69e	; 0x69e <__mulsf3>
 248:	68 8f       	std	Y+24, r22	; 0x18
 24a:	79 8f       	std	Y+25, r23	; 0x19
 24c:	8a 8f       	std	Y+26, r24	; 0x1a
 24e:	9b 8f       	std	Y+27, r25	; 0x1b
 250:	88 8d       	ldd	r24, Y+24	; 0x18
 252:	99 8d       	ldd	r25, Y+25	; 0x19
 254:	aa 8d       	ldd	r26, Y+26	; 0x1a
 256:	bb 8d       	ldd	r27, Y+27	; 0x1b
 258:	8d 83       	std	Y+5, r24	; 0x05
 25a:	9e 83       	std	Y+6, r25	; 0x06
 25c:	af 83       	std	Y+7, r26	; 0x07
 25e:	b8 87       	std	Y+8, r27	; 0x08

00000260 <.Loc.22>:
	if (__tmp < 1.0)
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	40 e8       	ldi	r20, 0x80	; 128
 266:	5f e3       	ldi	r21, 0x3F	; 63
 268:	6d 81       	ldd	r22, Y+5	; 0x05
 26a:	7e 81       	ldd	r23, Y+6	; 0x06
 26c:	8f 81       	ldd	r24, Y+7	; 0x07
 26e:	98 85       	ldd	r25, Y+8	; 0x08
 270:	0e 94 c9 02 	call	0x592	; 0x592 <__cmpsf2>
 274:	88 23       	and	r24, r24
 276:	2c f4       	brge	.+10     	; 0x282 <.L18>

00000278 <.Loc.23>:
		__ticks = 1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	9a 87       	std	Y+10, r25	; 0x0a
 27e:	89 87       	std	Y+9, r24	; 0x09
 280:	55 c0       	rjmp	.+170    	; 0x32c <.L9>

00000282 <.L18>:
	else if (__tmp > 65535)
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	3f ef       	ldi	r19, 0xFF	; 255
 286:	4f e7       	ldi	r20, 0x7F	; 127
 288:	57 e4       	ldi	r21, 0x47	; 71
 28a:	6d 81       	ldd	r22, Y+5	; 0x05
 28c:	7e 81       	ldd	r23, Y+6	; 0x06
 28e:	8f 81       	ldd	r24, Y+7	; 0x07
 290:	98 85       	ldd	r25, Y+8	; 0x08
 292:	0e 94 4a 03 	call	0x694	; 0x694 <__gesf2>
 296:	88 23       	and	r24, r24
 298:	d9 f1       	breq	.+118    	; 0x310 <.L19>
 29a:	d4 f1       	brlt	.+116    	; 0x310 <.L19>

0000029c <.Loc.25>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	40 e2       	ldi	r20, 0x20	; 32
 2a2:	51 e4       	ldi	r21, 0x41	; 65
 2a4:	69 81       	ldd	r22, Y+1	; 0x01
 2a6:	7a 81       	ldd	r23, Y+2	; 0x02
 2a8:	8b 81       	ldd	r24, Y+3	; 0x03
 2aa:	9c 81       	ldd	r25, Y+4	; 0x04
 2ac:	0e 94 4f 03 	call	0x69e	; 0x69e <__mulsf3>
 2b0:	6c 8f       	std	Y+28, r22	; 0x1c
 2b2:	7d 8f       	std	Y+29, r23	; 0x1d
 2b4:	8e 8f       	std	Y+30, r24	; 0x1e
 2b6:	9f 8f       	std	Y+31, r25	; 0x1f
 2b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2ba:	9d 8d       	ldd	r25, Y+29	; 0x1d
 2bc:	ae 8d       	ldd	r26, Y+30	; 0x1e
 2be:	bf 8d       	ldd	r27, Y+31	; 0x1f
 2c0:	8c 8b       	std	Y+20, r24	; 0x14
 2c2:	9d 8b       	std	Y+21, r25	; 0x15
 2c4:	ae 8b       	std	Y+22, r26	; 0x16
 2c6:	bf 8b       	std	Y+23, r27	; 0x17

000002c8 <.Loc.26>:
 2c8:	6c 89       	ldd	r22, Y+20	; 0x14
 2ca:	7d 89       	ldd	r23, Y+21	; 0x15
 2cc:	8e 89       	ldd	r24, Y+22	; 0x16
 2ce:	9f 89       	ldd	r25, Y+23	; 0x17
 2d0:	0e 94 ce 02 	call	0x59c	; 0x59c <__fixunssfsi>
 2d4:	68 a3       	std	Y+32, r22	; 0x20
 2d6:	79 a3       	std	Y+33, r23	; 0x21
 2d8:	8a a3       	std	Y+34, r24	; 0x22
 2da:	9b a3       	std	Y+35, r25	; 0x23
 2dc:	a8 a1       	ldd	r26, Y+32	; 0x20
 2de:	b9 a1       	ldd	r27, Y+33	; 0x21
 2e0:	ba 87       	std	Y+10, r27	; 0x0a
 2e2:	a9 87       	std	Y+9, r26	; 0x09

000002e4 <.Loc.27>:
		while(__ticks)
 2e4:	10 c0       	rjmp	.+32     	; 0x306 <.L12>

000002e6 <.L13>:
 2e6:	80 e9       	ldi	r24, 0x90	; 144
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	9c 87       	std	Y+12, r25	; 0x0c
 2ec:	8b 87       	std	Y+11, r24	; 0x0b

000002ee <.LBB14>:
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
 2ee:	8b 85       	ldd	r24, Y+11	; 0x0b
 2f0:	9c 85       	ldd	r25, Y+12	; 0x0c

000002f2 <.L1^B5>:
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <.L1^B5>
 2f6:	9c 87       	std	Y+12, r25	; 0x0c
 2f8:	8b 87       	std	Y+11, r24	; 0x0b

000002fa <.Loc.29>:
	...

000002fc <.LBE14>:
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2fc:	89 85       	ldd	r24, Y+9	; 0x09
 2fe:	9a 85       	ldd	r25, Y+10	; 0x0a
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	9a 87       	std	Y+10, r25	; 0x0a
 304:	89 87       	std	Y+9, r24	; 0x09

00000306 <.L12>:
		while(__ticks)
 306:	89 85       	ldd	r24, Y+9	; 0x09
 308:	9a 85       	ldd	r25, Y+10	; 0x0a
 30a:	00 97       	sbiw	r24, 0x00	; 0
 30c:	61 f7       	brne	.-40     	; 0x2e6 <.L13>

0000030e <.Loc.32>:
		}
		return;
 30e:	1b c0       	rjmp	.+54     	; 0x346 <.L6>

00000310 <.L19>:
	}
	else
		__ticks = (uint16_t)__tmp;
 310:	6d 81       	ldd	r22, Y+5	; 0x05
 312:	7e 81       	ldd	r23, Y+6	; 0x06
 314:	8f 81       	ldd	r24, Y+7	; 0x07
 316:	98 85       	ldd	r25, Y+8	; 0x08
 318:	0e 94 ce 02 	call	0x59c	; 0x59c <__fixunssfsi>
 31c:	6c a3       	std	Y+36, r22	; 0x24
 31e:	7d a3       	std	Y+37, r23	; 0x25
 320:	8e a3       	std	Y+38, r24	; 0x26
 322:	9f a3       	std	Y+39, r25	; 0x27
 324:	ec a1       	ldd	r30, Y+36	; 0x24
 326:	fd a1       	ldd	r31, Y+37	; 0x25
 328:	fa 87       	std	Y+10, r31	; 0x0a
 32a:	e9 87       	std	Y+9, r30	; 0x09

0000032c <.L9>:
 32c:	89 85       	ldd	r24, Y+9	; 0x09
 32e:	9a 85       	ldd	r25, Y+10	; 0x0a
 330:	9e 87       	std	Y+14, r25	; 0x0e
 332:	8d 87       	std	Y+13, r24	; 0x0d

00000334 <.LBB16>:
 334:	8d 85       	ldd	r24, Y+13	; 0x0d
 336:	9e 85       	ldd	r25, Y+14	; 0x0e

00000338 <.L1^B6>:
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <.L1^B6>
 33c:	9e 87       	std	Y+14, r25	; 0x0e
 33e:	8d 87       	std	Y+13, r24	; 0x0d

00000340 <.Loc.35>:
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
#endif /* __AVR_TINY__ */
}
 340:	02 c0       	rjmp	.+4      	; 0x346 <.L6>

00000342 <.L5>:
            _delay_ms(50);  // Simple debounce delay
        }
    } else { // Button is not pressed
        wasPressed = 0; // Reset the pressed state
 342:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <wasPressed.1>

00000346 <.L6>:
    }

    return pressCount;
 346:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pressCount.0>
 34a:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pressCount.0+0x1>

0000034e <.Loc.38>:
}
 34e:	a7 96       	adiw	r28, 0x27	; 39
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <main>:
#include "LimitSwitch.h"
#include <util/delay.h> // For simple delays

int main(void) {
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	a4 97       	sbiw	r28, 0x24	; 36
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61

00000374 <.Loc.1>:
    // Configure PB0 as input for the button
    DDRB &= ~(1 << PB0); // Set PB0 as input
 374:	84 e2       	ldi	r24, 0x24	; 36
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	dc 01       	movw	r26, r24
 37a:	2c 91       	ld	r18, X

0000037c <.Loc.2>:
 37c:	84 e2       	ldi	r24, 0x24	; 36
 37e:	90 e0       	ldi	r25, 0x00	; 0

00000380 <.Loc.3>:
 380:	2e 7f       	andi	r18, 0xFE	; 254
 382:	fc 01       	movw	r30, r24
 384:	20 83       	st	Z, r18

00000386 <.Loc.4>:

    // Configure PB4, PB5, PB6, and PB7 as outputs for LEDs
    DDRB |= (1 << PB4) | (1 << PB5) | (1 << PB6) | (1 << PB7);
 386:	84 e2       	ldi	r24, 0x24	; 36
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	dc 01       	movw	r26, r24
 38c:	2c 91       	ld	r18, X
 38e:	84 e2       	ldi	r24, 0x24	; 36
 390:	90 e0       	ldi	r25, 0x00	; 0

00000392 <.Loc.5>:
 392:	20 6f       	ori	r18, 0xF0	; 240
 394:	fc 01       	movw	r30, r24
 396:	20 83       	st	Z, r18

00000398 <.L18>:

    while (1) {
        // Get the press count
        uint16_t presses = countLimitSwitchPresses(PB0, &PORTB, &PINB);
 398:	43 e2       	ldi	r20, 0x23	; 35
 39a:	50 e0       	ldi	r21, 0x00	; 0
 39c:	65 e2       	ldi	r22, 0x25	; 37
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 c9 00 	call	0x192	; 0x192 <countLimitSwitchPresses>
 3a6:	9a 83       	std	Y+2, r25	; 0x02
 3a8:	89 83       	std	Y+1, r24	; 0x01

000003aa <.Loc.7>:

        // Display the press count on LEDs in binary
        if (presses & (1 << 0)) { PORTB |= (1 << PB4); } else { PORTB &= ~(1 << PB4); } // PB4 = Bit 0
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	9a 81       	ldd	r25, Y+2	; 0x02
 3ae:	81 70       	andi	r24, 0x01	; 1
 3b0:	99 27       	eor	r25, r25

000003b2 <.Loc.8>:
 3b2:	00 97       	sbiw	r24, 0x00	; 0
 3b4:	51 f0       	breq	.+20     	; 0x3ca <.L2>

000003b6 <.Loc.9>:
 3b6:	85 e2       	ldi	r24, 0x25	; 37
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	dc 01       	movw	r26, r24
 3bc:	2c 91       	ld	r18, X
 3be:	85 e2       	ldi	r24, 0x25	; 37
 3c0:	90 e0       	ldi	r25, 0x00	; 0

000003c2 <.Loc.10>:
 3c2:	20 61       	ori	r18, 0x10	; 16
 3c4:	fc 01       	movw	r30, r24
 3c6:	20 83       	st	Z, r18
 3c8:	09 c0       	rjmp	.+18     	; 0x3dc <.L3>

000003ca <.L2>:
 3ca:	85 e2       	ldi	r24, 0x25	; 37
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	dc 01       	movw	r26, r24
 3d0:	2c 91       	ld	r18, X

000003d2 <.Loc.12>:
 3d2:	85 e2       	ldi	r24, 0x25	; 37
 3d4:	90 e0       	ldi	r25, 0x00	; 0

000003d6 <.Loc.13>:
 3d6:	2f 7e       	andi	r18, 0xEF	; 239
 3d8:	fc 01       	movw	r30, r24
 3da:	20 83       	st	Z, r18

000003dc <.L3>:
        if (presses & (1 << 1)) { PORTB |= (1 << PB5); } else { PORTB &= ~(1 << PB5); } // PB5 = Bit 1
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	9a 81       	ldd	r25, Y+2	; 0x02
 3e0:	82 70       	andi	r24, 0x02	; 2
 3e2:	99 27       	eor	r25, r25

000003e4 <.Loc.15>:
 3e4:	00 97       	sbiw	r24, 0x00	; 0
 3e6:	51 f0       	breq	.+20     	; 0x3fc <.L4>

000003e8 <.Loc.16>:
 3e8:	85 e2       	ldi	r24, 0x25	; 37
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	dc 01       	movw	r26, r24
 3ee:	2c 91       	ld	r18, X
 3f0:	85 e2       	ldi	r24, 0x25	; 37
 3f2:	90 e0       	ldi	r25, 0x00	; 0

000003f4 <.Loc.17>:
 3f4:	20 62       	ori	r18, 0x20	; 32
 3f6:	fc 01       	movw	r30, r24
 3f8:	20 83       	st	Z, r18
 3fa:	09 c0       	rjmp	.+18     	; 0x40e <.L5>

000003fc <.L4>:
 3fc:	85 e2       	ldi	r24, 0x25	; 37
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	dc 01       	movw	r26, r24
 402:	2c 91       	ld	r18, X

00000404 <.Loc.19>:
 404:	85 e2       	ldi	r24, 0x25	; 37
 406:	90 e0       	ldi	r25, 0x00	; 0

00000408 <.Loc.20>:
 408:	2f 7d       	andi	r18, 0xDF	; 223
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18

0000040e <.L5>:
        if (presses & (1 << 2)) { PORTB |= (1 << PB6); } else { PORTB &= ~(1 << PB6); } // PB6 = Bit 2
 40e:	89 81       	ldd	r24, Y+1	; 0x01
 410:	9a 81       	ldd	r25, Y+2	; 0x02
 412:	84 70       	andi	r24, 0x04	; 4
 414:	99 27       	eor	r25, r25

00000416 <.Loc.22>:
 416:	00 97       	sbiw	r24, 0x00	; 0
 418:	51 f0       	breq	.+20     	; 0x42e <.L6>

0000041a <.Loc.23>:
 41a:	85 e2       	ldi	r24, 0x25	; 37
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	dc 01       	movw	r26, r24
 420:	2c 91       	ld	r18, X
 422:	85 e2       	ldi	r24, 0x25	; 37
 424:	90 e0       	ldi	r25, 0x00	; 0

00000426 <.Loc.24>:
 426:	20 64       	ori	r18, 0x40	; 64
 428:	fc 01       	movw	r30, r24
 42a:	20 83       	st	Z, r18
 42c:	09 c0       	rjmp	.+18     	; 0x440 <.L7>

0000042e <.L6>:
 42e:	85 e2       	ldi	r24, 0x25	; 37
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	dc 01       	movw	r26, r24
 434:	2c 91       	ld	r18, X

00000436 <.Loc.26>:
 436:	85 e2       	ldi	r24, 0x25	; 37
 438:	90 e0       	ldi	r25, 0x00	; 0

0000043a <.Loc.27>:
 43a:	2f 7b       	andi	r18, 0xBF	; 191
 43c:	fc 01       	movw	r30, r24
 43e:	20 83       	st	Z, r18

00000440 <.L7>:
        if (presses & (1 << 3)) { PORTB |= (1 << PB7); } else { PORTB &= ~(1 << PB7); } // PB7 = Bit 3
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	9a 81       	ldd	r25, Y+2	; 0x02
 444:	88 70       	andi	r24, 0x08	; 8
 446:	99 27       	eor	r25, r25

00000448 <.Loc.29>:
 448:	00 97       	sbiw	r24, 0x00	; 0
 44a:	51 f0       	breq	.+20     	; 0x460 <.L8>

0000044c <.Loc.30>:
 44c:	85 e2       	ldi	r24, 0x25	; 37
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	dc 01       	movw	r26, r24
 452:	2c 91       	ld	r18, X
 454:	85 e2       	ldi	r24, 0x25	; 37
 456:	90 e0       	ldi	r25, 0x00	; 0

00000458 <.Loc.31>:
 458:	20 68       	ori	r18, 0x80	; 128
 45a:	fc 01       	movw	r30, r24
 45c:	20 83       	st	Z, r18
 45e:	09 c0       	rjmp	.+18     	; 0x472 <.L9>

00000460 <.L8>:
 460:	85 e2       	ldi	r24, 0x25	; 37
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	dc 01       	movw	r26, r24
 466:	2c 91       	ld	r18, X

00000468 <.Loc.33>:
 468:	85 e2       	ldi	r24, 0x25	; 37
 46a:	90 e0       	ldi	r25, 0x00	; 0

0000046c <.Loc.34>:
 46c:	2f 77       	andi	r18, 0x7F	; 127
 46e:	fc 01       	movw	r30, r24
 470:	20 83       	st	Z, r18

00000472 <.L9>:
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	a0 e2       	ldi	r26, 0x20	; 32
 478:	b1 e4       	ldi	r27, 0x41	; 65
 47a:	8b 83       	std	Y+3, r24	; 0x03
 47c:	9c 83       	std	Y+4, r25	; 0x04
 47e:	ad 83       	std	Y+5, r26	; 0x05
 480:	be 83       	std	Y+6, r27	; 0x06

00000482 <.LBB14>:
	__tmp = ((F_CPU) / 4e3) * __ms;
 482:	20 e0       	ldi	r18, 0x00	; 0
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	4a e7       	ldi	r20, 0x7A	; 122
 488:	55 e4       	ldi	r21, 0x45	; 69
 48a:	6b 81       	ldd	r22, Y+3	; 0x03
 48c:	7c 81       	ldd	r23, Y+4	; 0x04
 48e:	8d 81       	ldd	r24, Y+5	; 0x05
 490:	9e 81       	ldd	r25, Y+6	; 0x06
 492:	0e 94 4f 03 	call	0x69e	; 0x69e <__mulsf3>
 496:	6d 8b       	std	Y+21, r22	; 0x15
 498:	7e 8b       	std	Y+22, r23	; 0x16
 49a:	8f 8b       	std	Y+23, r24	; 0x17
 49c:	98 8f       	std	Y+24, r25	; 0x18
 49e:	8d 89       	ldd	r24, Y+21	; 0x15
 4a0:	9e 89       	ldd	r25, Y+22	; 0x16
 4a2:	af 89       	ldd	r26, Y+23	; 0x17
 4a4:	b8 8d       	ldd	r27, Y+24	; 0x18
 4a6:	8f 83       	std	Y+7, r24	; 0x07
 4a8:	98 87       	std	Y+8, r25	; 0x08
 4aa:	a9 87       	std	Y+9, r26	; 0x09
 4ac:	ba 87       	std	Y+10, r27	; 0x0a

000004ae <.Loc.36>:
	if (__tmp < 1.0)
 4ae:	20 e0       	ldi	r18, 0x00	; 0
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	40 e8       	ldi	r20, 0x80	; 128
 4b4:	5f e3       	ldi	r21, 0x3F	; 63
 4b6:	6f 81       	ldd	r22, Y+7	; 0x07
 4b8:	78 85       	ldd	r23, Y+8	; 0x08
 4ba:	89 85       	ldd	r24, Y+9	; 0x09
 4bc:	9a 85       	ldd	r25, Y+10	; 0x0a
 4be:	0e 94 c9 02 	call	0x592	; 0x592 <__cmpsf2>
 4c2:	88 23       	and	r24, r24
 4c4:	2c f4       	brge	.+10     	; 0x4d0 <.L21>

000004c6 <.Loc.37>:
		__ticks = 1;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	9c 87       	std	Y+12, r25	; 0x0c
 4cc:	8b 87       	std	Y+11, r24	; 0x0b
 4ce:	55 c0       	rjmp	.+170    	; 0x57a <.L12>

000004d0 <.L21>:
	else if (__tmp > 65535)
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	3f ef       	ldi	r19, 0xFF	; 255
 4d4:	4f e7       	ldi	r20, 0x7F	; 127
 4d6:	57 e4       	ldi	r21, 0x47	; 71
 4d8:	6f 81       	ldd	r22, Y+7	; 0x07
 4da:	78 85       	ldd	r23, Y+8	; 0x08
 4dc:	89 85       	ldd	r24, Y+9	; 0x09
 4de:	9a 85       	ldd	r25, Y+10	; 0x0a
 4e0:	0e 94 4a 03 	call	0x694	; 0x694 <__gesf2>
 4e4:	88 23       	and	r24, r24
 4e6:	d9 f1       	breq	.+118    	; 0x55e <.L22>
 4e8:	d4 f1       	brlt	.+116    	; 0x55e <.L22>

000004ea <.Loc.39>:
		__ticks = (uint16_t) (__ms * 10.0);
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	40 e2       	ldi	r20, 0x20	; 32
 4f0:	51 e4       	ldi	r21, 0x41	; 65
 4f2:	6b 81       	ldd	r22, Y+3	; 0x03
 4f4:	7c 81       	ldd	r23, Y+4	; 0x04
 4f6:	8d 81       	ldd	r24, Y+5	; 0x05
 4f8:	9e 81       	ldd	r25, Y+6	; 0x06
 4fa:	0e 94 4f 03 	call	0x69e	; 0x69e <__mulsf3>
 4fe:	69 8f       	std	Y+25, r22	; 0x19
 500:	7a 8f       	std	Y+26, r23	; 0x1a
 502:	8b 8f       	std	Y+27, r24	; 0x1b
 504:	9c 8f       	std	Y+28, r25	; 0x1c
 506:	89 8d       	ldd	r24, Y+25	; 0x19
 508:	9a 8d       	ldd	r25, Y+26	; 0x1a
 50a:	ab 8d       	ldd	r26, Y+27	; 0x1b
 50c:	bc 8d       	ldd	r27, Y+28	; 0x1c
 50e:	89 8b       	std	Y+17, r24	; 0x11
 510:	9a 8b       	std	Y+18, r25	; 0x12
 512:	ab 8b       	std	Y+19, r26	; 0x13
 514:	bc 8b       	std	Y+20, r27	; 0x14

00000516 <.Loc.40>:
 516:	69 89       	ldd	r22, Y+17	; 0x11
 518:	7a 89       	ldd	r23, Y+18	; 0x12
 51a:	8b 89       	ldd	r24, Y+19	; 0x13
 51c:	9c 89       	ldd	r25, Y+20	; 0x14
 51e:	0e 94 ce 02 	call	0x59c	; 0x59c <__fixunssfsi>
 522:	6d 8f       	std	Y+29, r22	; 0x1d
 524:	7e 8f       	std	Y+30, r23	; 0x1e
 526:	8f 8f       	std	Y+31, r24	; 0x1f
 528:	98 a3       	std	Y+32, r25	; 0x20
 52a:	ad 8d       	ldd	r26, Y+29	; 0x1d
 52c:	be 8d       	ldd	r27, Y+30	; 0x1e
 52e:	bc 87       	std	Y+12, r27	; 0x0c
 530:	ab 87       	std	Y+11, r26	; 0x0b

00000532 <.Loc.41>:
		while(__ticks)
 532:	10 c0       	rjmp	.+32     	; 0x554 <.L15>

00000534 <.L16>:
 534:	80 e9       	ldi	r24, 0x90	; 144
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	9e 87       	std	Y+14, r25	; 0x0e
 53a:	8d 87       	std	Y+13, r24	; 0x0d

0000053c <.LBB16>:
	__asm__ volatile (
 53c:	8d 85       	ldd	r24, Y+13	; 0x0d
 53e:	9e 85       	ldd	r25, Y+14	; 0x0e

00000540 <.L1^B1>:
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <.L1^B1>
 544:	9e 87       	std	Y+14, r25	; 0x0e
 546:	8d 87       	std	Y+13, r24	; 0x0d

00000548 <.Loc.43>:
	...

0000054a <.LBE16>:
			__ticks --;
 54a:	8b 85       	ldd	r24, Y+11	; 0x0b
 54c:	9c 85       	ldd	r25, Y+12	; 0x0c
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	9c 87       	std	Y+12, r25	; 0x0c
 552:	8b 87       	std	Y+11, r24	; 0x0b

00000554 <.L15>:
		while(__ticks)
 554:	8b 85       	ldd	r24, Y+11	; 0x0b
 556:	9c 85       	ldd	r25, Y+12	; 0x0c
 558:	00 97       	sbiw	r24, 0x00	; 0
 55a:	61 f7       	brne	.-40     	; 0x534 <.L16>

0000055c <.Loc.46>:
		return;
 55c:	19 c0       	rjmp	.+50     	; 0x590 <.L17>

0000055e <.L22>:
		__ticks = (uint16_t)__tmp;
 55e:	6f 81       	ldd	r22, Y+7	; 0x07
 560:	78 85       	ldd	r23, Y+8	; 0x08
 562:	89 85       	ldd	r24, Y+9	; 0x09
 564:	9a 85       	ldd	r25, Y+10	; 0x0a
 566:	0e 94 ce 02 	call	0x59c	; 0x59c <__fixunssfsi>
 56a:	69 a3       	std	Y+33, r22	; 0x21
 56c:	7a a3       	std	Y+34, r23	; 0x22
 56e:	8b a3       	std	Y+35, r24	; 0x23
 570:	9c a3       	std	Y+36, r25	; 0x24
 572:	e9 a1       	ldd	r30, Y+33	; 0x21
 574:	fa a1       	ldd	r31, Y+34	; 0x22
 576:	fc 87       	std	Y+12, r31	; 0x0c
 578:	eb 87       	std	Y+11, r30	; 0x0b

0000057a <.L12>:
 57a:	8b 85       	ldd	r24, Y+11	; 0x0b
 57c:	9c 85       	ldd	r25, Y+12	; 0x0c
 57e:	98 8b       	std	Y+16, r25	; 0x10
 580:	8f 87       	std	Y+15, r24	; 0x0f

00000582 <.LBB18>:
 582:	8f 85       	ldd	r24, Y+15	; 0x0f
 584:	98 89       	ldd	r25, Y+16	; 0x10

00000586 <.L1^B2>:
 586:	01 97       	sbiw	r24, 0x01	; 1
 588:	f1 f7       	brne	.-4      	; 0x586 <.L1^B2>
 58a:	98 8b       	std	Y+16, r25	; 0x10
 58c:	8f 87       	std	Y+15, r24	; 0x0f

0000058e <.Loc.49>:
	...

00000590 <.L17>:
    while (1) {
 590:	03 cf       	rjmp	.-506    	; 0x398 <.L18>

00000592 <__cmpsf2>:
 592:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__fp_cmp>
 596:	08 f4       	brcc	.+2      	; 0x59a <.L1^B1>
 598:	81 e0       	ldi	r24, 0x01	; 1

0000059a <.L1^B1>:
 59a:	08 95       	ret

0000059c <__fixunssfsi>:
 59c:	0e 94 29 03 	call	0x652	; 0x652 <__fp_splitA>
 5a0:	88 f0       	brcs	.+34     	; 0x5c4 <.L_err>
 5a2:	9f 57       	subi	r25, 0x7F	; 127
 5a4:	98 f0       	brcs	.+38     	; 0x5cc <.L_zr>
 5a6:	b9 2f       	mov	r27, r25
 5a8:	99 27       	eor	r25, r25
 5aa:	b7 51       	subi	r27, 0x17	; 23
 5ac:	b0 f0       	brcs	.+44     	; 0x5da <.L4^B1>
 5ae:	e1 f0       	breq	.+56     	; 0x5e8 <.L_sign>

000005b0 <.L1^B1>:
 5b0:	66 0f       	add	r22, r22
 5b2:	77 1f       	adc	r23, r23
 5b4:	88 1f       	adc	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	1a f0       	brmi	.+6      	; 0x5c0 <.L2^B1>
 5ba:	ba 95       	dec	r27
 5bc:	c9 f7       	brne	.-14     	; 0x5b0 <.L1^B1>
 5be:	14 c0       	rjmp	.+40     	; 0x5e8 <.L_sign>

000005c0 <.L2^B1>:
 5c0:	b1 30       	cpi	r27, 0x01	; 1
 5c2:	91 f0       	breq	.+36     	; 0x5e8 <.L_sign>

000005c4 <.L_err>:
 5c4:	0e 94 43 03 	call	0x686	; 0x686 <__fp_zero>
 5c8:	b1 e0       	ldi	r27, 0x01	; 1
 5ca:	08 95       	ret

000005cc <.L_zr>:
 5cc:	0c 94 43 03 	jmp	0x686	; 0x686 <__fp_zero>

000005d0 <.L3^B1>:
 5d0:	67 2f       	mov	r22, r23
 5d2:	78 2f       	mov	r23, r24
 5d4:	88 27       	eor	r24, r24
 5d6:	b8 5f       	subi	r27, 0xF8	; 248
 5d8:	39 f0       	breq	.+14     	; 0x5e8 <.L_sign>

000005da <.L4^B1>:
 5da:	b9 3f       	cpi	r27, 0xF9	; 249
 5dc:	cc f3       	brlt	.-14     	; 0x5d0 <.L3^B1>

000005de <.L5^B1>:
 5de:	86 95       	lsr	r24
 5e0:	77 95       	ror	r23
 5e2:	67 95       	ror	r22
 5e4:	b3 95       	inc	r27
 5e6:	d9 f7       	brne	.-10     	; 0x5de <.L5^B1>

000005e8 <.L_sign>:
 5e8:	3e f4       	brtc	.+14     	; 0x5f8 <.L6^B1>
 5ea:	90 95       	com	r25
 5ec:	80 95       	com	r24
 5ee:	70 95       	com	r23
 5f0:	61 95       	neg	r22
 5f2:	7f 4f       	sbci	r23, 0xFF	; 255
 5f4:	8f 4f       	sbci	r24, 0xFF	; 255
 5f6:	9f 4f       	sbci	r25, 0xFF	; 255

000005f8 <.L6^B1>:
 5f8:	08 95       	ret

000005fa <__fp_cmp>:
 5fa:	99 0f       	add	r25, r25
 5fc:	00 08       	sbc	r0, r0
 5fe:	55 0f       	add	r21, r21
 600:	aa 0b       	sbc	r26, r26
 602:	e0 e8       	ldi	r30, 0x80	; 128
 604:	fe ef       	ldi	r31, 0xFE	; 254
 606:	16 16       	cp	r1, r22
 608:	17 06       	cpc	r1, r23
 60a:	e8 07       	cpc	r30, r24
 60c:	f9 07       	cpc	r31, r25
 60e:	c0 f0       	brcs	.+48     	; 0x640 <.L9^B1>
 610:	12 16       	cp	r1, r18
 612:	13 06       	cpc	r1, r19
 614:	e4 07       	cpc	r30, r20
 616:	f5 07       	cpc	r31, r21
 618:	98 f0       	brcs	.+38     	; 0x640 <.L9^B1>
 61a:	62 1b       	sub	r22, r18
 61c:	73 0b       	sbc	r23, r19
 61e:	84 0b       	sbc	r24, r20
 620:	95 0b       	sbc	r25, r21
 622:	39 f4       	brne	.+14     	; 0x632 <.L1^B1>
 624:	0a 26       	eor	r0, r26
 626:	61 f0       	breq	.+24     	; 0x640 <.L9^B1>
 628:	23 2b       	or	r18, r19
 62a:	24 2b       	or	r18, r20
 62c:	25 2b       	or	r18, r21
 62e:	21 f4       	brne	.+8      	; 0x638 <.L2^B1>
 630:	08 95       	ret

00000632 <.L1^B1>:
 632:	0a 26       	eor	r0, r26
 634:	09 f4       	brne	.+2      	; 0x638 <.L2^B1>
 636:	a1 40       	sbci	r26, 0x01	; 1

00000638 <.L2^B1>:
 638:	a6 95       	lsr	r26
 63a:	8f ef       	ldi	r24, 0xFF	; 255
 63c:	81 1d       	adc	r24, r1
 63e:	81 1d       	adc	r24, r1

00000640 <.L9^B1>:
 640:	08 95       	ret

00000642 <__fp_split3>:
 642:	57 fd       	sbrc	r21, 7
 644:	90 58       	subi	r25, 0x80	; 128
 646:	44 0f       	add	r20, r20
 648:	55 1f       	adc	r21, r21
 64a:	59 f0       	breq	.+22     	; 0x662 <.L4^B1>
 64c:	5f 3f       	cpi	r21, 0xFF	; 255
 64e:	71 f0       	breq	.+28     	; 0x66c <.L5^B1>

00000650 <.L1^B1>:
 650:	47 95       	ror	r20

00000652 <__fp_splitA>:
 652:	88 0f       	add	r24, r24
 654:	97 fb       	bst	r25, 7
 656:	99 1f       	adc	r25, r25
 658:	61 f0       	breq	.+24     	; 0x672 <.L6^B1>
 65a:	9f 3f       	cpi	r25, 0xFF	; 255
 65c:	79 f0       	breq	.+30     	; 0x67c <.L7^B1>

0000065e <.L3^B1>:
 65e:	87 95       	ror	r24
 660:	08 95       	ret

00000662 <.L4^B1>:
 662:	12 16       	cp	r1, r18
 664:	13 06       	cpc	r1, r19
 666:	14 06       	cpc	r1, r20
 668:	55 1f       	adc	r21, r21
 66a:	f2 cf       	rjmp	.-28     	; 0x650 <.L1^B1>

0000066c <.L5^B1>:
 66c:	46 95       	lsr	r20
 66e:	f1 df       	rcall	.-30     	; 0x652 <__fp_splitA>
 670:	08 c0       	rjmp	.+16     	; 0x682 <.L8^B1>

00000672 <.L6^B1>:
 672:	16 16       	cp	r1, r22
 674:	17 06       	cpc	r1, r23
 676:	18 06       	cpc	r1, r24
 678:	99 1f       	adc	r25, r25
 67a:	f1 cf       	rjmp	.-30     	; 0x65e <.L3^B1>

0000067c <.L7^B1>:
 67c:	86 95       	lsr	r24
 67e:	71 05       	cpc	r23, r1
 680:	61 05       	cpc	r22, r1

00000682 <.L8^B1>:
 682:	08 94       	sec
 684:	08 95       	ret

00000686 <__fp_zero>:
 686:	e8 94       	clt

00000688 <__fp_szero>:
 688:	bb 27       	eor	r27, r27
 68a:	66 27       	eor	r22, r22
 68c:	77 27       	eor	r23, r23
 68e:	cb 01       	movw	r24, r22
 690:	97 f9       	bld	r25, 7
 692:	08 95       	ret

00000694 <__gesf2>:
 694:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__fp_cmp>
 698:	08 f4       	brcc	.+2      	; 0x69c <.L1^B1>
 69a:	8f ef       	ldi	r24, 0xFF	; 255

0000069c <.L1^B1>:
 69c:	08 95       	ret

0000069e <__mulsf3>:
 69e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__mulsf3x>
 6a2:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_round>

000006a6 <.L^B1>:
 6a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__fp_pscA>
 6aa:	38 f0       	brcs	.+14     	; 0x6ba <.L1^B1>
 6ac:	0e 94 cc 03 	call	0x798	; 0x798 <__fp_pscB>
 6b0:	20 f0       	brcs	.+8      	; 0x6ba <.L1^B1>
 6b2:	95 23       	and	r25, r21
 6b4:	11 f0       	breq	.+4      	; 0x6ba <.L1^B1>
 6b6:	0c 94 bc 03 	jmp	0x778	; 0x778 <__fp_inf>

000006ba <.L1^B1>:
 6ba:	0c 94 c2 03 	jmp	0x784	; 0x784 <__fp_nan>

000006be <.L2^B1>:
 6be:	11 24       	eor	r1, r1
 6c0:	0c 94 44 03 	jmp	0x688	; 0x688 <__fp_szero>

000006c4 <__mulsf3x>:
 6c4:	0e 94 21 03 	call	0x642	; 0x642 <__fp_split3>
 6c8:	70 f3       	brcs	.-36     	; 0x6a6 <.L^B1>

000006ca <__mulsf3_pse>:
 6ca:	95 9f       	mul	r25, r21
 6cc:	c1 f3       	breq	.-16     	; 0x6be <.L2^B1>
 6ce:	95 0f       	add	r25, r21
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	55 1f       	adc	r21, r21
 6d4:	62 9f       	mul	r22, r18
 6d6:	f0 01       	movw	r30, r0
 6d8:	72 9f       	mul	r23, r18
 6da:	bb 27       	eor	r27, r27
 6dc:	f0 0d       	add	r31, r0
 6de:	b1 1d       	adc	r27, r1
 6e0:	63 9f       	mul	r22, r19
 6e2:	aa 27       	eor	r26, r26
 6e4:	f0 0d       	add	r31, r0
 6e6:	b1 1d       	adc	r27, r1
 6e8:	aa 1f       	adc	r26, r26
 6ea:	64 9f       	mul	r22, r20
 6ec:	66 27       	eor	r22, r22
 6ee:	b0 0d       	add	r27, r0
 6f0:	a1 1d       	adc	r26, r1
 6f2:	66 1f       	adc	r22, r22
 6f4:	82 9f       	mul	r24, r18
 6f6:	22 27       	eor	r18, r18
 6f8:	b0 0d       	add	r27, r0
 6fa:	a1 1d       	adc	r26, r1
 6fc:	62 1f       	adc	r22, r18
 6fe:	73 9f       	mul	r23, r19
 700:	b0 0d       	add	r27, r0
 702:	a1 1d       	adc	r26, r1
 704:	62 1f       	adc	r22, r18
 706:	83 9f       	mul	r24, r19
 708:	a0 0d       	add	r26, r0
 70a:	61 1d       	adc	r22, r1
 70c:	22 1f       	adc	r18, r18
 70e:	74 9f       	mul	r23, r20
 710:	33 27       	eor	r19, r19
 712:	a0 0d       	add	r26, r0
 714:	61 1d       	adc	r22, r1
 716:	23 1f       	adc	r18, r19
 718:	84 9f       	mul	r24, r20
 71a:	60 0d       	add	r22, r0
 71c:	21 1d       	adc	r18, r1
 71e:	82 2f       	mov	r24, r18
 720:	76 2f       	mov	r23, r22
 722:	6a 2f       	mov	r22, r26
 724:	11 24       	eor	r1, r1
 726:	9f 57       	subi	r25, 0x7F	; 127
 728:	50 40       	sbci	r21, 0x00	; 0
 72a:	9a f0       	brmi	.+38     	; 0x752 <.L13^B1>
 72c:	f1 f0       	breq	.+60     	; 0x76a <.L15^B1>

0000072e <.L10^B1>:
 72e:	88 23       	and	r24, r24
 730:	4a f0       	brmi	.+18     	; 0x744 <.L11^B1>
 732:	ee 0f       	add	r30, r30
 734:	ff 1f       	adc	r31, r31
 736:	bb 1f       	adc	r27, r27
 738:	66 1f       	adc	r22, r22
 73a:	77 1f       	adc	r23, r23
 73c:	88 1f       	adc	r24, r24
 73e:	91 50       	subi	r25, 0x01	; 1
 740:	50 40       	sbci	r21, 0x00	; 0
 742:	a9 f7       	brne	.-22     	; 0x72e <.L10^B1>

00000744 <.L11^B1>:
 744:	9e 3f       	cpi	r25, 0xFE	; 254
 746:	51 05       	cpc	r21, r1
 748:	80 f0       	brcs	.+32     	; 0x76a <.L15^B1>
 74a:	0c 94 bc 03 	jmp	0x778	; 0x778 <__fp_inf>

0000074e <.L12^B1>:
 74e:	0c 94 44 03 	jmp	0x688	; 0x688 <__fp_szero>

00000752 <.L13^B1>:
 752:	5f 3f       	cpi	r21, 0xFF	; 255
 754:	e4 f3       	brlt	.-8      	; 0x74e <.L12^B1>
 756:	98 3e       	cpi	r25, 0xE8	; 232
 758:	d4 f3       	brlt	.-12     	; 0x74e <.L12^B1>

0000075a <.L14^B1>:
 75a:	86 95       	lsr	r24
 75c:	77 95       	ror	r23
 75e:	67 95       	ror	r22
 760:	b7 95       	ror	r27
 762:	f7 95       	ror	r31
 764:	e7 95       	ror	r30
 766:	9f 5f       	subi	r25, 0xFF	; 255
 768:	c1 f7       	brne	.-16     	; 0x75a <.L14^B1>

0000076a <.L15^B1>:
 76a:	fe 2b       	or	r31, r30
 76c:	88 0f       	add	r24, r24
 76e:	91 1d       	adc	r25, r1
 770:	96 95       	lsr	r25
 772:	87 95       	ror	r24
 774:	97 f9       	bld	r25, 7
 776:	08 95       	ret

00000778 <__fp_inf>:
 778:	97 f9       	bld	r25, 7
 77a:	9f 67       	ori	r25, 0x7F	; 127
 77c:	80 e8       	ldi	r24, 0x80	; 128
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	60 e0       	ldi	r22, 0x00	; 0
 782:	08 95       	ret

00000784 <__fp_nan>:
 784:	9f ef       	ldi	r25, 0xFF	; 255
 786:	80 ec       	ldi	r24, 0xC0	; 192
 788:	08 95       	ret

0000078a <__fp_pscA>:
 78a:	00 24       	eor	r0, r0
 78c:	0a 94       	dec	r0
 78e:	16 16       	cp	r1, r22
 790:	17 06       	cpc	r1, r23
 792:	18 06       	cpc	r1, r24
 794:	09 06       	cpc	r0, r25
 796:	08 95       	ret

00000798 <__fp_pscB>:
 798:	00 24       	eor	r0, r0
 79a:	0a 94       	dec	r0
 79c:	12 16       	cp	r1, r18
 79e:	13 06       	cpc	r1, r19
 7a0:	14 06       	cpc	r1, r20
 7a2:	05 06       	cpc	r0, r21
 7a4:	08 95       	ret

000007a6 <__fp_round>:
 7a6:	09 2e       	mov	r0, r25
 7a8:	03 94       	inc	r0
 7aa:	00 0c       	add	r0, r0
 7ac:	11 f4       	brne	.+4      	; 0x7b2 <.L1^B1>
 7ae:	88 23       	and	r24, r24
 7b0:	52 f0       	brmi	.+20     	; 0x7c6 <.L3^B1>

000007b2 <.L1^B1>:
 7b2:	bb 0f       	add	r27, r27
 7b4:	40 f4       	brcc	.+16     	; 0x7c6 <.L3^B1>
 7b6:	bf 2b       	or	r27, r31
 7b8:	11 f4       	brne	.+4      	; 0x7be <.L2^B1>
 7ba:	60 ff       	sbrs	r22, 0
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <.L3^B1>

000007be <.L2^B1>:
 7be:	6f 5f       	subi	r22, 0xFF	; 255
 7c0:	7f 4f       	sbci	r23, 0xFF	; 255
 7c2:	8f 4f       	sbci	r24, 0xFF	; 255
 7c4:	9f 4f       	sbci	r25, 0xFF	; 255

000007c6 <.L3^B1>:
 7c6:	08 95       	ret

000007c8 <_exit>:
 7c8:	f8 94       	cli

000007ca <__stop_program>:
 7ca:	ff cf       	rjmp	.-2      	; 0x7ca <__stop_program>
