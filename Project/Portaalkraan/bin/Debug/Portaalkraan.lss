
bin\Debug\Portaalkraan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000b26  00000bda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b26  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800200  00800200  00000bda  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000bda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000bdd  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bf0  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000000d8  00000000  00000000  00000c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   000012b9  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000fd3  00000000  00000000  00001fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   0000080a  00000000  00000000  00002f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000270  00000000  00000000  000037a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000675  00000000  00000000  00003a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 0000019a  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__vector_21>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 2b 03 	jmp	0x656	; 0x656 <__vector_23>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.Loc.5>

000000fc <.Loc.4>:
  fc:	1d 92       	st	X+, r1

000000fe <.Loc.5>:
  fe:	a7 30       	cpi	r26, 0x07	; 7

00000100 <.Loc.6>:
 100:	b2 07       	cpc	r27, r18

00000102 <.Loc.7>:
 102:	e1 f7       	brne	.-8      	; 0xfc <.Loc.4>

00000104 <L0^A>:
 104:	0e 94 b0 01 	call	0x360	; 0x360 <main>
 108:	0c 94 91 05 	jmp	0xb22	; 0xb22 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <isLimitSwitchPressed>:
#include "LimitSwitch.h"
#include <util/delay.h> // For debouncing delay

int isLimitSwitchPressed(uint8_t inputPin, volatile uint8_t *inputPort, volatile uint8_t *pinReg) {
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	00 d0       	rcall	.+0      	; 0x116 <L0^A>

00000116 <L0^A>:
 116:	0f 92       	push	r0
 118:	0f 92       	push	r0
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	7b 83       	std	Y+3, r23	; 0x03
 122:	6a 83       	std	Y+2, r22	; 0x02
 124:	5d 83       	std	Y+5, r21	; 0x05
 126:	4c 83       	std	Y+4, r20	; 0x04

00000128 <.Loc.1>:
    // Configure the input pin with pull-up resistor
    *inputPort |= (1 << inputPin); // Enable pull-up resistor
 128:	8a 81       	ldd	r24, Y+2	; 0x02
 12a:	9b 81       	ldd	r25, Y+3	; 0x03
 12c:	fc 01       	movw	r30, r24
 12e:	80 81       	ld	r24, Z
 130:	48 2f       	mov	r20, r24

00000132 <.Loc.2>:
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	28 2f       	mov	r18, r24
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <.L2^B1>

0000013e <.L1^B1>:
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25

00000142 <.L2^B1>:
 142:	2a 95       	dec	r18
 144:	e2 f7       	brpl	.-8      	; 0x13e <.L1^B1>

00000146 <.Loc.3>:
 146:	84 2b       	or	r24, r20
 148:	28 2f       	mov	r18, r24
 14a:	8a 81       	ldd	r24, Y+2	; 0x02
 14c:	9b 81       	ldd	r25, Y+3	; 0x03
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18

00000152 <.Loc.4>:

    // Check if the button is pressed
    if (!(*pinReg & (1 << inputPin))) { // Input pin LOW (button pressed)
 152:	8c 81       	ldd	r24, Y+4	; 0x04
 154:	9d 81       	ldd	r25, Y+5	; 0x05
 156:	fc 01       	movw	r30, r24
 158:	80 81       	ld	r24, Z
 15a:	88 2f       	mov	r24, r24
 15c:	90 e0       	ldi	r25, 0x00	; 0

0000015e <.Loc.5>:
 15e:	29 81       	ldd	r18, Y+1	; 0x01
 160:	22 2f       	mov	r18, r18
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	02 2e       	mov	r0, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <.L2^B2>

00000168 <.L1^B2>:
 168:	95 95       	asr	r25
 16a:	87 95       	ror	r24

0000016c <.L2^B2>:
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <.L1^B2>
 170:	81 70       	andi	r24, 0x01	; 1
 172:	99 27       	eor	r25, r25

00000174 <.Loc.6>:
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	19 f4       	brne	.+6      	; 0x17e <.L2>

00000178 <.Loc.7>:
        return 1; // Button is pressed
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <.L3>

0000017e <.L2>:
    } else { // Input pin HIGH (button not pressed)
        return 0; // Button is not pressed
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0

00000182 <.L3>:
    }
}
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <countLimitSwitchPresses>:

uint16_t countLimitSwitchPresses(uint8_t inputPin, volatile uint8_t *inputPort, volatile uint8_t *pinReg) {
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	a7 97       	sbiw	r28, 0x27	; 39
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
 1a6:	8f 87       	std	Y+15, r24	; 0x0f
 1a8:	79 8b       	std	Y+17, r23	; 0x11
 1aa:	68 8b       	std	Y+16, r22	; 0x10
 1ac:	5b 8b       	std	Y+19, r21	; 0x13
 1ae:	4a 8b       	std	Y+18, r20	; 0x12

000001b0 <.Loc.11>:
    static uint16_t pressCount = 0; // Persistent count of presses
    static uint8_t wasPressed = 0; // Tracks the previous state of the button

    // Configure the input pin with pull-up resistor
    *inputPort |= (1 << inputPin); // Enable pull-up resistor
 1b0:	88 89       	ldd	r24, Y+16	; 0x10
 1b2:	99 89       	ldd	r25, Y+17	; 0x11
 1b4:	dc 01       	movw	r26, r24
 1b6:	8c 91       	ld	r24, X
 1b8:	48 2f       	mov	r20, r24

000001ba <.Loc.12>:
 1ba:	8f 85       	ldd	r24, Y+15	; 0x0f
 1bc:	28 2f       	mov	r18, r24
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <.L2^B3>

000001c6 <.L1^B3>:
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25

000001ca <.L2^B3>:
 1ca:	2a 95       	dec	r18
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <.L1^B3>

000001ce <.Loc.13>:
 1ce:	84 2b       	or	r24, r20
 1d0:	28 2f       	mov	r18, r24
 1d2:	88 89       	ldd	r24, Y+16	; 0x10
 1d4:	99 89       	ldd	r25, Y+17	; 0x11
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18

000001da <.Loc.14>:

    // Check if the button is currently pressed
    if (!(*pinReg & (1 << inputPin))) { // Button is pressed
 1da:	8a 89       	ldd	r24, Y+18	; 0x12
 1dc:	9b 89       	ldd	r25, Y+19	; 0x13
 1de:	dc 01       	movw	r26, r24
 1e0:	8c 91       	ld	r24, X
 1e2:	88 2f       	mov	r24, r24
 1e4:	90 e0       	ldi	r25, 0x00	; 0

000001e6 <.Loc.15>:
 1e6:	2f 85       	ldd	r18, Y+15	; 0x0f
 1e8:	22 2f       	mov	r18, r18
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	02 2e       	mov	r0, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <.L2^B4>

000001f0 <.L1^B4>:
 1f0:	95 95       	asr	r25
 1f2:	87 95       	ror	r24

000001f4 <.L2^B4>:
 1f4:	0a 94       	dec	r0
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <.L1^B4>
 1f8:	81 70       	andi	r24, 0x01	; 1
 1fa:	99 27       	eor	r25, r25

000001fc <.Loc.16>:
 1fc:	00 97       	sbiw	r24, 0x00	; 0
 1fe:	09 f0       	breq	.+2      	; 0x202 <.Loc.17>

00000200 <L0^A>:
 200:	a0 c0       	rjmp	.+320    	; 0x342 <.L5>

00000202 <.Loc.17>:
        if (!wasPressed) { // Detect transition from not pressed to pressed
 202:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <wasPressed.1>

00000206 <.Loc.18>:
 206:	88 23       	and	r24, r24
 208:	09 f0       	breq	.+2      	; 0x20c <.Loc.19>

0000020a <L0^A>:
 20a:	9d c0       	rjmp	.+314    	; 0x346 <.L6>

0000020c <.Loc.19>:
            pressCount++;  // Increment the press count
 20c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pressCount.0>
 210:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pressCount.0+0x1>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <pressCount.0+0x1>
 21a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <pressCount.0>

0000021e <.Loc.20>:
            wasPressed = 1; // Mark the button as pressed
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <wasPressed.1>
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	a8 e4       	ldi	r26, 0x48	; 72
 22a:	b2 e4       	ldi	r27, 0x42	; 66
 22c:	89 83       	std	Y+1, r24	; 0x01
 22e:	9a 83       	std	Y+2, r25	; 0x02
 230:	ab 83       	std	Y+3, r26	; 0x03
 232:	bc 83       	std	Y+4, r27	; 0x04

00000234 <.LBB12>:

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	4a e7       	ldi	r20, 0x7A	; 122
 23a:	55 e4       	ldi	r21, 0x45	; 69
 23c:	69 81       	ldd	r22, Y+1	; 0x01
 23e:	7a 81       	ldd	r23, Y+2	; 0x02
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	9c 81       	ldd	r25, Y+4	; 0x04
 244:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__mulsf3>
 248:	68 8f       	std	Y+24, r22	; 0x18
 24a:	79 8f       	std	Y+25, r23	; 0x19
 24c:	8a 8f       	std	Y+26, r24	; 0x1a
 24e:	9b 8f       	std	Y+27, r25	; 0x1b
 250:	88 8d       	ldd	r24, Y+24	; 0x18
 252:	99 8d       	ldd	r25, Y+25	; 0x19
 254:	aa 8d       	ldd	r26, Y+26	; 0x1a
 256:	bb 8d       	ldd	r27, Y+27	; 0x1b
 258:	8d 83       	std	Y+5, r24	; 0x05
 25a:	9e 83       	std	Y+6, r25	; 0x06
 25c:	af 83       	std	Y+7, r26	; 0x07
 25e:	b8 87       	std	Y+8, r27	; 0x08

00000260 <.Loc.22>:
	if (__tmp < 1.0)
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	40 e8       	ldi	r20, 0x80	; 128
 266:	5f e3       	ldi	r21, 0x3F	; 63
 268:	6d 81       	ldd	r22, Y+5	; 0x05
 26a:	7e 81       	ldd	r23, Y+6	; 0x06
 26c:	8f 81       	ldd	r24, Y+7	; 0x07
 26e:	98 85       	ldd	r25, Y+8	; 0x08
 270:	0e 94 76 04 	call	0x8ec	; 0x8ec <__cmpsf2>
 274:	88 23       	and	r24, r24
 276:	2c f4       	brge	.+10     	; 0x282 <.L18>

00000278 <.Loc.23>:
		__ticks = 1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	9a 87       	std	Y+10, r25	; 0x0a
 27e:	89 87       	std	Y+9, r24	; 0x09
 280:	55 c0       	rjmp	.+170    	; 0x32c <.L9>

00000282 <.L18>:
	else if (__tmp > 65535)
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	3f ef       	ldi	r19, 0xFF	; 255
 286:	4f e7       	ldi	r20, 0x7F	; 127
 288:	57 e4       	ldi	r21, 0x47	; 71
 28a:	6d 81       	ldd	r22, Y+5	; 0x05
 28c:	7e 81       	ldd	r23, Y+6	; 0x06
 28e:	8f 81       	ldd	r24, Y+7	; 0x07
 290:	98 85       	ldd	r25, Y+8	; 0x08
 292:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__gesf2>
 296:	88 23       	and	r24, r24
 298:	d9 f1       	breq	.+118    	; 0x310 <.L19>
 29a:	d4 f1       	brlt	.+116    	; 0x310 <.L19>

0000029c <.Loc.25>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	40 e2       	ldi	r20, 0x20	; 32
 2a2:	51 e4       	ldi	r21, 0x41	; 65
 2a4:	69 81       	ldd	r22, Y+1	; 0x01
 2a6:	7a 81       	ldd	r23, Y+2	; 0x02
 2a8:	8b 81       	ldd	r24, Y+3	; 0x03
 2aa:	9c 81       	ldd	r25, Y+4	; 0x04
 2ac:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__mulsf3>
 2b0:	6c 8f       	std	Y+28, r22	; 0x1c
 2b2:	7d 8f       	std	Y+29, r23	; 0x1d
 2b4:	8e 8f       	std	Y+30, r24	; 0x1e
 2b6:	9f 8f       	std	Y+31, r25	; 0x1f
 2b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2ba:	9d 8d       	ldd	r25, Y+29	; 0x1d
 2bc:	ae 8d       	ldd	r26, Y+30	; 0x1e
 2be:	bf 8d       	ldd	r27, Y+31	; 0x1f
 2c0:	8c 8b       	std	Y+20, r24	; 0x14
 2c2:	9d 8b       	std	Y+21, r25	; 0x15
 2c4:	ae 8b       	std	Y+22, r26	; 0x16
 2c6:	bf 8b       	std	Y+23, r27	; 0x17

000002c8 <.Loc.26>:
 2c8:	6c 89       	ldd	r22, Y+20	; 0x14
 2ca:	7d 89       	ldd	r23, Y+21	; 0x15
 2cc:	8e 89       	ldd	r24, Y+22	; 0x16
 2ce:	9f 89       	ldd	r25, Y+23	; 0x17
 2d0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fixunssfsi>
 2d4:	68 a3       	std	Y+32, r22	; 0x20
 2d6:	79 a3       	std	Y+33, r23	; 0x21
 2d8:	8a a3       	std	Y+34, r24	; 0x22
 2da:	9b a3       	std	Y+35, r25	; 0x23
 2dc:	a8 a1       	ldd	r26, Y+32	; 0x20
 2de:	b9 a1       	ldd	r27, Y+33	; 0x21
 2e0:	ba 87       	std	Y+10, r27	; 0x0a
 2e2:	a9 87       	std	Y+9, r26	; 0x09

000002e4 <.Loc.27>:
		while(__ticks)
 2e4:	10 c0       	rjmp	.+32     	; 0x306 <.L12>

000002e6 <.L13>:
 2e6:	80 e9       	ldi	r24, 0x90	; 144
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	9c 87       	std	Y+12, r25	; 0x0c
 2ec:	8b 87       	std	Y+11, r24	; 0x0b

000002ee <.LBB14>:
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
 2ee:	8b 85       	ldd	r24, Y+11	; 0x0b
 2f0:	9c 85       	ldd	r25, Y+12	; 0x0c

000002f2 <.L1^B5>:
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <.L1^B5>
 2f6:	9c 87       	std	Y+12, r25	; 0x0c
 2f8:	8b 87       	std	Y+11, r24	; 0x0b

000002fa <.Loc.29>:
	...

000002fc <.LBE14>:
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2fc:	89 85       	ldd	r24, Y+9	; 0x09
 2fe:	9a 85       	ldd	r25, Y+10	; 0x0a
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	9a 87       	std	Y+10, r25	; 0x0a
 304:	89 87       	std	Y+9, r24	; 0x09

00000306 <.L12>:
		while(__ticks)
 306:	89 85       	ldd	r24, Y+9	; 0x09
 308:	9a 85       	ldd	r25, Y+10	; 0x0a
 30a:	00 97       	sbiw	r24, 0x00	; 0
 30c:	61 f7       	brne	.-40     	; 0x2e6 <.L13>

0000030e <.Loc.32>:
		}
		return;
 30e:	1b c0       	rjmp	.+54     	; 0x346 <.L6>

00000310 <.L19>:
	}
	else
		__ticks = (uint16_t)__tmp;
 310:	6d 81       	ldd	r22, Y+5	; 0x05
 312:	7e 81       	ldd	r23, Y+6	; 0x06
 314:	8f 81       	ldd	r24, Y+7	; 0x07
 316:	98 85       	ldd	r25, Y+8	; 0x08
 318:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fixunssfsi>
 31c:	6c a3       	std	Y+36, r22	; 0x24
 31e:	7d a3       	std	Y+37, r23	; 0x25
 320:	8e a3       	std	Y+38, r24	; 0x26
 322:	9f a3       	std	Y+39, r25	; 0x27
 324:	ec a1       	ldd	r30, Y+36	; 0x24
 326:	fd a1       	ldd	r31, Y+37	; 0x25
 328:	fa 87       	std	Y+10, r31	; 0x0a
 32a:	e9 87       	std	Y+9, r30	; 0x09

0000032c <.L9>:
 32c:	89 85       	ldd	r24, Y+9	; 0x09
 32e:	9a 85       	ldd	r25, Y+10	; 0x0a
 330:	9e 87       	std	Y+14, r25	; 0x0e
 332:	8d 87       	std	Y+13, r24	; 0x0d

00000334 <.LBB16>:
 334:	8d 85       	ldd	r24, Y+13	; 0x0d
 336:	9e 85       	ldd	r25, Y+14	; 0x0e

00000338 <.L1^B6>:
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <.L1^B6>
 33c:	9e 87       	std	Y+14, r25	; 0x0e
 33e:	8d 87       	std	Y+13, r24	; 0x0d

00000340 <.Loc.35>:
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
#endif /* __AVR_TINY__ */
}
 340:	02 c0       	rjmp	.+4      	; 0x346 <.L6>

00000342 <.L5>:
            _delay_ms(50);  // Simple debounce delay
        }
    } else { // Button is not pressed
        wasPressed = 0; // Reset the pressed state
 342:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <wasPressed.1>

00000346 <.L6>:
    }

    return pressCount;
 346:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pressCount.0>
 34a:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pressCount.0+0x1>

0000034e <.Loc.38>:
}
 34e:	a7 96       	adiw	r28, 0x27	; 39
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <main>:
#include "Portaalkraan.h"
#include <util/delay.h>

int main(void) {
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	a4 97       	sbiw	r28, 0x24	; 36
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61

00000374 <.Loc.1>:
    initPortaalkraan(); // Initialize the system
 374:	0e 94 6d 03 	call	0x6da	; 0x6da <initPortaalkraan>

00000378 <.Loc.2>:

    nulpuntPortaalkraan(); // Find the zero point
 378:	0e 94 89 03 	call	0x712	; 0x712 <nulpuntPortaalkraan>

0000037c <.L10>:

    while (1) {
        uint16_t distance = afstandPortaalkraan(); // Read distance
 37c:	0e 94 3f 04 	call	0x87e	; 0x87e <afstandPortaalkraan>
 380:	9a 83       	std	Y+2, r25	; 0x02
 382:	89 83       	std	Y+1, r24	; 0x01

00000384 <.Loc.4>:
        portaalkraanMagneet();               // Check magnet safety
 384:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <portaalkraanMagneet>
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	a8 ec       	ldi	r26, 0xC8	; 200
 38e:	b2 e4       	ldi	r27, 0x42	; 66
 390:	8b 83       	std	Y+3, r24	; 0x03
 392:	9c 83       	std	Y+4, r25	; 0x04
 394:	ad 83       	std	Y+5, r26	; 0x05
 396:	be 83       	std	Y+6, r27	; 0x06

00000398 <.LBB14>:
	__tmp = ((F_CPU) / 4e3) * __ms;
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	4a e7       	ldi	r20, 0x7A	; 122
 39e:	55 e4       	ldi	r21, 0x45	; 69
 3a0:	6b 81       	ldd	r22, Y+3	; 0x03
 3a2:	7c 81       	ldd	r23, Y+4	; 0x04
 3a4:	8d 81       	ldd	r24, Y+5	; 0x05
 3a6:	9e 81       	ldd	r25, Y+6	; 0x06
 3a8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__mulsf3>
 3ac:	6d 8b       	std	Y+21, r22	; 0x15
 3ae:	7e 8b       	std	Y+22, r23	; 0x16
 3b0:	8f 8b       	std	Y+23, r24	; 0x17
 3b2:	98 8f       	std	Y+24, r25	; 0x18
 3b4:	8d 89       	ldd	r24, Y+21	; 0x15
 3b6:	9e 89       	ldd	r25, Y+22	; 0x16
 3b8:	af 89       	ldd	r26, Y+23	; 0x17
 3ba:	b8 8d       	ldd	r27, Y+24	; 0x18
 3bc:	8f 83       	std	Y+7, r24	; 0x07
 3be:	98 87       	std	Y+8, r25	; 0x08
 3c0:	a9 87       	std	Y+9, r26	; 0x09
 3c2:	ba 87       	std	Y+10, r27	; 0x0a

000003c4 <.Loc.6>:
	if (__tmp < 1.0)
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	40 e8       	ldi	r20, 0x80	; 128
 3ca:	5f e3       	ldi	r21, 0x3F	; 63
 3cc:	6f 81       	ldd	r22, Y+7	; 0x07
 3ce:	78 85       	ldd	r23, Y+8	; 0x08
 3d0:	89 85       	ldd	r24, Y+9	; 0x09
 3d2:	9a 85       	ldd	r25, Y+10	; 0x0a
 3d4:	0e 94 76 04 	call	0x8ec	; 0x8ec <__cmpsf2>
 3d8:	88 23       	and	r24, r24
 3da:	2c f4       	brge	.+10     	; 0x3e6 <.L13>

000003dc <.Loc.7>:
		__ticks = 1;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	9c 87       	std	Y+12, r25	; 0x0c
 3e2:	8b 87       	std	Y+11, r24	; 0x0b
 3e4:	55 c0       	rjmp	.+170    	; 0x490 <.L4>

000003e6 <.L13>:
	else if (__tmp > 65535)
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	3f ef       	ldi	r19, 0xFF	; 255
 3ea:	4f e7       	ldi	r20, 0x7F	; 127
 3ec:	57 e4       	ldi	r21, 0x47	; 71
 3ee:	6f 81       	ldd	r22, Y+7	; 0x07
 3f0:	78 85       	ldd	r23, Y+8	; 0x08
 3f2:	89 85       	ldd	r24, Y+9	; 0x09
 3f4:	9a 85       	ldd	r25, Y+10	; 0x0a
 3f6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__gesf2>
 3fa:	88 23       	and	r24, r24
 3fc:	d9 f1       	breq	.+118    	; 0x474 <.L14>
 3fe:	d4 f1       	brlt	.+116    	; 0x474 <.L14>

00000400 <.Loc.9>:
		__ticks = (uint16_t) (__ms * 10.0);
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	40 e2       	ldi	r20, 0x20	; 32
 406:	51 e4       	ldi	r21, 0x41	; 65
 408:	6b 81       	ldd	r22, Y+3	; 0x03
 40a:	7c 81       	ldd	r23, Y+4	; 0x04
 40c:	8d 81       	ldd	r24, Y+5	; 0x05
 40e:	9e 81       	ldd	r25, Y+6	; 0x06
 410:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__mulsf3>
 414:	69 8f       	std	Y+25, r22	; 0x19
 416:	7a 8f       	std	Y+26, r23	; 0x1a
 418:	8b 8f       	std	Y+27, r24	; 0x1b
 41a:	9c 8f       	std	Y+28, r25	; 0x1c
 41c:	89 8d       	ldd	r24, Y+25	; 0x19
 41e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 420:	ab 8d       	ldd	r26, Y+27	; 0x1b
 422:	bc 8d       	ldd	r27, Y+28	; 0x1c
 424:	89 8b       	std	Y+17, r24	; 0x11
 426:	9a 8b       	std	Y+18, r25	; 0x12
 428:	ab 8b       	std	Y+19, r26	; 0x13
 42a:	bc 8b       	std	Y+20, r27	; 0x14

0000042c <.Loc.10>:
 42c:	69 89       	ldd	r22, Y+17	; 0x11
 42e:	7a 89       	ldd	r23, Y+18	; 0x12
 430:	8b 89       	ldd	r24, Y+19	; 0x13
 432:	9c 89       	ldd	r25, Y+20	; 0x14
 434:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fixunssfsi>
 438:	6d 8f       	std	Y+29, r22	; 0x1d
 43a:	7e 8f       	std	Y+30, r23	; 0x1e
 43c:	8f 8f       	std	Y+31, r24	; 0x1f
 43e:	98 a3       	std	Y+32, r25	; 0x20
 440:	ad 8d       	ldd	r26, Y+29	; 0x1d
 442:	be 8d       	ldd	r27, Y+30	; 0x1e
 444:	bc 87       	std	Y+12, r27	; 0x0c
 446:	ab 87       	std	Y+11, r26	; 0x0b

00000448 <.Loc.11>:
		while(__ticks)
 448:	10 c0       	rjmp	.+32     	; 0x46a <.L7>

0000044a <.L8>:
 44a:	80 e9       	ldi	r24, 0x90	; 144
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	9e 87       	std	Y+14, r25	; 0x0e
 450:	8d 87       	std	Y+13, r24	; 0x0d

00000452 <.LBB16>:
	__asm__ volatile (
 452:	8d 85       	ldd	r24, Y+13	; 0x0d
 454:	9e 85       	ldd	r25, Y+14	; 0x0e

00000456 <.L1^B1>:
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <.L1^B1>
 45a:	9e 87       	std	Y+14, r25	; 0x0e
 45c:	8d 87       	std	Y+13, r24	; 0x0d

0000045e <.Loc.13>:
	...

00000460 <.LBE16>:
			__ticks --;
 460:	8b 85       	ldd	r24, Y+11	; 0x0b
 462:	9c 85       	ldd	r25, Y+12	; 0x0c
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	9c 87       	std	Y+12, r25	; 0x0c
 468:	8b 87       	std	Y+11, r24	; 0x0b

0000046a <.L7>:
		while(__ticks)
 46a:	8b 85       	ldd	r24, Y+11	; 0x0b
 46c:	9c 85       	ldd	r25, Y+12	; 0x0c
 46e:	00 97       	sbiw	r24, 0x00	; 0
 470:	61 f7       	brne	.-40     	; 0x44a <.L8>

00000472 <.Loc.16>:
		return;
 472:	19 c0       	rjmp	.+50     	; 0x4a6 <.L9>

00000474 <.L14>:
		__ticks = (uint16_t)__tmp;
 474:	6f 81       	ldd	r22, Y+7	; 0x07
 476:	78 85       	ldd	r23, Y+8	; 0x08
 478:	89 85       	ldd	r24, Y+9	; 0x09
 47a:	9a 85       	ldd	r25, Y+10	; 0x0a
 47c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fixunssfsi>
 480:	69 a3       	std	Y+33, r22	; 0x21
 482:	7a a3       	std	Y+34, r23	; 0x22
 484:	8b a3       	std	Y+35, r24	; 0x23
 486:	9c a3       	std	Y+36, r25	; 0x24
 488:	89 a1       	ldd	r24, Y+33	; 0x21
 48a:	9a a1       	ldd	r25, Y+34	; 0x22
 48c:	9c 87       	std	Y+12, r25	; 0x0c
 48e:	8b 87       	std	Y+11, r24	; 0x0b

00000490 <.L4>:
 490:	8b 85       	ldd	r24, Y+11	; 0x0b
 492:	9c 85       	ldd	r25, Y+12	; 0x0c
 494:	98 8b       	std	Y+16, r25	; 0x10
 496:	8f 87       	std	Y+15, r24	; 0x0f

00000498 <.LBB18>:
 498:	8f 85       	ldd	r24, Y+15	; 0x0f
 49a:	98 89       	ldd	r25, Y+16	; 0x10

0000049c <.L1^B2>:
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <.L1^B2>
 4a0:	98 8b       	std	Y+16, r25	; 0x10
 4a2:	8f 87       	std	Y+15, r24	; 0x0f

000004a4 <.Loc.19>:
	...

000004a6 <.L9>:
    while (1) {
 4a6:	6a cf       	rjmp	.-300    	; 0x37c <.L10>

000004a8 <init_timer>:
// Globale variabele om te kijken of lpwm of rpwm aan staat.
volatile uint8_t lpwm_active = 0;
volatile uint8_t rpwm_active = 0;

void init_timer(void)
{
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62

000004b0 <.Loc.1>:
  // Mode 0, Pre-scaler = 64
  TCCR0A = 0;
 4b0:	84 e4       	ldi	r24, 0x44	; 68
 4b2:	90 e0       	ldi	r25, 0x00	; 0

000004b4 <.Loc.2>:
 4b4:	fc 01       	movw	r30, r24
 4b6:	10 82       	st	Z, r1

000004b8 <.Loc.3>:
  TCCR0B = (0 << CS02) | (1 << CS01) | (1 << CS00);
 4b8:	85 e4       	ldi	r24, 0x45	; 69
 4ba:	90 e0       	ldi	r25, 0x00	; 0

000004bc <.Loc.4>:
 4bc:	23 e0       	ldi	r18, 0x03	; 3
 4be:	fc 01       	movw	r30, r24
 4c0:	20 83       	st	Z, r18

000004c2 <.Loc.5>:
  // 5-% duty cycle (0 - 255) = (0% - 100%)
  OCR0A = 127;
 4c2:	87 e4       	ldi	r24, 0x47	; 71
 4c4:	90 e0       	ldi	r25, 0x00	; 0

000004c6 <.Loc.6>:
 4c6:	2f e7       	ldi	r18, 0x7F	; 127
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 83       	st	Z, r18

000004cc <.Loc.7>:
  // Interrupt op OCA en OVF
  TIMSK0 = (1 << OCIE0A) | (1 << TOIE0);
 4cc:	8e e6       	ldi	r24, 0x6E	; 110
 4ce:	90 e0       	ldi	r25, 0x00	; 0

000004d0 <.Loc.8>:
 4d0:	23 e0       	ldi	r18, 0x03	; 3
 4d2:	fc 01       	movw	r30, r24
 4d4:	20 83       	st	Z, r18

000004d6 <.Loc.9>:
}
 4d6:	00 00       	nop
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <init_pins>:

void init_pins(void)
{
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62

000004e6 <.Loc.11>:
  // Lampjes voor test
  DDRB |= (1 << PB6);
 4e6:	84 e2       	ldi	r24, 0x24	; 36
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	fc 01       	movw	r30, r24
 4ec:	20 81       	ld	r18, Z
 4ee:	84 e2       	ldi	r24, 0x24	; 36
 4f0:	90 e0       	ldi	r25, 0x00	; 0

000004f2 <.Loc.12>:
 4f2:	20 64       	ori	r18, 0x40	; 64
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18

000004f8 <.Loc.13>:
  // Zet de PWM pins 44 en 46 als output en zet ze uit
  DDRL |= (1 << LPWM) | (1 << RPWM);
 4f8:	8a e0       	ldi	r24, 0x0A	; 10
 4fa:	91 e0       	ldi	r25, 0x01	; 1
 4fc:	fc 01       	movw	r30, r24
 4fe:	20 81       	ld	r18, Z
 500:	8a e0       	ldi	r24, 0x0A	; 10
 502:	91 e0       	ldi	r25, 0x01	; 1

00000504 <.Loc.14>:
 504:	28 62       	ori	r18, 0x28	; 40
 506:	fc 01       	movw	r30, r24
 508:	20 83       	st	Z, r18

0000050a <.Loc.15>:
  PORTL &= ~(1 << LPWM) & ~(1 << RPWM);
 50a:	8b e0       	ldi	r24, 0x0B	; 11
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	fc 01       	movw	r30, r24
 510:	20 81       	ld	r18, Z

00000512 <.Loc.16>:
 512:	8b e0       	ldi	r24, 0x0B	; 11
 514:	91 e0       	ldi	r25, 0x01	; 1

00000516 <.Loc.17>:
 516:	27 7d       	andi	r18, 0xD7	; 215
 518:	fc 01       	movw	r30, r24
 51a:	20 83       	st	Z, r18

0000051c <.Loc.18>:
  // Zet pin 22 als output
  DDRA |= (1 << v5);
 51c:	81 e2       	ldi	r24, 0x21	; 33
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	fc 01       	movw	r30, r24
 522:	20 81       	ld	r18, Z
 524:	81 e2       	ldi	r24, 0x21	; 33
 526:	90 e0       	ldi	r25, 0x00	; 0

00000528 <.Loc.19>:
 528:	21 60       	ori	r18, 0x01	; 1
 52a:	fc 01       	movw	r30, r24
 52c:	20 83       	st	Z, r18

0000052e <.Loc.20>:
  // Zet de pins van knop 1 als pull-up
  DDRF |= (1 << PF1);
 52e:	80 e3       	ldi	r24, 0x30	; 48
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	fc 01       	movw	r30, r24
 534:	20 81       	ld	r18, Z
 536:	80 e3       	ldi	r24, 0x30	; 48
 538:	90 e0       	ldi	r25, 0x00	; 0

0000053a <.Loc.21>:
 53a:	22 60       	ori	r18, 0x02	; 2
 53c:	fc 01       	movw	r30, r24
 53e:	20 83       	st	Z, r18

00000540 <.Loc.22>:
  PORTF |= (1 << PF1);
 540:	81 e3       	ldi	r24, 0x31	; 49
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	fc 01       	movw	r30, r24
 546:	20 81       	ld	r18, Z
 548:	81 e3       	ldi	r24, 0x31	; 49
 54a:	90 e0       	ldi	r25, 0x00	; 0

0000054c <.Loc.23>:
 54c:	22 60       	ori	r18, 0x02	; 2
 54e:	fc 01       	movw	r30, r24
 550:	20 83       	st	Z, r18

00000552 <.Loc.24>:
}
 552:	00 00       	nop
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <init>:

void init(void)
{
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	cd b7       	in	r28, 0x3d	; 61
 560:	de b7       	in	r29, 0x3e	; 62

00000562 <.Loc.26>:
  init_pins();
 562:	0e 94 6f 02 	call	0x4de	; 0x4de <init_pins>

00000566 <.Loc.27>:
  init_timer();
 566:	0e 94 54 02 	call	0x4a8	; 0x4a8 <init_timer>

0000056a <.Loc.28>:
  sei();
 56a:	78 94       	sei

0000056c <.Loc.29>:
}
 56c:	00 00       	nop
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <motorBeweegLinks>:

void motorBeweegLinks(void)
{
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62

0000057c <.Loc.31>:
  lpwm_active = 1;
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <lpwm_active>

00000582 <.Loc.32>:
  rpwm_active = 0;
 582:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <rpwm_active>

00000586 <.Loc.33>:
}
 586:	00 00       	nop
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	08 95       	ret

0000058e <motorBeweegRechts>:

void motorBeweegRechts(void)
{
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	cd b7       	in	r28, 0x3d	; 61
 594:	de b7       	in	r29, 0x3e	; 62

00000596 <.Loc.35>:
  rpwm_active = 1;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <rpwm_active>

0000059c <.Loc.36>:
  lpwm_active = 0;
 59c:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <lpwm_active>

000005a0 <.Loc.37>:
}
 5a0:	00 00       	nop
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret

000005a8 <motorStop>:

void motorStop(void)
{
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	cd b7       	in	r28, 0x3d	; 61
 5ae:	de b7       	in	r29, 0x3e	; 62

000005b0 <.Loc.39>:
  lpwm_active = 0;
 5b0:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <lpwm_active>

000005b4 <.Loc.40>:
  rpwm_active = 0;
 5b4:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <rpwm_active>

000005b8 <.Loc.41>:
  PORTL &= ~(1 << LPWM) & ~(1 << RPWM); // Zet LWPM en RPWM uit
 5b8:	8b e0       	ldi	r24, 0x0B	; 11
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	fc 01       	movw	r30, r24
 5be:	20 81       	ld	r18, Z

000005c0 <.Loc.42>:
 5c0:	8b e0       	ldi	r24, 0x0B	; 11
 5c2:	91 e0       	ldi	r25, 0x01	; 1

000005c4 <.Loc.43>:
 5c4:	27 7d       	andi	r18, 0xD7	; 215
 5c6:	fc 01       	movw	r30, r24
 5c8:	20 83       	st	Z, r18

000005ca <.Loc.44>:
}
 5ca:	00 00       	nop
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	08 95       	ret

000005d2 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
 5d2:	1f 92       	push	r1
 5d4:	0f 92       	push	r0
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	0f 92       	push	r0
 5da:	11 24       	eor	r1, r1
 5dc:	0b b6       	in	r0, 0x3b	; 59
 5de:	0f 92       	push	r0
 5e0:	2f 93       	push	r18
 5e2:	8f 93       	push	r24
 5e4:	9f 93       	push	r25
 5e6:	ef 93       	push	r30
 5e8:	ff 93       	push	r31
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	cd b7       	in	r28, 0x3d	; 61
 5f0:	de b7       	in	r29, 0x3e	; 62

000005f2 <.Loc.46>:
  if (lpwm_active)
 5f2:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <lpwm_active>

000005f6 <.Loc.47>:
 5f6:	88 23       	and	r24, r24
 5f8:	49 f0       	breq	.+18     	; 0x60c <.L8>

000005fa <.Loc.48>:
  {
    PORTL &= ~(1 << LPWM); // Zet LPWM uit
 5fa:	8b e0       	ldi	r24, 0x0B	; 11
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	fc 01       	movw	r30, r24
 600:	20 81       	ld	r18, Z

00000602 <.Loc.49>:
 602:	8b e0       	ldi	r24, 0x0B	; 11
 604:	91 e0       	ldi	r25, 0x01	; 1

00000606 <.Loc.50>:
 606:	2f 7d       	andi	r18, 0xDF	; 223
 608:	fc 01       	movw	r30, r24
 60a:	20 83       	st	Z, r18

0000060c <.L8>:
  }
  if (rpwm_active)
 60c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rpwm_active>

00000610 <.Loc.52>:
 610:	88 23       	and	r24, r24
 612:	49 f0       	breq	.+18     	; 0x626 <.L9>

00000614 <.Loc.53>:
  {
    PORTL &= ~(1 << RPWM); // Zet RPWM uit
 614:	8b e0       	ldi	r24, 0x0B	; 11
 616:	91 e0       	ldi	r25, 0x01	; 1
 618:	fc 01       	movw	r30, r24
 61a:	20 81       	ld	r18, Z

0000061c <.Loc.54>:
 61c:	8b e0       	ldi	r24, 0x0B	; 11
 61e:	91 e0       	ldi	r25, 0x01	; 1

00000620 <.Loc.55>:
 620:	27 7f       	andi	r18, 0xF7	; 247
 622:	fc 01       	movw	r30, r24
 624:	20 83       	st	Z, r18

00000626 <.L9>:
  }
  DDRB &= ~(1 << PB6); // Update test output
 626:	84 e2       	ldi	r24, 0x24	; 36
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	fc 01       	movw	r30, r24
 62c:	20 81       	ld	r18, Z

0000062e <.Loc.57>:
 62e:	84 e2       	ldi	r24, 0x24	; 36
 630:	90 e0       	ldi	r25, 0x00	; 0

00000632 <.Loc.58>:
 632:	2f 7b       	andi	r18, 0xBF	; 191
 634:	fc 01       	movw	r30, r24
 636:	20 83       	st	Z, r18

00000638 <.Loc.59>:
}
 638:	00 00       	nop
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	ff 91       	pop	r31
 640:	ef 91       	pop	r30
 642:	9f 91       	pop	r25
 644:	8f 91       	pop	r24
 646:	2f 91       	pop	r18
 648:	0f 90       	pop	r0
 64a:	0b be       	out	0x3b, r0	; 59
 64c:	0f 90       	pop	r0
 64e:	0f be       	out	0x3f, r0	; 63
 650:	0f 90       	pop	r0
 652:	1f 90       	pop	r1
 654:	18 95       	reti

00000656 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
 656:	1f 92       	push	r1
 658:	0f 92       	push	r0
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	0f 92       	push	r0
 65e:	11 24       	eor	r1, r1
 660:	0b b6       	in	r0, 0x3b	; 59
 662:	0f 92       	push	r0
 664:	2f 93       	push	r18
 666:	8f 93       	push	r24
 668:	9f 93       	push	r25
 66a:	ef 93       	push	r30
 66c:	ff 93       	push	r31
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62

00000676 <.Loc.61>:
  if (lpwm_active)
 676:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <lpwm_active>

0000067a <.Loc.62>:
 67a:	88 23       	and	r24, r24
 67c:	49 f0       	breq	.+18     	; 0x690 <.L11>

0000067e <.Loc.63>:
  {
    PORTL |= (1 << LPWM); // Zet LPWM aan
 67e:	8b e0       	ldi	r24, 0x0B	; 11
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	fc 01       	movw	r30, r24
 684:	20 81       	ld	r18, Z
 686:	8b e0       	ldi	r24, 0x0B	; 11
 688:	91 e0       	ldi	r25, 0x01	; 1

0000068a <.Loc.64>:
 68a:	20 62       	ori	r18, 0x20	; 32
 68c:	fc 01       	movw	r30, r24
 68e:	20 83       	st	Z, r18

00000690 <.L11>:
  }
  if (rpwm_active)
 690:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rpwm_active>

00000694 <.Loc.66>:
 694:	88 23       	and	r24, r24
 696:	49 f0       	breq	.+18     	; 0x6aa <.L12>

00000698 <.Loc.67>:
  {
    PORTL |= (1 << RPWM); // Zet RPWM aan
 698:	8b e0       	ldi	r24, 0x0B	; 11
 69a:	91 e0       	ldi	r25, 0x01	; 1
 69c:	fc 01       	movw	r30, r24
 69e:	20 81       	ld	r18, Z
 6a0:	8b e0       	ldi	r24, 0x0B	; 11
 6a2:	91 e0       	ldi	r25, 0x01	; 1

000006a4 <.Loc.68>:
 6a4:	28 60       	ori	r18, 0x08	; 8
 6a6:	fc 01       	movw	r30, r24
 6a8:	20 83       	st	Z, r18

000006aa <.L12>:
  }
  DDRB |= (1 << PB6); // Update test output
 6aa:	84 e2       	ldi	r24, 0x24	; 36
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	fc 01       	movw	r30, r24
 6b0:	20 81       	ld	r18, Z
 6b2:	84 e2       	ldi	r24, 0x24	; 36
 6b4:	90 e0       	ldi	r25, 0x00	; 0

000006b6 <.Loc.70>:
 6b6:	20 64       	ori	r18, 0x40	; 64
 6b8:	fc 01       	movw	r30, r24
 6ba:	20 83       	st	Z, r18

000006bc <.Loc.71>:
}
 6bc:	00 00       	nop
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	ff 91       	pop	r31
 6c4:	ef 91       	pop	r30
 6c6:	9f 91       	pop	r25
 6c8:	8f 91       	pop	r24
 6ca:	2f 91       	pop	r18
 6cc:	0f 90       	pop	r0
 6ce:	0b be       	out	0x3b, r0	; 59
 6d0:	0f 90       	pop	r0
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	0f 90       	pop	r0
 6d6:	1f 90       	pop	r1
 6d8:	18 95       	reti

000006da <initPortaalkraan>:
#include <avr/io.h>
#include <util/delay.h>

static uint16_t distanceCount = 0; // Tracks the distance traveled

void initPortaalkraan(void) {
 6da:	cf 93       	push	r28
 6dc:	df 93       	push	r29
 6de:	cd b7       	in	r28, 0x3d	; 61
 6e0:	de b7       	in	r29, 0x3e	; 62

000006e2 <.Loc.1>:
    // Initialize motor and limit switches
    init(); // Initialize motor control
 6e2:	0e 94 ad 02 	call	0x55a	; 0x55a <init>

000006e6 <.Loc.2>:
    DDRB &= ~(1 << PB0) & ~(1 << PB1) & ~(1 << PB2); // PB0, PB1, PB2 as inputs for limit switches
 6e6:	84 e2       	ldi	r24, 0x24	; 36
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	fc 01       	movw	r30, r24
 6ec:	20 81       	ld	r18, Z

000006ee <.Loc.3>:
 6ee:	84 e2       	ldi	r24, 0x24	; 36
 6f0:	90 e0       	ldi	r25, 0x00	; 0

000006f2 <.Loc.4>:
 6f2:	28 7f       	andi	r18, 0xF8	; 248
 6f4:	fc 01       	movw	r30, r24
 6f6:	20 83       	st	Z, r18

000006f8 <.Loc.5>:
    PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2);  // Enable pull-up resistors
 6f8:	85 e2       	ldi	r24, 0x25	; 37
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	fc 01       	movw	r30, r24
 6fe:	20 81       	ld	r18, Z
 700:	85 e2       	ldi	r24, 0x25	; 37
 702:	90 e0       	ldi	r25, 0x00	; 0

00000704 <.Loc.6>:
 704:	27 60       	ori	r18, 0x07	; 7
 706:	fc 01       	movw	r30, r24
 708:	20 83       	st	Z, r18

0000070a <.Loc.7>:
}
 70a:	00 00       	nop
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

00000712 <nulpuntPortaalkraan>:

void nulpuntPortaalkraan(void) {
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
 71a:	a2 97       	sbiw	r28, 0x22	; 34
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	f8 94       	cli
 720:	de bf       	out	0x3e, r29	; 62
 722:	0f be       	out	0x3f, r0	; 63
 724:	cd bf       	out	0x3d, r28	; 61

00000726 <.Loc.9>:
    // Move motor until the zero-point limit switch (PB0) is triggered
    motorBeweegRechts(); // Move motor in one direction
 726:	0e 94 c7 02 	call	0x58e	; 0x58e <motorBeweegRechts>

0000072a <.Loc.10>:
    while (!isLimitSwitchPressed(PB0, &PORTB, &PINB)) {
 72a:	8f c0       	rjmp	.+286    	; 0x84a <.L3>

0000072c <.L12>:
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	a0 e2       	ldi	r26, 0x20	; 32
 732:	b1 e4       	ldi	r27, 0x41	; 65
 734:	89 83       	std	Y+1, r24	; 0x01
 736:	9a 83       	std	Y+2, r25	; 0x02
 738:	ab 83       	std	Y+3, r26	; 0x03
 73a:	bc 83       	std	Y+4, r27	; 0x04

0000073c <.LBB12>:
	__tmp = ((F_CPU) / 4e3) * __ms;
 73c:	20 e0       	ldi	r18, 0x00	; 0
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	4a e7       	ldi	r20, 0x7A	; 122
 742:	55 e4       	ldi	r21, 0x45	; 69
 744:	69 81       	ldd	r22, Y+1	; 0x01
 746:	7a 81       	ldd	r23, Y+2	; 0x02
 748:	8b 81       	ldd	r24, Y+3	; 0x03
 74a:	9c 81       	ldd	r25, Y+4	; 0x04
 74c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__mulsf3>
 750:	6b 8b       	std	Y+19, r22	; 0x13
 752:	7c 8b       	std	Y+20, r23	; 0x14
 754:	8d 8b       	std	Y+21, r24	; 0x15
 756:	9e 8b       	std	Y+22, r25	; 0x16
 758:	8b 89       	ldd	r24, Y+19	; 0x13
 75a:	9c 89       	ldd	r25, Y+20	; 0x14
 75c:	ad 89       	ldd	r26, Y+21	; 0x15
 75e:	be 89       	ldd	r27, Y+22	; 0x16
 760:	8d 83       	std	Y+5, r24	; 0x05
 762:	9e 83       	std	Y+6, r25	; 0x06
 764:	af 83       	std	Y+7, r26	; 0x07
 766:	b8 87       	std	Y+8, r27	; 0x08

00000768 <.Loc.12>:
	if (__tmp < 1.0)
 768:	20 e0       	ldi	r18, 0x00	; 0
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	40 e8       	ldi	r20, 0x80	; 128
 76e:	5f e3       	ldi	r21, 0x3F	; 63
 770:	6d 81       	ldd	r22, Y+5	; 0x05
 772:	7e 81       	ldd	r23, Y+6	; 0x06
 774:	8f 81       	ldd	r24, Y+7	; 0x07
 776:	98 85       	ldd	r25, Y+8	; 0x08
 778:	0e 94 76 04 	call	0x8ec	; 0x8ec <__cmpsf2>
 77c:	88 23       	and	r24, r24
 77e:	2c f4       	brge	.+10     	; 0x78a <.L15>

00000780 <.Loc.13>:
		__ticks = 1;
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	9a 87       	std	Y+10, r25	; 0x0a
 786:	89 87       	std	Y+9, r24	; 0x09
 788:	55 c0       	rjmp	.+170    	; 0x834 <.L6>

0000078a <.L15>:
	else if (__tmp > 65535)
 78a:	20 e0       	ldi	r18, 0x00	; 0
 78c:	3f ef       	ldi	r19, 0xFF	; 255
 78e:	4f e7       	ldi	r20, 0x7F	; 127
 790:	57 e4       	ldi	r21, 0x47	; 71
 792:	6d 81       	ldd	r22, Y+5	; 0x05
 794:	7e 81       	ldd	r23, Y+6	; 0x06
 796:	8f 81       	ldd	r24, Y+7	; 0x07
 798:	98 85       	ldd	r25, Y+8	; 0x08
 79a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__gesf2>
 79e:	88 23       	and	r24, r24
 7a0:	d9 f1       	breq	.+118    	; 0x818 <.L16>
 7a2:	d4 f1       	brlt	.+116    	; 0x818 <.L16>

000007a4 <.Loc.15>:
		__ticks = (uint16_t) (__ms * 10.0);
 7a4:	20 e0       	ldi	r18, 0x00	; 0
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	40 e2       	ldi	r20, 0x20	; 32
 7aa:	51 e4       	ldi	r21, 0x41	; 65
 7ac:	69 81       	ldd	r22, Y+1	; 0x01
 7ae:	7a 81       	ldd	r23, Y+2	; 0x02
 7b0:	8b 81       	ldd	r24, Y+3	; 0x03
 7b2:	9c 81       	ldd	r25, Y+4	; 0x04
 7b4:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__mulsf3>
 7b8:	6f 8b       	std	Y+23, r22	; 0x17
 7ba:	78 8f       	std	Y+24, r23	; 0x18
 7bc:	89 8f       	std	Y+25, r24	; 0x19
 7be:	9a 8f       	std	Y+26, r25	; 0x1a
 7c0:	8f 89       	ldd	r24, Y+23	; 0x17
 7c2:	98 8d       	ldd	r25, Y+24	; 0x18
 7c4:	a9 8d       	ldd	r26, Y+25	; 0x19
 7c6:	ba 8d       	ldd	r27, Y+26	; 0x1a
 7c8:	8f 87       	std	Y+15, r24	; 0x0f
 7ca:	98 8b       	std	Y+16, r25	; 0x10
 7cc:	a9 8b       	std	Y+17, r26	; 0x11
 7ce:	ba 8b       	std	Y+18, r27	; 0x12

000007d0 <.Loc.16>:
 7d0:	6f 85       	ldd	r22, Y+15	; 0x0f
 7d2:	78 89       	ldd	r23, Y+16	; 0x10
 7d4:	89 89       	ldd	r24, Y+17	; 0x11
 7d6:	9a 89       	ldd	r25, Y+18	; 0x12
 7d8:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fixunssfsi>
 7dc:	6b 8f       	std	Y+27, r22	; 0x1b
 7de:	7c 8f       	std	Y+28, r23	; 0x1c
 7e0:	8d 8f       	std	Y+29, r24	; 0x1d
 7e2:	9e 8f       	std	Y+30, r25	; 0x1e
 7e4:	ab 8d       	ldd	r26, Y+27	; 0x1b
 7e6:	bc 8d       	ldd	r27, Y+28	; 0x1c
 7e8:	ba 87       	std	Y+10, r27	; 0x0a
 7ea:	a9 87       	std	Y+9, r26	; 0x09

000007ec <.Loc.17>:
		while(__ticks)
 7ec:	10 c0       	rjmp	.+32     	; 0x80e <.L9>

000007ee <.L10>:
 7ee:	80 e9       	ldi	r24, 0x90	; 144
 7f0:	91 e0       	ldi	r25, 0x01	; 1
 7f2:	9c 87       	std	Y+12, r25	; 0x0c
 7f4:	8b 87       	std	Y+11, r24	; 0x0b

000007f6 <.LBB14>:
 7f6:	8b 85       	ldd	r24, Y+11	; 0x0b
 7f8:	9c 85       	ldd	r25, Y+12	; 0x0c

000007fa <.L1^B1>:
 7fa:	01 97       	sbiw	r24, 0x01	; 1
 7fc:	f1 f7       	brne	.-4      	; 0x7fa <.L1^B1>
 7fe:	9c 87       	std	Y+12, r25	; 0x0c
 800:	8b 87       	std	Y+11, r24	; 0x0b

00000802 <.Loc.19>:
	...

00000804 <.LBE14>:
			__ticks --;
 804:	89 85       	ldd	r24, Y+9	; 0x09
 806:	9a 85       	ldd	r25, Y+10	; 0x0a
 808:	01 97       	sbiw	r24, 0x01	; 1
 80a:	9a 87       	std	Y+10, r25	; 0x0a
 80c:	89 87       	std	Y+9, r24	; 0x09

0000080e <.L9>:
		while(__ticks)
 80e:	89 85       	ldd	r24, Y+9	; 0x09
 810:	9a 85       	ldd	r25, Y+10	; 0x0a
 812:	00 97       	sbiw	r24, 0x00	; 0
 814:	61 f7       	brne	.-40     	; 0x7ee <.L10>

00000816 <.Loc.22>:
		return;
 816:	19 c0       	rjmp	.+50     	; 0x84a <.L3>

00000818 <.L16>:
		__ticks = (uint16_t)__tmp;
 818:	6d 81       	ldd	r22, Y+5	; 0x05
 81a:	7e 81       	ldd	r23, Y+6	; 0x06
 81c:	8f 81       	ldd	r24, Y+7	; 0x07
 81e:	98 85       	ldd	r25, Y+8	; 0x08
 820:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fixunssfsi>
 824:	6f 8f       	std	Y+31, r22	; 0x1f
 826:	78 a3       	std	Y+32, r23	; 0x20
 828:	89 a3       	std	Y+33, r24	; 0x21
 82a:	9a a3       	std	Y+34, r25	; 0x22
 82c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 82e:	98 a1       	ldd	r25, Y+32	; 0x20
 830:	9a 87       	std	Y+10, r25	; 0x0a
 832:	89 87       	std	Y+9, r24	; 0x09

00000834 <.L6>:
 834:	89 85       	ldd	r24, Y+9	; 0x09
 836:	9a 85       	ldd	r25, Y+10	; 0x0a
 838:	9e 87       	std	Y+14, r25	; 0x0e
 83a:	8d 87       	std	Y+13, r24	; 0x0d

0000083c <.LBB16>:
 83c:	8d 85       	ldd	r24, Y+13	; 0x0d
 83e:	9e 85       	ldd	r25, Y+14	; 0x0e

00000840 <.L1^B2>:
 840:	01 97       	sbiw	r24, 0x01	; 1
 842:	f1 f7       	brne	.-4      	; 0x840 <.L1^B2>
 844:	9e 87       	std	Y+14, r25	; 0x0e
 846:	8d 87       	std	Y+13, r24	; 0x0d

00000848 <.Loc.25>:
	...

0000084a <.L3>:
 84a:	43 e2       	ldi	r20, 0x23	; 35
 84c:	50 e0       	ldi	r21, 0x00	; 0
 84e:	65 e2       	ldi	r22, 0x25	; 37
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	0e 94 88 00 	call	0x110	; 0x110 <isLimitSwitchPressed>

00000858 <.Loc.27>:
 858:	00 97       	sbiw	r24, 0x00	; 0
 85a:	09 f4       	brne	.+2      	; 0x85e <.Loc.28>

0000085c <L0^A>:
 85c:	67 cf       	rjmp	.-306    	; 0x72c <.L12>

0000085e <.Loc.28>:
        _delay_ms(10); // Check every 10ms
    }
    motorStop(); // Stop motor when zero point is reached
 85e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <motorStop>

00000862 <.Loc.29>:
    distanceCount = 0; // Reset the distance count
 862:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <distanceCount+0x1>
 866:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <distanceCount>

0000086a <.Loc.30>:
}
 86a:	00 00       	nop
 86c:	a2 96       	adiw	r28, 0x22	; 34
 86e:	0f b6       	in	r0, 0x3f	; 63
 870:	f8 94       	cli
 872:	de bf       	out	0x3e, r29	; 62
 874:	0f be       	out	0x3f, r0	; 63
 876:	cd bf       	out	0x3d, r28	; 61
 878:	df 91       	pop	r29
 87a:	cf 91       	pop	r28
 87c:	08 95       	ret

0000087e <afstandPortaalkraan>:

uint16_t afstandPortaalkraan(void) {
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	cd b7       	in	r28, 0x3d	; 61
 884:	de b7       	in	r29, 0x3e	; 62

00000886 <.Loc.32>:
    // Monitor the distance counting limit switch (PB1)
    if (isLimitSwitchPressed(PB1, &PORTB, &PINB)) {
 886:	43 e2       	ldi	r20, 0x23	; 35
 888:	50 e0       	ldi	r21, 0x00	; 0
 88a:	65 e2       	ldi	r22, 0x25	; 37
 88c:	70 e0       	ldi	r23, 0x00	; 0
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	0e 94 88 00 	call	0x110	; 0x110 <isLimitSwitchPressed>

00000894 <.Loc.33>:
 894:	00 97       	sbiw	r24, 0x00	; 0
 896:	49 f0       	breq	.+18     	; 0x8aa <.L18>

00000898 <.Loc.34>:
        distanceCount++; // Increment the distance count on each trigger
 898:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <distanceCount>
 89c:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <distanceCount+0x1>
 8a0:	01 96       	adiw	r24, 0x01	; 1
 8a2:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <distanceCount+0x1>
 8a6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <distanceCount>

000008aa <.L18>:
    }
    return distanceCount; // Return the total distance count
 8aa:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <distanceCount>
 8ae:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <distanceCount+0x1>

000008b2 <.Loc.36>:
}
 8b2:	df 91       	pop	r29
 8b4:	cf 91       	pop	r28
 8b6:	08 95       	ret

000008b8 <portaalkraanMagneet>:

void portaalkraanMagneet(void) {
 8b8:	cf 93       	push	r28
 8ba:	df 93       	push	r29
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62

000008c0 <.Loc.38>:
    // Check if the magnet safety limit switch (PB2) is triggered
    if (isLimitSwitchPressed(PB2, &PORTB, &PINB)) {
 8c0:	43 e2       	ldi	r20, 0x23	; 35
 8c2:	50 e0       	ldi	r21, 0x00	; 0
 8c4:	65 e2       	ldi	r22, 0x25	; 37
 8c6:	70 e0       	ldi	r23, 0x00	; 0
 8c8:	82 e0       	ldi	r24, 0x02	; 2
 8ca:	0e 94 88 00 	call	0x110	; 0x110 <isLimitSwitchPressed>

000008ce <.Loc.39>:
 8ce:	00 97       	sbiw	r24, 0x00	; 0
 8d0:	49 f0       	breq	.+18     	; 0x8e4 <.L22>

000008d2 <.Loc.40>:
        // Add code to turn off the magnet here
        // Example: Setting a magnet control pin low
        PORTB &= ~(1 << PB4); // Assume PB4 controls the magnet
 8d2:	85 e2       	ldi	r24, 0x25	; 37
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	fc 01       	movw	r30, r24
 8d8:	20 81       	ld	r18, Z

000008da <.Loc.41>:
 8da:	85 e2       	ldi	r24, 0x25	; 37
 8dc:	90 e0       	ldi	r25, 0x00	; 0

000008de <.Loc.42>:
 8de:	2f 7e       	andi	r18, 0xEF	; 239
 8e0:	fc 01       	movw	r30, r24
 8e2:	20 83       	st	Z, r18

000008e4 <.L22>:
    }
}
 8e4:	00 00       	nop
 8e6:	df 91       	pop	r29
 8e8:	cf 91       	pop	r28
 8ea:	08 95       	ret

000008ec <__cmpsf2>:
 8ec:	0e 94 aa 04 	call	0x954	; 0x954 <__fp_cmp>
 8f0:	08 f4       	brcc	.+2      	; 0x8f4 <.L1^B1>
 8f2:	81 e0       	ldi	r24, 0x01	; 1

000008f4 <.L1^B1>:
 8f4:	08 95       	ret

000008f6 <__fixunssfsi>:
 8f6:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fp_splitA>
 8fa:	88 f0       	brcs	.+34     	; 0x91e <.L_err>
 8fc:	9f 57       	subi	r25, 0x7F	; 127
 8fe:	98 f0       	brcs	.+38     	; 0x926 <.L_zr>
 900:	b9 2f       	mov	r27, r25
 902:	99 27       	eor	r25, r25
 904:	b7 51       	subi	r27, 0x17	; 23
 906:	b0 f0       	brcs	.+44     	; 0x934 <.L4^B1>
 908:	e1 f0       	breq	.+56     	; 0x942 <.L_sign>

0000090a <.L1^B1>:
 90a:	66 0f       	add	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	88 1f       	adc	r24, r24
 910:	99 1f       	adc	r25, r25
 912:	1a f0       	brmi	.+6      	; 0x91a <.L2^B1>
 914:	ba 95       	dec	r27
 916:	c9 f7       	brne	.-14     	; 0x90a <.L1^B1>
 918:	14 c0       	rjmp	.+40     	; 0x942 <.L_sign>

0000091a <.L2^B1>:
 91a:	b1 30       	cpi	r27, 0x01	; 1
 91c:	91 f0       	breq	.+36     	; 0x942 <.L_sign>

0000091e <.L_err>:
 91e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__fp_zero>
 922:	b1 e0       	ldi	r27, 0x01	; 1
 924:	08 95       	ret

00000926 <.L_zr>:
 926:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_zero>

0000092a <.L3^B1>:
 92a:	67 2f       	mov	r22, r23
 92c:	78 2f       	mov	r23, r24
 92e:	88 27       	eor	r24, r24
 930:	b8 5f       	subi	r27, 0xF8	; 248
 932:	39 f0       	breq	.+14     	; 0x942 <.L_sign>

00000934 <.L4^B1>:
 934:	b9 3f       	cpi	r27, 0xF9	; 249
 936:	cc f3       	brlt	.-14     	; 0x92a <.L3^B1>

00000938 <.L5^B1>:
 938:	86 95       	lsr	r24
 93a:	77 95       	ror	r23
 93c:	67 95       	ror	r22
 93e:	b3 95       	inc	r27
 940:	d9 f7       	brne	.-10     	; 0x938 <.L5^B1>

00000942 <.L_sign>:
 942:	3e f4       	brtc	.+14     	; 0x952 <.L6^B1>
 944:	90 95       	com	r25
 946:	80 95       	com	r24
 948:	70 95       	com	r23
 94a:	61 95       	neg	r22
 94c:	7f 4f       	sbci	r23, 0xFF	; 255
 94e:	8f 4f       	sbci	r24, 0xFF	; 255
 950:	9f 4f       	sbci	r25, 0xFF	; 255

00000952 <.L6^B1>:
 952:	08 95       	ret

00000954 <__fp_cmp>:
 954:	99 0f       	add	r25, r25
 956:	00 08       	sbc	r0, r0
 958:	55 0f       	add	r21, r21
 95a:	aa 0b       	sbc	r26, r26
 95c:	e0 e8       	ldi	r30, 0x80	; 128
 95e:	fe ef       	ldi	r31, 0xFE	; 254
 960:	16 16       	cp	r1, r22
 962:	17 06       	cpc	r1, r23
 964:	e8 07       	cpc	r30, r24
 966:	f9 07       	cpc	r31, r25
 968:	c0 f0       	brcs	.+48     	; 0x99a <.L9^B1>
 96a:	12 16       	cp	r1, r18
 96c:	13 06       	cpc	r1, r19
 96e:	e4 07       	cpc	r30, r20
 970:	f5 07       	cpc	r31, r21
 972:	98 f0       	brcs	.+38     	; 0x99a <.L9^B1>
 974:	62 1b       	sub	r22, r18
 976:	73 0b       	sbc	r23, r19
 978:	84 0b       	sbc	r24, r20
 97a:	95 0b       	sbc	r25, r21
 97c:	39 f4       	brne	.+14     	; 0x98c <.L1^B1>
 97e:	0a 26       	eor	r0, r26
 980:	61 f0       	breq	.+24     	; 0x99a <.L9^B1>
 982:	23 2b       	or	r18, r19
 984:	24 2b       	or	r18, r20
 986:	25 2b       	or	r18, r21
 988:	21 f4       	brne	.+8      	; 0x992 <.L2^B1>
 98a:	08 95       	ret

0000098c <.L1^B1>:
 98c:	0a 26       	eor	r0, r26
 98e:	09 f4       	brne	.+2      	; 0x992 <.L2^B1>
 990:	a1 40       	sbci	r26, 0x01	; 1

00000992 <.L2^B1>:
 992:	a6 95       	lsr	r26
 994:	8f ef       	ldi	r24, 0xFF	; 255
 996:	81 1d       	adc	r24, r1
 998:	81 1d       	adc	r24, r1

0000099a <.L9^B1>:
 99a:	08 95       	ret

0000099c <__fp_split3>:
 99c:	57 fd       	sbrc	r21, 7
 99e:	90 58       	subi	r25, 0x80	; 128
 9a0:	44 0f       	add	r20, r20
 9a2:	55 1f       	adc	r21, r21
 9a4:	59 f0       	breq	.+22     	; 0x9bc <.L4^B1>
 9a6:	5f 3f       	cpi	r21, 0xFF	; 255
 9a8:	71 f0       	breq	.+28     	; 0x9c6 <.L5^B1>

000009aa <.L1^B1>:
 9aa:	47 95       	ror	r20

000009ac <__fp_splitA>:
 9ac:	88 0f       	add	r24, r24
 9ae:	97 fb       	bst	r25, 7
 9b0:	99 1f       	adc	r25, r25
 9b2:	61 f0       	breq	.+24     	; 0x9cc <.L6^B1>
 9b4:	9f 3f       	cpi	r25, 0xFF	; 255
 9b6:	79 f0       	breq	.+30     	; 0x9d6 <.L7^B1>

000009b8 <.L3^B1>:
 9b8:	87 95       	ror	r24
 9ba:	08 95       	ret

000009bc <.L4^B1>:
 9bc:	12 16       	cp	r1, r18
 9be:	13 06       	cpc	r1, r19
 9c0:	14 06       	cpc	r1, r20
 9c2:	55 1f       	adc	r21, r21
 9c4:	f2 cf       	rjmp	.-28     	; 0x9aa <.L1^B1>

000009c6 <.L5^B1>:
 9c6:	46 95       	lsr	r20
 9c8:	f1 df       	rcall	.-30     	; 0x9ac <__fp_splitA>
 9ca:	08 c0       	rjmp	.+16     	; 0x9dc <.L8^B1>

000009cc <.L6^B1>:
 9cc:	16 16       	cp	r1, r22
 9ce:	17 06       	cpc	r1, r23
 9d0:	18 06       	cpc	r1, r24
 9d2:	99 1f       	adc	r25, r25
 9d4:	f1 cf       	rjmp	.-30     	; 0x9b8 <.L3^B1>

000009d6 <.L7^B1>:
 9d6:	86 95       	lsr	r24
 9d8:	71 05       	cpc	r23, r1
 9da:	61 05       	cpc	r22, r1

000009dc <.L8^B1>:
 9dc:	08 94       	sec
 9de:	08 95       	ret

000009e0 <__fp_zero>:
 9e0:	e8 94       	clt

000009e2 <__fp_szero>:
 9e2:	bb 27       	eor	r27, r27
 9e4:	66 27       	eor	r22, r22
 9e6:	77 27       	eor	r23, r23
 9e8:	cb 01       	movw	r24, r22
 9ea:	97 f9       	bld	r25, 7
 9ec:	08 95       	ret

000009ee <__gesf2>:
 9ee:	0e 94 aa 04 	call	0x954	; 0x954 <__fp_cmp>
 9f2:	08 f4       	brcc	.+2      	; 0x9f6 <.L1^B1>
 9f4:	8f ef       	ldi	r24, 0xFF	; 255

000009f6 <.L1^B1>:
 9f6:	08 95       	ret

000009f8 <__mulsf3>:
 9f8:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__mulsf3x>
 9fc:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_round>

00000a00 <.L^B1>:
 a00:	0e 94 72 05 	call	0xae4	; 0xae4 <__fp_pscA>
 a04:	38 f0       	brcs	.+14     	; 0xa14 <.L1^B1>
 a06:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_pscB>
 a0a:	20 f0       	brcs	.+8      	; 0xa14 <.L1^B1>
 a0c:	95 23       	and	r25, r21
 a0e:	11 f0       	breq	.+4      	; 0xa14 <.L1^B1>
 a10:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_inf>

00000a14 <.L1^B1>:
 a14:	0c 94 6f 05 	jmp	0xade	; 0xade <__fp_nan>

00000a18 <.L2^B1>:
 a18:	11 24       	eor	r1, r1
 a1a:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__fp_szero>

00000a1e <__mulsf3x>:
 a1e:	0e 94 ce 04 	call	0x99c	; 0x99c <__fp_split3>
 a22:	70 f3       	brcs	.-36     	; 0xa00 <.L^B1>

00000a24 <__mulsf3_pse>:
 a24:	95 9f       	mul	r25, r21
 a26:	c1 f3       	breq	.-16     	; 0xa18 <.L2^B1>
 a28:	95 0f       	add	r25, r21
 a2a:	50 e0       	ldi	r21, 0x00	; 0
 a2c:	55 1f       	adc	r21, r21
 a2e:	62 9f       	mul	r22, r18
 a30:	f0 01       	movw	r30, r0
 a32:	72 9f       	mul	r23, r18
 a34:	bb 27       	eor	r27, r27
 a36:	f0 0d       	add	r31, r0
 a38:	b1 1d       	adc	r27, r1
 a3a:	63 9f       	mul	r22, r19
 a3c:	aa 27       	eor	r26, r26
 a3e:	f0 0d       	add	r31, r0
 a40:	b1 1d       	adc	r27, r1
 a42:	aa 1f       	adc	r26, r26
 a44:	64 9f       	mul	r22, r20
 a46:	66 27       	eor	r22, r22
 a48:	b0 0d       	add	r27, r0
 a4a:	a1 1d       	adc	r26, r1
 a4c:	66 1f       	adc	r22, r22
 a4e:	82 9f       	mul	r24, r18
 a50:	22 27       	eor	r18, r18
 a52:	b0 0d       	add	r27, r0
 a54:	a1 1d       	adc	r26, r1
 a56:	62 1f       	adc	r22, r18
 a58:	73 9f       	mul	r23, r19
 a5a:	b0 0d       	add	r27, r0
 a5c:	a1 1d       	adc	r26, r1
 a5e:	62 1f       	adc	r22, r18
 a60:	83 9f       	mul	r24, r19
 a62:	a0 0d       	add	r26, r0
 a64:	61 1d       	adc	r22, r1
 a66:	22 1f       	adc	r18, r18
 a68:	74 9f       	mul	r23, r20
 a6a:	33 27       	eor	r19, r19
 a6c:	a0 0d       	add	r26, r0
 a6e:	61 1d       	adc	r22, r1
 a70:	23 1f       	adc	r18, r19
 a72:	84 9f       	mul	r24, r20
 a74:	60 0d       	add	r22, r0
 a76:	21 1d       	adc	r18, r1
 a78:	82 2f       	mov	r24, r18
 a7a:	76 2f       	mov	r23, r22
 a7c:	6a 2f       	mov	r22, r26
 a7e:	11 24       	eor	r1, r1
 a80:	9f 57       	subi	r25, 0x7F	; 127
 a82:	50 40       	sbci	r21, 0x00	; 0
 a84:	9a f0       	brmi	.+38     	; 0xaac <.L13^B1>
 a86:	f1 f0       	breq	.+60     	; 0xac4 <.L15^B1>

00000a88 <.L10^B1>:
 a88:	88 23       	and	r24, r24
 a8a:	4a f0       	brmi	.+18     	; 0xa9e <.L11^B1>
 a8c:	ee 0f       	add	r30, r30
 a8e:	ff 1f       	adc	r31, r31
 a90:	bb 1f       	adc	r27, r27
 a92:	66 1f       	adc	r22, r22
 a94:	77 1f       	adc	r23, r23
 a96:	88 1f       	adc	r24, r24
 a98:	91 50       	subi	r25, 0x01	; 1
 a9a:	50 40       	sbci	r21, 0x00	; 0
 a9c:	a9 f7       	brne	.-22     	; 0xa88 <.L10^B1>

00000a9e <.L11^B1>:
 a9e:	9e 3f       	cpi	r25, 0xFE	; 254
 aa0:	51 05       	cpc	r21, r1
 aa2:	80 f0       	brcs	.+32     	; 0xac4 <.L15^B1>
 aa4:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_inf>

00000aa8 <.L12^B1>:
 aa8:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__fp_szero>

00000aac <.L13^B1>:
 aac:	5f 3f       	cpi	r21, 0xFF	; 255
 aae:	e4 f3       	brlt	.-8      	; 0xaa8 <.L12^B1>
 ab0:	98 3e       	cpi	r25, 0xE8	; 232
 ab2:	d4 f3       	brlt	.-12     	; 0xaa8 <.L12^B1>

00000ab4 <.L14^B1>:
 ab4:	86 95       	lsr	r24
 ab6:	77 95       	ror	r23
 ab8:	67 95       	ror	r22
 aba:	b7 95       	ror	r27
 abc:	f7 95       	ror	r31
 abe:	e7 95       	ror	r30
 ac0:	9f 5f       	subi	r25, 0xFF	; 255
 ac2:	c1 f7       	brne	.-16     	; 0xab4 <.L14^B1>

00000ac4 <.L15^B1>:
 ac4:	fe 2b       	or	r31, r30
 ac6:	88 0f       	add	r24, r24
 ac8:	91 1d       	adc	r25, r1
 aca:	96 95       	lsr	r25
 acc:	87 95       	ror	r24
 ace:	97 f9       	bld	r25, 7
 ad0:	08 95       	ret

00000ad2 <__fp_inf>:
 ad2:	97 f9       	bld	r25, 7
 ad4:	9f 67       	ori	r25, 0x7F	; 127
 ad6:	80 e8       	ldi	r24, 0x80	; 128
 ad8:	70 e0       	ldi	r23, 0x00	; 0
 ada:	60 e0       	ldi	r22, 0x00	; 0
 adc:	08 95       	ret

00000ade <__fp_nan>:
 ade:	9f ef       	ldi	r25, 0xFF	; 255
 ae0:	80 ec       	ldi	r24, 0xC0	; 192
 ae2:	08 95       	ret

00000ae4 <__fp_pscA>:
 ae4:	00 24       	eor	r0, r0
 ae6:	0a 94       	dec	r0
 ae8:	16 16       	cp	r1, r22
 aea:	17 06       	cpc	r1, r23
 aec:	18 06       	cpc	r1, r24
 aee:	09 06       	cpc	r0, r25
 af0:	08 95       	ret

00000af2 <__fp_pscB>:
 af2:	00 24       	eor	r0, r0
 af4:	0a 94       	dec	r0
 af6:	12 16       	cp	r1, r18
 af8:	13 06       	cpc	r1, r19
 afa:	14 06       	cpc	r1, r20
 afc:	05 06       	cpc	r0, r21
 afe:	08 95       	ret

00000b00 <__fp_round>:
 b00:	09 2e       	mov	r0, r25
 b02:	03 94       	inc	r0
 b04:	00 0c       	add	r0, r0
 b06:	11 f4       	brne	.+4      	; 0xb0c <.L1^B1>
 b08:	88 23       	and	r24, r24
 b0a:	52 f0       	brmi	.+20     	; 0xb20 <.L3^B1>

00000b0c <.L1^B1>:
 b0c:	bb 0f       	add	r27, r27
 b0e:	40 f4       	brcc	.+16     	; 0xb20 <.L3^B1>
 b10:	bf 2b       	or	r27, r31
 b12:	11 f4       	brne	.+4      	; 0xb18 <.L2^B1>
 b14:	60 ff       	sbrs	r22, 0
 b16:	04 c0       	rjmp	.+8      	; 0xb20 <.L3^B1>

00000b18 <.L2^B1>:
 b18:	6f 5f       	subi	r22, 0xFF	; 255
 b1a:	7f 4f       	sbci	r23, 0xFF	; 255
 b1c:	8f 4f       	sbci	r24, 0xFF	; 255
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255

00000b20 <.L3^B1>:
 b20:	08 95       	ret

00000b22 <_exit>:
 b22:	f8 94       	cli

00000b24 <__stop_program>:
 b24:	ff cf       	rjmp	.-2      	; 0xb24 <__stop_program>
