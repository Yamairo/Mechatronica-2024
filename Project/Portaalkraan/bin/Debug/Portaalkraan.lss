
bin\Debug\Portaalkraan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  00001ad2  00001b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ad2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800222  00800222  00001ba8  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00001bab  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bc0  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000138  00000000  00000000  00001c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00001975  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001171  00000000  00000000  000036ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   0000129e  00000000  00000000  0000481e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000003e4  00000000  00000000  00005abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000771  00000000  00000000  00005ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001a6  00000000  00000000  00006611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__vector_21>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
      f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
      f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
      fa:	e2 ed       	ldi	r30, 0xD2	; 210

000000fc <.Loc.4>:
      fc:	fa e1       	ldi	r31, 0x1A	; 26

000000fe <.Loc.5>:
      fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
     100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
     102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
     104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
     106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
     108:	a2 32       	cpi	r26, 0x22	; 34

0000010a <.Loc.11>:
     10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
     10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
     110:	a2 e2       	ldi	r26, 0x22	; 34

00000112 <.Loc.2>:
     112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
     114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
     116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
     118:	a2 33       	cpi	r26, 0x32	; 50

0000011a <.Loc.6>:
     11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
     11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
     11e:	0e 94 3a 06 	call	0xc74	; 0xc74 <main>
     122:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <init_interface>:
	~0x66, ~0xB6, ~0xBE, ~0xE0,
	~0xFE, ~0xF6, ~0xEE, ~0x3E,
	~0x9C, ~0x7A, ~0x9E, ~0x8E };

void init_interface (void)
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62

00000132 <.Loc.1>:
	// Initialiseer de pinnen voor datain, shiftclk en latchclk als output
	DDR_SDI    |= (1 << SDI_BIT);
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	fc 01       	movw	r30, r24
     138:	20 81       	ld	r18, Z
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	91 e0       	ldi	r25, 0x01	; 1

0000013e <.Loc.2>:
     13e:	20 62       	ori	r18, 0x20	; 32
     140:	fc 01       	movw	r30, r24
     142:	20 83       	st	Z, r18

00000144 <.Loc.3>:
	DDR_SFTCLK |= (1 << SFTCLK_BIT);
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	fc 01       	movw	r30, r24
     14a:	20 81       	ld	r18, Z
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	91 e0       	ldi	r25, 0x01	; 1

00000150 <.Loc.4>:
     150:	20 61       	ori	r18, 0x10	; 16
     152:	fc 01       	movw	r30, r24
     154:	20 83       	st	Z, r18

00000156 <.Loc.5>:
	DDR_LCHCLK |= (1 << LCHCLK_BIT);
     156:	83 e3       	ldi	r24, 0x33	; 51
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	fc 01       	movw	r30, r24
     15c:	20 81       	ld	r18, Z
     15e:	83 e3       	ldi	r24, 0x33	; 51
     160:	90 e0       	ldi	r25, 0x00	; 0

00000162 <.Loc.6>:
     162:	20 62       	ori	r18, 0x20	; 32
     164:	fc 01       	movw	r30, r24
     166:	20 83       	st	Z, r18

00000168 <.Loc.7>:

	// Maak shiftclk en latchclk laag
	PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
     168:	82 e0       	ldi	r24, 0x02	; 2
     16a:	91 e0       	ldi	r25, 0x01	; 1
     16c:	fc 01       	movw	r30, r24
     16e:	20 81       	ld	r18, Z

00000170 <.Loc.8>:
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	91 e0       	ldi	r25, 0x01	; 1

00000174 <.Loc.9>:
     174:	2f 7e       	andi	r18, 0xEF	; 239
     176:	fc 01       	movw	r30, r24
     178:	20 83       	st	Z, r18

0000017a <.Loc.10>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
     17a:	84 e3       	ldi	r24, 0x34	; 52
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	fc 01       	movw	r30, r24
     180:	20 81       	ld	r18, Z

00000182 <.Loc.11>:
     182:	84 e3       	ldi	r24, 0x34	; 52
     184:	90 e0       	ldi	r25, 0x00	; 0

00000186 <.Loc.12>:
     186:	2f 7d       	andi	r18, 0xDF	; 223
     188:	fc 01       	movw	r30, r24
     18a:	20 83       	st	Z, r18

0000018c <.Loc.13>:
}
     18c:	00 00       	nop
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	08 95       	ret

00000194 <send_data>:

void send_data(char data)
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	00 d0       	rcall	.+0      	; 0x19a <L0^A>

0000019a <L0^A>:
     19a:	0f 92       	push	r0
     19c:	0f 92       	push	r0
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	8d 83       	std	Y+5, r24	; 0x05

000001a4 <.LBB26>:
	for (unsigned i = 0; i < 8; i++)
     1a4:	1a 82       	std	Y+2, r1	; 0x02
     1a6:	19 82       	std	Y+1, r1	; 0x01

000001a8 <.Loc.16>:
     1a8:	39 c0       	rjmp	.+114    	; 0x21c <.L3>

000001aa <.L6>:
	// Herhaal voor alle bits in een char
	{
		// Bepaal de waarde van de bit die je naar het schuifregister
		// wil sturen
		int bit = data & 1;
     1aa:	8d 81       	ldd	r24, Y+5	; 0x05
     1ac:	08 2e       	mov	r0, r24
     1ae:	00 0c       	add	r0, r0
     1b0:	99 0b       	sbc	r25, r25

000001b2 <.Loc.18>:
     1b2:	81 70       	andi	r24, 0x01	; 1
     1b4:	99 27       	eor	r25, r25
     1b6:	9c 83       	std	Y+4, r25	; 0x04
     1b8:	8b 83       	std	Y+3, r24	; 0x03

000001ba <.Loc.19>:
		data >>= 1;
     1ba:	8d 81       	ldd	r24, Y+5	; 0x05
     1bc:	85 95       	asr	r24
     1be:	8d 83       	std	Y+5, r24	; 0x05

000001c0 <.Loc.20>:

		// Maak de juiste pin hoog of laag op basis van de bepaalde waarde
		// van het bit
		if (bit)
     1c0:	8b 81       	ldd	r24, Y+3	; 0x03
     1c2:	9c 81       	ldd	r25, Y+4	; 0x04
     1c4:	00 97       	sbiw	r24, 0x00	; 0
     1c6:	51 f0       	breq	.+20     	; 0x1dc <.L4>

000001c8 <.Loc.21>:
		{
			PORT_SDI |= (1 << SDI_BIT);
     1c8:	82 e0       	ldi	r24, 0x02	; 2
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	fc 01       	movw	r30, r24
     1ce:	20 81       	ld	r18, Z
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	91 e0       	ldi	r25, 0x01	; 1

000001d4 <.Loc.22>:
     1d4:	20 62       	ori	r18, 0x20	; 32
     1d6:	fc 01       	movw	r30, r24
     1d8:	20 83       	st	Z, r18
     1da:	09 c0       	rjmp	.+18     	; 0x1ee <.L5>

000001dc <.L4>:
		}
		else
		{
			PORT_SDI &= ~(1 << SDI_BIT);
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 81       	ld	r18, Z

000001e4 <.Loc.24>:
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	91 e0       	ldi	r25, 0x01	; 1

000001e8 <.Loc.25>:
     1e8:	2f 7d       	andi	r18, 0xDF	; 223
     1ea:	fc 01       	movw	r30, r24
     1ec:	20 83       	st	Z, r18

000001ee <.L5>:
		}

		// Toggle shiftclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
		// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
		// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
		PORT_SFTCLK |= (1 << SFTCLK_BIT);
     1ee:	82 e0       	ldi	r24, 0x02	; 2
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 81       	ld	r18, Z
     1f6:	82 e0       	ldi	r24, 0x02	; 2
     1f8:	91 e0       	ldi	r25, 0x01	; 1

000001fa <.Loc.27>:
     1fa:	20 61       	ori	r18, 0x10	; 16
     1fc:	fc 01       	movw	r30, r24
     1fe:	20 83       	st	Z, r18

00000200 <.Loc.28>:
		PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	fc 01       	movw	r30, r24
     206:	20 81       	ld	r18, Z

00000208 <.Loc.29>:
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	91 e0       	ldi	r25, 0x01	; 1

0000020c <.Loc.30>:
     20c:	2f 7e       	andi	r18, 0xEF	; 239
     20e:	fc 01       	movw	r30, r24
     210:	20 83       	st	Z, r18

00000212 <.LBE27>:
	for (unsigned i = 0; i < 8; i++)
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	9a 81       	ldd	r25, Y+2	; 0x02
     216:	01 96       	adiw	r24, 0x01	; 1
     218:	9a 83       	std	Y+2, r25	; 0x02
     21a:	89 83       	std	Y+1, r24	; 0x01

0000021c <.L3>:
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	9a 81       	ldd	r25, Y+2	; 0x02
     220:	87 30       	cpi	r24, 0x07	; 7
     222:	91 05       	cpc	r25, r1
     224:	11 f2       	breq	.-124    	; 0x1aa <.L6>
     226:	08 f2       	brcs	.-126    	; 0x1aa <.L6>

00000228 <.LBE26>:
	}
}
     228:	00 00       	nop
     22a:	00 00       	nop
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	08 95       	ret

0000023c <send_enable>:

void send_enable(int display_nummer)
{
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	0f 92       	push	r0
     242:	0f 92       	push	r0
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	9a 83       	std	Y+2, r25	; 0x02
     24a:	89 83       	std	Y+1, r24	; 0x01

0000024c <.Loc.35>:
	send_data(0x10 << display_nummer);
     24c:	80 e1       	ldi	r24, 0x10	; 16
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	09 80       	ldd	r0, Y+1	; 0x01
     252:	02 c0       	rjmp	.+4      	; 0x258 <.L2^B1>

00000254 <.L1^B1>:
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25

00000258 <.L2^B1>:
     258:	0a 94       	dec	r0
     25a:	e2 f7       	brpl	.-8      	; 0x254 <.L1^B1>

0000025c <.Loc.36>:
     25c:	0e 94 ca 00 	call	0x194	; 0x194 <send_data>

00000260 <.Loc.37>:
}
     260:	00 00       	nop
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <display>:

void display(char data, int display_nummer)
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	00 d0       	rcall	.+0      	; 0x272 <L0^A>

00000272 <L0^A>:
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	89 83       	std	Y+1, r24	; 0x01
     278:	7b 83       	std	Y+3, r23	; 0x03
     27a:	6a 83       	std	Y+2, r22	; 0x02

0000027c <.Loc.39>:
	send_data(data);
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	0e 94 ca 00 	call	0x194	; 0x194 <send_data>

00000282 <.Loc.40>:
	send_enable(display_nummer);
     282:	8a 81       	ldd	r24, Y+2	; 0x02
     284:	9b 81       	ldd	r25, Y+3	; 0x03
     286:	0e 94 1e 01 	call	0x23c	; 0x23c <send_enable>

0000028a <.Loc.41>:

	// Toggle latchclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
	// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
	// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
	PORT_LCHCLK |= (1 << LCHCLK_BIT);
     28a:	84 e3       	ldi	r24, 0x34	; 52
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	fc 01       	movw	r30, r24
     290:	20 81       	ld	r18, Z
     292:	84 e3       	ldi	r24, 0x34	; 52
     294:	90 e0       	ldi	r25, 0x00	; 0

00000296 <.Loc.42>:
     296:	20 62       	ori	r18, 0x20	; 32
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18

0000029c <.Loc.43>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
     29c:	84 e3       	ldi	r24, 0x34	; 52
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	fc 01       	movw	r30, r24
     2a2:	20 81       	ld	r18, Z

000002a4 <.Loc.44>:
     2a4:	84 e3       	ldi	r24, 0x34	; 52
     2a6:	90 e0       	ldi	r25, 0x00	; 0

000002a8 <.Loc.45>:
     2a8:	2f 7d       	andi	r18, 0xDF	; 223
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18

000002ae <.Loc.46>:
}
     2ae:	00 00       	nop
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <display_getal>:

void display_getal(unsigned int getal)
{
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	a6 97       	sbiw	r28, 0x26	; 38
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	cd bf       	out	0x3d, r28	; 61
     2d0:	9a 8b       	std	Y+18, r25	; 0x12
     2d2:	89 8b       	std	Y+17, r24	; 0x11

000002d4 <.LBB28>:
	for (int i = 0; i < 4; i++)
     2d4:	1a 82       	std	Y+2, r1	; 0x02
     2d6:	19 82       	std	Y+1, r1	; 0x01

000002d8 <.Loc.49>:
     2d8:	cc c0       	rjmp	.+408    	; 0x472 <.L10>

000002da <.L19>:
	{
		display(segmentcodes[getal%10], i);
     2da:	49 89       	ldd	r20, Y+17	; 0x11
     2dc:	5a 89       	ldd	r21, Y+18	; 0x12
     2de:	9a 01       	movw	r18, r20
     2e0:	ad ec       	ldi	r26, 0xCD	; 205
     2e2:	bc ec       	ldi	r27, 0xCC	; 204
     2e4:	0e 94 00 0c 	call	0x1800	; 0x1800 <__umulhisi3>
     2e8:	9c 01       	movw	r18, r24
     2ea:	36 95       	lsr	r19
     2ec:	27 95       	ror	r18
     2ee:	36 95       	lsr	r19
     2f0:	27 95       	ror	r18
     2f2:	36 95       	lsr	r19
     2f4:	27 95       	ror	r18
     2f6:	c9 01       	movw	r24, r18
     2f8:	88 0f       	add	r24, r24
     2fa:	99 1f       	adc	r25, r25
     2fc:	88 0f       	add	r24, r24
     2fe:	99 1f       	adc	r25, r25
     300:	82 0f       	add	r24, r18
     302:	93 1f       	adc	r25, r19
     304:	88 0f       	add	r24, r24
     306:	99 1f       	adc	r25, r25
     308:	9a 01       	movw	r18, r20
     30a:	28 1b       	sub	r18, r24
     30c:	39 0b       	sbc	r19, r25

0000030e <.Loc.51>:
     30e:	c9 01       	movw	r24, r18
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	8e 5f       	subi	r24, 0xFE	; 254
     316:	9d 4f       	sbci	r25, 0xFD	; 253
     318:	dc 01       	movw	r26, r24
     31a:	8d 91       	ld	r24, X+
     31c:	9c 91       	ld	r25, X

0000031e <.Loc.52>:
     31e:	28 2f       	mov	r18, r24
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	9a 81       	ldd	r25, Y+2	; 0x02
     324:	bc 01       	movw	r22, r24
     326:	82 2f       	mov	r24, r18
     328:	0e 94 36 01 	call	0x26c	; 0x26c <display>

0000032c <.Loc.53>:
		getal /= 10;
     32c:	89 89       	ldd	r24, Y+17	; 0x11
     32e:	9a 89       	ldd	r25, Y+18	; 0x12
     330:	9c 01       	movw	r18, r24
     332:	ad ec       	ldi	r26, 0xCD	; 205
     334:	bc ec       	ldi	r27, 0xCC	; 204
     336:	0e 94 00 0c 	call	0x1800	; 0x1800 <__umulhisi3>
     33a:	96 95       	lsr	r25
     33c:	87 95       	ror	r24
     33e:	96 95       	lsr	r25
     340:	87 95       	ror	r24
     342:	96 95       	lsr	r25
     344:	87 95       	ror	r24
     346:	9a 8b       	std	Y+18, r25	; 0x12
     348:	89 8b       	std	Y+17, r24	; 0x11
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	a0 e8       	ldi	r26, 0x80	; 128
     350:	bf e3       	ldi	r27, 0x3F	; 63
     352:	8b 83       	std	Y+3, r24	; 0x03
     354:	9c 83       	std	Y+4, r25	; 0x04
     356:	ad 83       	std	Y+5, r26	; 0x05
     358:	be 83       	std	Y+6, r27	; 0x06

0000035a <.LBB29>:

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	4a e7       	ldi	r20, 0x7A	; 122
     360:	55 e4       	ldi	r21, 0x45	; 69
     362:	6b 81       	ldd	r22, Y+3	; 0x03
     364:	7c 81       	ldd	r23, Y+4	; 0x04
     366:	8d 81       	ldd	r24, Y+5	; 0x05
     368:	9e 81       	ldd	r25, Y+6	; 0x06
     36a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     36e:	6f 8b       	std	Y+23, r22	; 0x17
     370:	78 8f       	std	Y+24, r23	; 0x18
     372:	89 8f       	std	Y+25, r24	; 0x19
     374:	9a 8f       	std	Y+26, r25	; 0x1a
     376:	8f 89       	ldd	r24, Y+23	; 0x17
     378:	98 8d       	ldd	r25, Y+24	; 0x18
     37a:	a9 8d       	ldd	r26, Y+25	; 0x19
     37c:	ba 8d       	ldd	r27, Y+26	; 0x1a
     37e:	8f 83       	std	Y+7, r24	; 0x07
     380:	98 87       	std	Y+8, r25	; 0x08
     382:	a9 87       	std	Y+9, r26	; 0x09
     384:	ba 87       	std	Y+10, r27	; 0x0a

00000386 <.Loc.55>:
	if (__tmp < 1.0)
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	40 e8       	ldi	r20, 0x80	; 128
     38c:	5f e3       	ldi	r21, 0x3F	; 63
     38e:	6f 81       	ldd	r22, Y+7	; 0x07
     390:	78 85       	ldd	r23, Y+8	; 0x08
     392:	89 85       	ldd	r24, Y+9	; 0x09
     394:	9a 85       	ldd	r25, Y+10	; 0x0a
     396:	0e 94 0f 0c 	call	0x181e	; 0x181e <__cmpsf2>
     39a:	88 23       	and	r24, r24
     39c:	2c f4       	brge	.+10     	; 0x3a8 <.L22>

0000039e <.Loc.56>:
		__ticks = 1;
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	9c 87       	std	Y+12, r25	; 0x0c
     3a4:	8b 87       	std	Y+11, r24	; 0x0b
     3a6:	55 c0       	rjmp	.+170    	; 0x452 <.L13>

000003a8 <.L22>:
	else if (__tmp > 65535)
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	3f ef       	ldi	r19, 0xFF	; 255
     3ac:	4f e7       	ldi	r20, 0x7F	; 127
     3ae:	57 e4       	ldi	r21, 0x47	; 71
     3b0:	6f 81       	ldd	r22, Y+7	; 0x07
     3b2:	78 85       	ldd	r23, Y+8	; 0x08
     3b4:	89 85       	ldd	r24, Y+9	; 0x09
     3b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b8:	0e 94 cd 0c 	call	0x199a	; 0x199a <__gesf2>
     3bc:	88 23       	and	r24, r24
     3be:	d9 f1       	breq	.+118    	; 0x436 <.L23>
     3c0:	d4 f1       	brlt	.+116    	; 0x436 <.L23>

000003c2 <.Loc.58>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	40 e2       	ldi	r20, 0x20	; 32
     3c8:	51 e4       	ldi	r21, 0x41	; 65
     3ca:	6b 81       	ldd	r22, Y+3	; 0x03
     3cc:	7c 81       	ldd	r23, Y+4	; 0x04
     3ce:	8d 81       	ldd	r24, Y+5	; 0x05
     3d0:	9e 81       	ldd	r25, Y+6	; 0x06
     3d2:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     3d6:	6b 8f       	std	Y+27, r22	; 0x1b
     3d8:	7c 8f       	std	Y+28, r23	; 0x1c
     3da:	8d 8f       	std	Y+29, r24	; 0x1d
     3dc:	9e 8f       	std	Y+30, r25	; 0x1e
     3de:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3e2:	ad 8d       	ldd	r26, Y+29	; 0x1d
     3e4:	be 8d       	ldd	r27, Y+30	; 0x1e
     3e6:	8b 8b       	std	Y+19, r24	; 0x13
     3e8:	9c 8b       	std	Y+20, r25	; 0x14
     3ea:	ad 8b       	std	Y+21, r26	; 0x15
     3ec:	be 8b       	std	Y+22, r27	; 0x16

000003ee <.Loc.59>:
     3ee:	6b 89       	ldd	r22, Y+19	; 0x13
     3f0:	7c 89       	ldd	r23, Y+20	; 0x14
     3f2:	8d 89       	ldd	r24, Y+21	; 0x15
     3f4:	9e 89       	ldd	r25, Y+22	; 0x16
     3f6:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
     3fa:	6f 8f       	std	Y+31, r22	; 0x1f
     3fc:	78 a3       	std	Y+32, r23	; 0x20
     3fe:	89 a3       	std	Y+33, r24	; 0x21
     400:	9a a3       	std	Y+34, r25	; 0x22
     402:	af 8d       	ldd	r26, Y+31	; 0x1f
     404:	b8 a1       	ldd	r27, Y+32	; 0x20
     406:	bc 87       	std	Y+12, r27	; 0x0c
     408:	ab 87       	std	Y+11, r26	; 0x0b

0000040a <.Loc.60>:
		while(__ticks)
     40a:	10 c0       	rjmp	.+32     	; 0x42c <.L16>

0000040c <.L17>:
     40c:	80 e9       	ldi	r24, 0x90	; 144
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	9e 87       	std	Y+14, r25	; 0x0e
     412:	8d 87       	std	Y+13, r24	; 0x0d

00000414 <.LBB31>:
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
     414:	8d 85       	ldd	r24, Y+13	; 0x0d
     416:	9e 85       	ldd	r25, Y+14	; 0x0e

00000418 <.L1^B2>:
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <.L1^B2>
     41c:	9e 87       	std	Y+14, r25	; 0x0e
     41e:	8d 87       	std	Y+13, r24	; 0x0d

00000420 <.Loc.62>:
	...

00000422 <.LBE31>:
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     422:	8b 85       	ldd	r24, Y+11	; 0x0b
     424:	9c 85       	ldd	r25, Y+12	; 0x0c
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	9c 87       	std	Y+12, r25	; 0x0c
     42a:	8b 87       	std	Y+11, r24	; 0x0b

0000042c <.L16>:
		while(__ticks)
     42c:	8b 85       	ldd	r24, Y+11	; 0x0b
     42e:	9c 85       	ldd	r25, Y+12	; 0x0c
     430:	00 97       	sbiw	r24, 0x00	; 0
     432:	61 f7       	brne	.-40     	; 0x40c <.L17>

00000434 <.Loc.65>:
		}
		return;
     434:	19 c0       	rjmp	.+50     	; 0x468 <.L18>

00000436 <.L23>:
	}
	else
		__ticks = (uint16_t)__tmp;
     436:	6f 81       	ldd	r22, Y+7	; 0x07
     438:	78 85       	ldd	r23, Y+8	; 0x08
     43a:	89 85       	ldd	r24, Y+9	; 0x09
     43c:	9a 85       	ldd	r25, Y+10	; 0x0a
     43e:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
     442:	6b a3       	std	Y+35, r22	; 0x23
     444:	7c a3       	std	Y+36, r23	; 0x24
     446:	8d a3       	std	Y+37, r24	; 0x25
     448:	9e a3       	std	Y+38, r25	; 0x26
     44a:	eb a1       	ldd	r30, Y+35	; 0x23
     44c:	fc a1       	ldd	r31, Y+36	; 0x24
     44e:	fc 87       	std	Y+12, r31	; 0x0c
     450:	eb 87       	std	Y+11, r30	; 0x0b

00000452 <.L13>:
     452:	8b 85       	ldd	r24, Y+11	; 0x0b
     454:	9c 85       	ldd	r25, Y+12	; 0x0c
     456:	98 8b       	std	Y+16, r25	; 0x10
     458:	8f 87       	std	Y+15, r24	; 0x0f

0000045a <.LBB33>:
     45a:	8f 85       	ldd	r24, Y+15	; 0x0f
     45c:	98 89       	ldd	r25, Y+16	; 0x10

0000045e <.L1^B3>:
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <.L1^B3>
     462:	98 8b       	std	Y+16, r25	; 0x10
     464:	8f 87       	std	Y+15, r24	; 0x0f

00000466 <.Loc.68>:
	...

00000468 <.L18>:
	for (int i = 0; i < 4; i++)
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	9a 81       	ldd	r25, Y+2	; 0x02
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	9a 83       	std	Y+2, r25	; 0x02
     470:	89 83       	std	Y+1, r24	; 0x01

00000472 <.L10>:
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	9a 81       	ldd	r25, Y+2	; 0x02
     476:	83 30       	cpi	r24, 0x03	; 3
     478:	91 05       	cpc	r25, r1
     47a:	09 f0       	breq	.+2      	; 0x47e <L0^A>

0000047c <L0^A>:
     47c:	0c f4       	brge	.+2      	; 0x480 <.LBE28>

0000047e <L0^A>:
     47e:	2d cf       	rjmp	.-422    	; 0x2da <.L19>

00000480 <.LBE28>:
		_delay_ms(1);   // 1 kHz
	}
}
     480:	00 00       	nop
     482:	00 00       	nop
     484:	a6 96       	adiw	r28, 0x26	; 38
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <kiesCoordinaat>:

int kiesCoordinaat(void)
{
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	c6 55       	subi	r28, 0x56	; 86
     4a0:	d1 09       	sbc	r29, r1
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd bf       	out	0x3d, r28	; 61

000004ac <.L49>:
    while (1) // Loop until S3 is pressed
    {
        // Check button S1 for decrement
        if (!(PINF & (1 << S1)) && (coordinaat > 0)) {
     4ac:	8f e2       	ldi	r24, 0x2F	; 47
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	dc 01       	movw	r26, r24
     4b2:	8c 91       	ld	r24, X

000004b4 <.Loc.74>:
     4b4:	88 2f       	mov	r24, r24
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	82 70       	andi	r24, 0x02	; 2
     4ba:	99 27       	eor	r25, r25

000004bc <.Loc.75>:
     4bc:	00 97       	sbiw	r24, 0x00	; 0
     4be:	09 f0       	breq	.+2      	; 0x4c2 <.Loc.76>

000004c0 <L0^A>:
     4c0:	cc c0       	rjmp	.+408    	; 0x65a <.L25>

000004c2 <.Loc.76>:
     4c2:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <coordinaat>
     4c6:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <coordinaat+0x1>

000004ca <.Loc.77>:
     4ca:	00 97       	sbiw	r24, 0x00	; 0
     4cc:	09 f0       	breq	.+2      	; 0x4d0 <L0^A>

000004ce <L0^A>:
     4ce:	0c f4       	brge	.+2      	; 0x4d2 <.Loc.78>

000004d0 <L0^A>:
     4d0:	c4 c0       	rjmp	.+392    	; 0x65a <.L25>

000004d2 <.Loc.78>:
            coordinaat--; // Decrement coordinaat
     4d2:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <coordinaat>
     4d6:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <coordinaat+0x1>
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <coordinaat+0x1>
     4e0:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <coordinaat>

000004e4 <.Loc.79>:
            while (!(PINF & (1 << S1))) {
     4e4:	af c0       	rjmp	.+350    	; 0x644 <.L26>

000004e6 <.L35>:
                _delay_ms(tijd);
     4e6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <tijd>
     4ea:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <tijd+0x1>
     4ee:	9c 01       	movw	r18, r24
     4f0:	99 0f       	add	r25, r25
     4f2:	44 0b       	sbc	r20, r20
     4f4:	55 0b       	sbc	r21, r21
     4f6:	2f a7       	std	Y+47, r18	; 0x2f
     4f8:	38 ab       	std	Y+48, r19	; 0x30
     4fa:	49 ab       	std	Y+49, r20	; 0x31
     4fc:	5a ab       	std	Y+50, r21	; 0x32
     4fe:	6f a5       	ldd	r22, Y+47	; 0x2f
     500:	78 a9       	ldd	r23, Y+48	; 0x30
     502:	89 a9       	ldd	r24, Y+49	; 0x31
     504:	9a a9       	ldd	r25, Y+50	; 0x32
     506:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatsisf>
     50a:	6f 8f       	std	Y+31, r22	; 0x1f
     50c:	78 a3       	std	Y+32, r23	; 0x20
     50e:	89 a3       	std	Y+33, r24	; 0x21
     510:	9a a3       	std	Y+34, r25	; 0x22
     512:	8f 8d       	ldd	r24, Y+31	; 0x1f
     514:	98 a1       	ldd	r25, Y+32	; 0x20
     516:	a9 a1       	ldd	r26, Y+33	; 0x21
     518:	ba a1       	ldd	r27, Y+34	; 0x22
     51a:	8b 83       	std	Y+3, r24	; 0x03
     51c:	9c 83       	std	Y+4, r25	; 0x04
     51e:	ad 83       	std	Y+5, r26	; 0x05
     520:	be 83       	std	Y+6, r27	; 0x06

00000522 <.LBB35>:
	__tmp = ((F_CPU) / 4e3) * __ms;
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	4a e7       	ldi	r20, 0x7A	; 122
     528:	55 e4       	ldi	r21, 0x45	; 69
     52a:	6b 81       	ldd	r22, Y+3	; 0x03
     52c:	7c 81       	ldd	r23, Y+4	; 0x04
     52e:	8d 81       	ldd	r24, Y+5	; 0x05
     530:	9e 81       	ldd	r25, Y+6	; 0x06
     532:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     536:	6b ab       	std	Y+51, r22	; 0x33
     538:	7c ab       	std	Y+52, r23	; 0x34
     53a:	8d ab       	std	Y+53, r24	; 0x35
     53c:	9e ab       	std	Y+54, r25	; 0x36
     53e:	2b a9       	ldd	r18, Y+51	; 0x33
     540:	3c a9       	ldd	r19, Y+52	; 0x34
     542:	4d a9       	ldd	r20, Y+53	; 0x35
     544:	5e a9       	ldd	r21, Y+54	; 0x36
     546:	2f 83       	std	Y+7, r18	; 0x07
     548:	38 87       	std	Y+8, r19	; 0x08
     54a:	49 87       	std	Y+9, r20	; 0x09
     54c:	5a 87       	std	Y+10, r21	; 0x0a

0000054e <.Loc.82>:
	if (__tmp < 1.0)
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	40 e8       	ldi	r20, 0x80	; 128
     554:	5f e3       	ldi	r21, 0x3F	; 63
     556:	6f 81       	ldd	r22, Y+7	; 0x07
     558:	78 85       	ldd	r23, Y+8	; 0x08
     55a:	89 85       	ldd	r24, Y+9	; 0x09
     55c:	9a 85       	ldd	r25, Y+10	; 0x0a
     55e:	0e 94 0f 0c 	call	0x181e	; 0x181e <__cmpsf2>
     562:	88 23       	and	r24, r24
     564:	2c f4       	brge	.+10     	; 0x570 <.L54>

00000566 <.Loc.83>:
		__ticks = 1;
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	9c 87       	std	Y+12, r25	; 0x0c
     56c:	8b 87       	std	Y+11, r24	; 0x0b
     56e:	59 c0       	rjmp	.+178    	; 0x622 <.L29>

00000570 <.L54>:
	else if (__tmp > 65535)
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	3f ef       	ldi	r19, 0xFF	; 255
     574:	4f e7       	ldi	r20, 0x7F	; 127
     576:	57 e4       	ldi	r21, 0x47	; 71
     578:	6f 81       	ldd	r22, Y+7	; 0x07
     57a:	78 85       	ldd	r23, Y+8	; 0x08
     57c:	89 85       	ldd	r24, Y+9	; 0x09
     57e:	9a 85       	ldd	r25, Y+10	; 0x0a
     580:	0e 94 cd 0c 	call	0x199a	; 0x199a <__gesf2>
     584:	88 23       	and	r24, r24
     586:	d9 f1       	breq	.+118    	; 0x5fe <.L55>
     588:	d4 f1       	brlt	.+116    	; 0x5fe <.L55>

0000058a <.Loc.85>:
		__ticks = (uint16_t) (__ms * 10.0);
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	40 e2       	ldi	r20, 0x20	; 32
     590:	51 e4       	ldi	r21, 0x41	; 65
     592:	6b 81       	ldd	r22, Y+3	; 0x03
     594:	7c 81       	ldd	r23, Y+4	; 0x04
     596:	8d 81       	ldd	r24, Y+5	; 0x05
     598:	9e 81       	ldd	r25, Y+6	; 0x06
     59a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     59e:	6f ab       	std	Y+55, r22	; 0x37
     5a0:	78 af       	std	Y+56, r23	; 0x38
     5a2:	89 af       	std	Y+57, r24	; 0x39
     5a4:	9a af       	std	Y+58, r25	; 0x3a
     5a6:	8f a9       	ldd	r24, Y+55	; 0x37
     5a8:	98 ad       	ldd	r25, Y+56	; 0x38
     5aa:	a9 ad       	ldd	r26, Y+57	; 0x39
     5ac:	ba ad       	ldd	r27, Y+58	; 0x3a
     5ae:	8f a3       	std	Y+39, r24	; 0x27
     5b0:	98 a7       	std	Y+40, r25	; 0x28
     5b2:	a9 a7       	std	Y+41, r26	; 0x29
     5b4:	ba a7       	std	Y+42, r27	; 0x2a

000005b6 <.Loc.86>:
     5b6:	6f a1       	ldd	r22, Y+39	; 0x27
     5b8:	78 a5       	ldd	r23, Y+40	; 0x28
     5ba:	89 a5       	ldd	r24, Y+41	; 0x29
     5bc:	9a a5       	ldd	r25, Y+42	; 0x2a
     5be:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
     5c2:	6b af       	std	Y+59, r22	; 0x3b
     5c4:	7c af       	std	Y+60, r23	; 0x3c
     5c6:	8d af       	std	Y+61, r24	; 0x3d
     5c8:	9e af       	std	Y+62, r25	; 0x3e
     5ca:	ab ad       	ldd	r26, Y+59	; 0x3b
     5cc:	bc ad       	ldd	r27, Y+60	; 0x3c
     5ce:	bc 87       	std	Y+12, r27	; 0x0c
     5d0:	ab 87       	std	Y+11, r26	; 0x0b

000005d2 <.Loc.87>:
		while(__ticks)
     5d2:	10 c0       	rjmp	.+32     	; 0x5f4 <.L32>

000005d4 <.L33>:
     5d4:	80 e9       	ldi	r24, 0x90	; 144
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	9e 87       	std	Y+14, r25	; 0x0e
     5da:	8d 87       	std	Y+13, r24	; 0x0d

000005dc <.LBB37>:
     5dc:	8d 85       	ldd	r24, Y+13	; 0x0d
     5de:	9e 85       	ldd	r25, Y+14	; 0x0e

000005e0 <.L1^B4>:
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <.L1^B4>
     5e4:	9e 87       	std	Y+14, r25	; 0x0e
     5e6:	8d 87       	std	Y+13, r24	; 0x0d

000005e8 <.Loc.89>:
	...

000005ea <.LBE37>:
			__ticks --;
     5ea:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ec:	9c 85       	ldd	r25, Y+12	; 0x0c
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	9c 87       	std	Y+12, r25	; 0x0c
     5f2:	8b 87       	std	Y+11, r24	; 0x0b

000005f4 <.L32>:
		while(__ticks)
     5f4:	8b 85       	ldd	r24, Y+11	; 0x0b
     5f6:	9c 85       	ldd	r25, Y+12	; 0x0c
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	61 f7       	brne	.-40     	; 0x5d4 <.L33>

000005fc <.Loc.92>:
		return;
     5fc:	1d c0       	rjmp	.+58     	; 0x638 <.L34>

000005fe <.L55>:
		__ticks = (uint16_t)__tmp;
     5fe:	6f 81       	ldd	r22, Y+7	; 0x07
     600:	78 85       	ldd	r23, Y+8	; 0x08
     602:	89 85       	ldd	r24, Y+9	; 0x09
     604:	9a 85       	ldd	r25, Y+10	; 0x0a
     606:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
     60a:	23 96       	adiw	r28, 0x03	; 3
     60c:	6c af       	std	Y+60, r22	; 0x3c
     60e:	7d af       	std	Y+61, r23	; 0x3d
     610:	8e af       	std	Y+62, r24	; 0x3e
     612:	9f af       	std	Y+63, r25	; 0x3f
     614:	23 97       	sbiw	r28, 0x03	; 3
     616:	21 96       	adiw	r28, 0x01	; 1
     618:	ee ad       	ldd	r30, Y+62	; 0x3e
     61a:	ff ad       	ldd	r31, Y+63	; 0x3f
     61c:	21 97       	sbiw	r28, 0x01	; 1
     61e:	fc 87       	std	Y+12, r31	; 0x0c
     620:	eb 87       	std	Y+11, r30	; 0x0b

00000622 <.L29>:
     622:	8b 85       	ldd	r24, Y+11	; 0x0b
     624:	9c 85       	ldd	r25, Y+12	; 0x0c
     626:	98 8b       	std	Y+16, r25	; 0x10
     628:	8f 87       	std	Y+15, r24	; 0x0f

0000062a <.LBB39>:
     62a:	8f 85       	ldd	r24, Y+15	; 0x0f
     62c:	98 89       	ldd	r25, Y+16	; 0x10

0000062e <.L1^B5>:
     62e:	01 97       	sbiw	r24, 0x01	; 1
     630:	f1 f7       	brne	.-4      	; 0x62e <.L1^B5>
     632:	98 8b       	std	Y+16, r25	; 0x10
     634:	8f 87       	std	Y+15, r24	; 0x0f

00000636 <.Loc.95>:
	...

00000638 <.L34>:
                display_getal(coordinaat);
     638:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <coordinaat>
     63c:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <coordinaat+0x1>
     640:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_getal>

00000644 <.L26>:
            while (!(PINF & (1 << S1))) {
     644:	8f e2       	ldi	r24, 0x2F	; 47
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	dc 01       	movw	r26, r24
     64a:	8c 91       	ld	r24, X

0000064c <.Loc.98>:
     64c:	88 2f       	mov	r24, r24
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	82 70       	andi	r24, 0x02	; 2
     652:	99 27       	eor	r25, r25

00000654 <.Loc.99>:
     654:	00 97       	sbiw	r24, 0x00	; 0
     656:	09 f4       	brne	.+2      	; 0x65a <.L25>

00000658 <L0^A>:
     658:	46 cf       	rjmp	.-372    	; 0x4e6 <.L35>

0000065a <.L25>:
            }
        }

        // Check button S2 for increment
        if (!(PINF & (1 << S2)) && (coordinaat < 100)) {
     65a:	8f e2       	ldi	r24, 0x2F	; 47
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	fc 01       	movw	r30, r24
     660:	80 81       	ld	r24, Z

00000662 <.Loc.101>:
     662:	88 2f       	mov	r24, r24
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	84 70       	andi	r24, 0x04	; 4
     668:	99 27       	eor	r25, r25

0000066a <.Loc.102>:
     66a:	00 97       	sbiw	r24, 0x00	; 0
     66c:	09 f0       	breq	.+2      	; 0x670 <.Loc.103>

0000066e <L0^A>:
     66e:	de c0       	rjmp	.+444    	; 0x82c <.L36>

00000670 <.Loc.103>:
     670:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <coordinaat>
     674:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <coordinaat+0x1>

00000678 <.Loc.104>:
     678:	83 36       	cpi	r24, 0x63	; 99
     67a:	91 05       	cpc	r25, r1
     67c:	11 f0       	breq	.+4      	; 0x682 <.Loc.105>

0000067e <L0^A>:
     67e:	0c f0       	brlt	.+2      	; 0x682 <.Loc.105>

00000680 <L0^A>:
     680:	d5 c0       	rjmp	.+426    	; 0x82c <.L36>

00000682 <.Loc.105>:
            coordinaat++; // Increment coordinaat
     682:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <coordinaat>
     686:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <coordinaat+0x1>
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <coordinaat+0x1>
     690:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <coordinaat>

00000694 <.Loc.106>:
            while (!(PINF & (1 << S2))) {
     694:	c0 c0       	rjmp	.+384    	; 0x816 <.L37>

00000696 <.L46>:
                _delay_ms(tijd);
     696:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <tijd>
     69a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <tijd+0x1>
     69e:	9c 01       	movw	r18, r24
     6a0:	99 0f       	add	r25, r25
     6a2:	44 0b       	sbc	r20, r20
     6a4:	55 0b       	sbc	r21, r21
     6a6:	27 96       	adiw	r28, 0x07	; 7
     6a8:	2c af       	std	Y+60, r18	; 0x3c
     6aa:	3d af       	std	Y+61, r19	; 0x3d
     6ac:	4e af       	std	Y+62, r20	; 0x3e
     6ae:	5f af       	std	Y+63, r21	; 0x3f
     6b0:	27 97       	sbiw	r28, 0x07	; 7
     6b2:	27 96       	adiw	r28, 0x07	; 7
     6b4:	6c ad       	ldd	r22, Y+60	; 0x3c
     6b6:	7d ad       	ldd	r23, Y+61	; 0x3d
     6b8:	8e ad       	ldd	r24, Y+62	; 0x3e
     6ba:	9f ad       	ldd	r25, Y+63	; 0x3f
     6bc:	27 97       	sbiw	r28, 0x07	; 7
     6be:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatsisf>
     6c2:	6b a3       	std	Y+35, r22	; 0x23
     6c4:	7c a3       	std	Y+36, r23	; 0x24
     6c6:	8d a3       	std	Y+37, r24	; 0x25
     6c8:	9e a3       	std	Y+38, r25	; 0x26
     6ca:	8b a1       	ldd	r24, Y+35	; 0x23
     6cc:	9c a1       	ldd	r25, Y+36	; 0x24
     6ce:	ad a1       	ldd	r26, Y+37	; 0x25
     6d0:	be a1       	ldd	r27, Y+38	; 0x26
     6d2:	89 8b       	std	Y+17, r24	; 0x11
     6d4:	9a 8b       	std	Y+18, r25	; 0x12
     6d6:	ab 8b       	std	Y+19, r26	; 0x13
     6d8:	bc 8b       	std	Y+20, r27	; 0x14

000006da <.LBB41>:
	__tmp = ((F_CPU) / 4e3) * __ms;
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	4a e7       	ldi	r20, 0x7A	; 122
     6e0:	55 e4       	ldi	r21, 0x45	; 69
     6e2:	69 89       	ldd	r22, Y+17	; 0x11
     6e4:	7a 89       	ldd	r23, Y+18	; 0x12
     6e6:	8b 89       	ldd	r24, Y+19	; 0x13
     6e8:	9c 89       	ldd	r25, Y+20	; 0x14
     6ea:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     6ee:	2b 96       	adiw	r28, 0x0b	; 11
     6f0:	6c af       	std	Y+60, r22	; 0x3c
     6f2:	7d af       	std	Y+61, r23	; 0x3d
     6f4:	8e af       	std	Y+62, r24	; 0x3e
     6f6:	9f af       	std	Y+63, r25	; 0x3f
     6f8:	2b 97       	sbiw	r28, 0x0b	; 11
     6fa:	2b 96       	adiw	r28, 0x0b	; 11
     6fc:	2c ad       	ldd	r18, Y+60	; 0x3c
     6fe:	3d ad       	ldd	r19, Y+61	; 0x3d
     700:	4e ad       	ldd	r20, Y+62	; 0x3e
     702:	5f ad       	ldd	r21, Y+63	; 0x3f
     704:	2b 97       	sbiw	r28, 0x0b	; 11
     706:	2d 8b       	std	Y+21, r18	; 0x15
     708:	3e 8b       	std	Y+22, r19	; 0x16
     70a:	4f 8b       	std	Y+23, r20	; 0x17
     70c:	58 8f       	std	Y+24, r21	; 0x18

0000070e <.Loc.109>:
	if (__tmp < 1.0)
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	40 e8       	ldi	r20, 0x80	; 128
     714:	5f e3       	ldi	r21, 0x3F	; 63
     716:	6d 89       	ldd	r22, Y+21	; 0x15
     718:	7e 89       	ldd	r23, Y+22	; 0x16
     71a:	8f 89       	ldd	r24, Y+23	; 0x17
     71c:	98 8d       	ldd	r25, Y+24	; 0x18
     71e:	0e 94 0f 0c 	call	0x181e	; 0x181e <__cmpsf2>
     722:	88 23       	and	r24, r24
     724:	2c f4       	brge	.+10     	; 0x730 <.L56>

00000726 <.Loc.110>:
		__ticks = 1;
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	9a 8f       	std	Y+26, r25	; 0x1a
     72c:	89 8f       	std	Y+25, r24	; 0x19
     72e:	62 c0       	rjmp	.+196    	; 0x7f4 <.L40>

00000730 <.L56>:
	else if (__tmp > 65535)
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	3f ef       	ldi	r19, 0xFF	; 255
     734:	4f e7       	ldi	r20, 0x7F	; 127
     736:	57 e4       	ldi	r21, 0x47	; 71
     738:	6d 89       	ldd	r22, Y+21	; 0x15
     73a:	7e 89       	ldd	r23, Y+22	; 0x16
     73c:	8f 89       	ldd	r24, Y+23	; 0x17
     73e:	98 8d       	ldd	r25, Y+24	; 0x18
     740:	0e 94 cd 0c 	call	0x199a	; 0x199a <__gesf2>
     744:	88 23       	and	r24, r24
     746:	09 f0       	breq	.+2      	; 0x74a <L0^A>

00000748 <L0^A>:
     748:	0c f4       	brge	.+2      	; 0x74c <.Loc.112>

0000074a <L0^A>:
     74a:	42 c0       	rjmp	.+132    	; 0x7d0 <.L57>

0000074c <.Loc.112>:
		__ticks = (uint16_t) (__ms * 10.0);
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e2       	ldi	r20, 0x20	; 32
     752:	51 e4       	ldi	r21, 0x41	; 65
     754:	69 89       	ldd	r22, Y+17	; 0x11
     756:	7a 89       	ldd	r23, Y+18	; 0x12
     758:	8b 89       	ldd	r24, Y+19	; 0x13
     75a:	9c 89       	ldd	r25, Y+20	; 0x14
     75c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     760:	2f 96       	adiw	r28, 0x0f	; 15
     762:	6c af       	std	Y+60, r22	; 0x3c
     764:	7d af       	std	Y+61, r23	; 0x3d
     766:	8e af       	std	Y+62, r24	; 0x3e
     768:	9f af       	std	Y+63, r25	; 0x3f
     76a:	2f 97       	sbiw	r28, 0x0f	; 15
     76c:	2f 96       	adiw	r28, 0x0f	; 15
     76e:	8c ad       	ldd	r24, Y+60	; 0x3c
     770:	9d ad       	ldd	r25, Y+61	; 0x3d
     772:	ae ad       	ldd	r26, Y+62	; 0x3e
     774:	bf ad       	ldd	r27, Y+63	; 0x3f
     776:	2f 97       	sbiw	r28, 0x0f	; 15
     778:	8b a7       	std	Y+43, r24	; 0x2b
     77a:	9c a7       	std	Y+44, r25	; 0x2c
     77c:	ad a7       	std	Y+45, r26	; 0x2d
     77e:	be a7       	std	Y+46, r27	; 0x2e

00000780 <.Loc.113>:
     780:	6b a5       	ldd	r22, Y+43	; 0x2b
     782:	7c a5       	ldd	r23, Y+44	; 0x2c
     784:	8d a5       	ldd	r24, Y+45	; 0x2d
     786:	9e a5       	ldd	r25, Y+46	; 0x2e
     788:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
     78c:	63 96       	adiw	r28, 0x13	; 19
     78e:	6c af       	std	Y+60, r22	; 0x3c
     790:	7d af       	std	Y+61, r23	; 0x3d
     792:	8e af       	std	Y+62, r24	; 0x3e
     794:	9f af       	std	Y+63, r25	; 0x3f
     796:	63 97       	sbiw	r28, 0x13	; 19
     798:	61 96       	adiw	r28, 0x11	; 17
     79a:	ae ad       	ldd	r26, Y+62	; 0x3e
     79c:	bf ad       	ldd	r27, Y+63	; 0x3f
     79e:	61 97       	sbiw	r28, 0x11	; 17
     7a0:	ba 8f       	std	Y+26, r27	; 0x1a
     7a2:	a9 8f       	std	Y+25, r26	; 0x19

000007a4 <.Loc.114>:
		while(__ticks)
     7a4:	10 c0       	rjmp	.+32     	; 0x7c6 <.L43>

000007a6 <.L44>:
     7a6:	80 e9       	ldi	r24, 0x90	; 144
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	9c 8f       	std	Y+28, r25	; 0x1c
     7ac:	8b 8f       	std	Y+27, r24	; 0x1b

000007ae <.LBB43>:
     7ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7b0:	9c 8d       	ldd	r25, Y+28	; 0x1c

000007b2 <.L1^B6>:
     7b2:	01 97       	sbiw	r24, 0x01	; 1
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <.L1^B6>
     7b6:	9c 8f       	std	Y+28, r25	; 0x1c
     7b8:	8b 8f       	std	Y+27, r24	; 0x1b

000007ba <.Loc.116>:
	...

000007bc <.LBE43>:
			__ticks --;
     7bc:	89 8d       	ldd	r24, Y+25	; 0x19
     7be:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	9a 8f       	std	Y+26, r25	; 0x1a
     7c4:	89 8f       	std	Y+25, r24	; 0x19

000007c6 <.L43>:
		while(__ticks)
     7c6:	89 8d       	ldd	r24, Y+25	; 0x19
     7c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7ca:	00 97       	sbiw	r24, 0x00	; 0
     7cc:	61 f7       	brne	.-40     	; 0x7a6 <.L44>

000007ce <.Loc.119>:
		return;
     7ce:	1d c0       	rjmp	.+58     	; 0x80a <.L45>

000007d0 <.L57>:
		__ticks = (uint16_t)__tmp;
     7d0:	6d 89       	ldd	r22, Y+21	; 0x15
     7d2:	7e 89       	ldd	r23, Y+22	; 0x16
     7d4:	8f 89       	ldd	r24, Y+23	; 0x17
     7d6:	98 8d       	ldd	r25, Y+24	; 0x18
     7d8:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
     7dc:	67 96       	adiw	r28, 0x17	; 23
     7de:	6c af       	std	Y+60, r22	; 0x3c
     7e0:	7d af       	std	Y+61, r23	; 0x3d
     7e2:	8e af       	std	Y+62, r24	; 0x3e
     7e4:	9f af       	std	Y+63, r25	; 0x3f
     7e6:	67 97       	sbiw	r28, 0x17	; 23
     7e8:	65 96       	adiw	r28, 0x15	; 21
     7ea:	ee ad       	ldd	r30, Y+62	; 0x3e
     7ec:	ff ad       	ldd	r31, Y+63	; 0x3f
     7ee:	65 97       	sbiw	r28, 0x15	; 21
     7f0:	fa 8f       	std	Y+26, r31	; 0x1a
     7f2:	e9 8f       	std	Y+25, r30	; 0x19

000007f4 <.L40>:
     7f4:	89 8d       	ldd	r24, Y+25	; 0x19
     7f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7f8:	9e 8f       	std	Y+30, r25	; 0x1e
     7fa:	8d 8f       	std	Y+29, r24	; 0x1d

000007fc <.LBB45>:
     7fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     7fe:	9e 8d       	ldd	r25, Y+30	; 0x1e

00000800 <.L1^B7>:
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	f1 f7       	brne	.-4      	; 0x800 <.L1^B7>
     804:	9e 8f       	std	Y+30, r25	; 0x1e
     806:	8d 8f       	std	Y+29, r24	; 0x1d

00000808 <.Loc.122>:
	...

0000080a <.L45>:
                display_getal(coordinaat);
     80a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <coordinaat>
     80e:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <coordinaat+0x1>
     812:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_getal>

00000816 <.L37>:
            while (!(PINF & (1 << S2))) {
     816:	8f e2       	ldi	r24, 0x2F	; 47
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	dc 01       	movw	r26, r24
     81c:	8c 91       	ld	r24, X

0000081e <.Loc.125>:
     81e:	88 2f       	mov	r24, r24
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	84 70       	andi	r24, 0x04	; 4
     824:	99 27       	eor	r25, r25

00000826 <.Loc.126>:
     826:	00 97       	sbiw	r24, 0x00	; 0
     828:	09 f4       	brne	.+2      	; 0x82c <.L36>

0000082a <L0^A>:
     82a:	35 cf       	rjmp	.-406    	; 0x696 <.L46>

0000082c <.L36>:
            }
        }

        // Continuously display the current value of coordinaat
        display_getal(coordinaat);
     82c:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <coordinaat>
     830:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <coordinaat+0x1>
     834:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_getal>

00000838 <.Loc.128>:

        // Check button S3 for return
        if (!(PINF & (1 << S3))) {
     838:	8f e2       	ldi	r24, 0x2F	; 47
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	fc 01       	movw	r30, r24
     83e:	80 81       	ld	r24, Z

00000840 <.Loc.129>:
     840:	88 2f       	mov	r24, r24
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	88 70       	andi	r24, 0x08	; 8
     846:	99 27       	eor	r25, r25

00000848 <.Loc.130>:
     848:	00 97       	sbiw	r24, 0x00	; 0
     84a:	09 f0       	breq	.+2      	; 0x84e <.LBB47>

0000084c <L0^A>:
     84c:	2f ce       	rjmp	.-930    	; 0x4ac <.L49>

0000084e <.LBB47>:
            display_getal(0x0000); // Clear the display
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_getal>

00000856 <.Loc.132>:
            int result = coordinaat; // Store the current value
     856:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <coordinaat>
     85a:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <coordinaat+0x1>
     85e:	9a 83       	std	Y+2, r25	; 0x02
     860:	89 83       	std	Y+1, r24	; 0x01

00000862 <.Loc.133>:
            coordinaat = 0;         // Reset coordinaat to zero
     862:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <coordinaat+0x1>
     866:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <coordinaat>

0000086a <.Loc.134>:
            return result;          // Return the stored value
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	9a 81       	ldd	r25, Y+2	; 0x02

0000086e <.LBE47>:
        }
    }
}
     86e:	ca 5a       	subi	r28, 0xAA	; 170
     870:	df 4f       	sbci	r29, 0xFF	; 255
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	08 95       	ret

00000882 <isLimitSwitchPressed>:
extern int rpwm_active;
extern int lpwm_active;



int isLimitSwitchPressed(uint8_t inputPin, volatile uint8_t *inputPort, volatile uint8_t *pinReg) {
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	00 d0       	rcall	.+0      	; 0x888 <L0^A>

00000888 <L0^A>:
     888:	0f 92       	push	r0
     88a:	0f 92       	push	r0
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
     890:	89 83       	std	Y+1, r24	; 0x01
     892:	7b 83       	std	Y+3, r23	; 0x03
     894:	6a 83       	std	Y+2, r22	; 0x02
     896:	5d 83       	std	Y+5, r21	; 0x05
     898:	4c 83       	std	Y+4, r20	; 0x04

0000089a <.Loc.1>:
    // Configure the input pin with pull-up resistor
    *inputPort |= (1 << inputPin); // Enable pull-up resistor
     89a:	8a 81       	ldd	r24, Y+2	; 0x02
     89c:	9b 81       	ldd	r25, Y+3	; 0x03
     89e:	fc 01       	movw	r30, r24
     8a0:	80 81       	ld	r24, Z
     8a2:	48 2f       	mov	r20, r24

000008a4 <.Loc.2>:
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	28 2f       	mov	r18, r24
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <.L2^B1>

000008b0 <.L1^B1>:
     8b0:	88 0f       	add	r24, r24
     8b2:	99 1f       	adc	r25, r25

000008b4 <.L2^B1>:
     8b4:	2a 95       	dec	r18
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <.L1^B1>

000008b8 <.Loc.3>:
     8b8:	84 2b       	or	r24, r20
     8ba:	28 2f       	mov	r18, r24
     8bc:	8a 81       	ldd	r24, Y+2	; 0x02
     8be:	9b 81       	ldd	r25, Y+3	; 0x03
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18

000008c4 <.Loc.4>:

    // Check if the button is pressed
    if (!(*pinReg & (1 << inputPin))) { // Input pin LOW (button pressed)
     8c4:	8c 81       	ldd	r24, Y+4	; 0x04
     8c6:	9d 81       	ldd	r25, Y+5	; 0x05
     8c8:	fc 01       	movw	r30, r24
     8ca:	80 81       	ld	r24, Z
     8cc:	88 2f       	mov	r24, r24
     8ce:	90 e0       	ldi	r25, 0x00	; 0

000008d0 <.Loc.5>:
     8d0:	29 81       	ldd	r18, Y+1	; 0x01
     8d2:	22 2f       	mov	r18, r18
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	02 2e       	mov	r0, r18
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <.L2^B2>

000008da <.L1^B2>:
     8da:	95 95       	asr	r25
     8dc:	87 95       	ror	r24

000008de <.L2^B2>:
     8de:	0a 94       	dec	r0
     8e0:	e2 f7       	brpl	.-8      	; 0x8da <.L1^B2>
     8e2:	81 70       	andi	r24, 0x01	; 1
     8e4:	99 27       	eor	r25, r25

000008e6 <.Loc.6>:
     8e6:	00 97       	sbiw	r24, 0x00	; 0
     8e8:	19 f4       	brne	.+6      	; 0x8f0 <.L2>

000008ea <.Loc.7>:
        return 1; // Button is pressed
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <.L3>

000008f0 <.L2>:
    } else { // Input pin HIGH (button not pressed)
        return 0; // Button is not pressed
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0

000008f4 <.L3>:
    }
}
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	08 95       	ret

00000904 <countLimitSwitchPresses>:
 * @param inputPort De poort waaraan de limietschakelaar is verbonden.
 * @param pinReg Het pinregister voor het lezen van de limietschakelaarstatus.
 * @param richting De bewegingsrichting: -1 voor links, +1 voor rechts.
 * @return De bijgewerkte waarde van de teller.
 */
uint16_t countLimitSwitchPresses(uint8_t inputPin, volatile uint8_t *inputPort, volatile uint8_t *pinReg) {
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
     90c:	c9 54       	subi	r28, 0x49	; 73
     90e:	d1 09       	sbc	r29, r1
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	8d 8f       	std	Y+29, r24	; 0x1d
     91c:	7f 8f       	std	Y+31, r23	; 0x1f
     91e:	6e 8f       	std	Y+30, r22	; 0x1e
     920:	59 a3       	std	Y+33, r21	; 0x21
     922:	48 a3       	std	Y+32, r20	; 0x20

00000924 <.Loc.11>:
    static int16_t pressCount = 0; // Persistent teller van activaties (kan negatief worden)
    static uint8_t wasPressed = 0; // Houdt de vorige status van de knop bij

    // Configureer de input pin met een pull-up weerstand
    *inputPort |= (1 << inputPin); // Schakel pull-up weerstand in
     924:	8e 8d       	ldd	r24, Y+30	; 0x1e
     926:	9f 8d       	ldd	r25, Y+31	; 0x1f
     928:	dc 01       	movw	r26, r24
     92a:	8c 91       	ld	r24, X
     92c:	48 2f       	mov	r20, r24

0000092e <.Loc.12>:
     92e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     930:	28 2f       	mov	r18, r24
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	02 c0       	rjmp	.+4      	; 0x93e <.L2^B3>

0000093a <.L1^B3>:
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25

0000093e <.L2^B3>:
     93e:	2a 95       	dec	r18
     940:	e2 f7       	brpl	.-8      	; 0x93a <.L1^B3>

00000942 <.Loc.13>:
     942:	84 2b       	or	r24, r20
     944:	28 2f       	mov	r18, r24
     946:	8e 8d       	ldd	r24, Y+30	; 0x1e
     948:	9f 8d       	ldd	r25, Y+31	; 0x1f
     94a:	fc 01       	movw	r30, r24
     94c:	20 83       	st	Z, r18

0000094e <.Loc.14>:

    // Controleer of de knop momenteel is ingedrukt
    if (!(*pinReg & (1 << inputPin))) { // Knop is ingedrukt
     94e:	88 a1       	ldd	r24, Y+32	; 0x20
     950:	99 a1       	ldd	r25, Y+33	; 0x21
     952:	dc 01       	movw	r26, r24
     954:	8c 91       	ld	r24, X
     956:	88 2f       	mov	r24, r24
     958:	90 e0       	ldi	r25, 0x00	; 0

0000095a <.Loc.15>:
     95a:	2d 8d       	ldd	r18, Y+29	; 0x1d
     95c:	22 2f       	mov	r18, r18
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	02 2e       	mov	r0, r18
     962:	02 c0       	rjmp	.+4      	; 0x968 <.L2^B4>

00000964 <.L1^B4>:
     964:	95 95       	asr	r25
     966:	87 95       	ror	r24

00000968 <.L2^B4>:
     968:	0a 94       	dec	r0
     96a:	e2 f7       	brpl	.-8      	; 0x964 <.L1^B4>
     96c:	81 70       	andi	r24, 0x01	; 1
     96e:	99 27       	eor	r25, r25

00000970 <.Loc.16>:
     970:	00 97       	sbiw	r24, 0x00	; 0
     972:	09 f0       	breq	.+2      	; 0x976 <.Loc.17>

00000974 <L0^A>:
     974:	65 c1       	rjmp	.+714    	; 0xc40 <.L5>

00000976 <.Loc.17>:
        if ((!wasPressed) & rpwm_active) { // Detecteer overgang van niet-ingedrukt naar ingedrukt
     976:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <wasPressed.1>
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	99 23       	and	r25, r25
     97e:	09 f0       	breq	.+2      	; 0x982 <.L6>
     980:	80 e0       	ldi	r24, 0x00	; 0

00000982 <.L6>:
     982:	28 2f       	mov	r18, r24
     984:	30 e0       	ldi	r19, 0x00	; 0

00000986 <.Loc.18>:
     986:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <rpwm_active>
     98a:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <lpwm2_active>
     98e:	82 23       	and	r24, r18
     990:	93 23       	and	r25, r19

00000992 <.Loc.19>:
     992:	00 97       	sbiw	r24, 0x00	; 0
     994:	09 f4       	brne	.+2      	; 0x998 <.Loc.20>

00000996 <L0^A>:
     996:	9b c0       	rjmp	.+310    	; 0xace <.L7>

00000998 <.Loc.20>:
            pressCount += 1; // Pas de teller aan op basis van de richting
     998:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <pressCount.0>
     99c:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <pressCount.0+0x1>
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <pressCount.0+0x1>
     9a6:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <pressCount.0>

000009aa <.Loc.21>:
            wasPressed = 1;         // Markeer de knop als ingedrukt
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <wasPressed.1>
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a8 e4       	ldi	r26, 0x48	; 72
     9b6:	b2 e4       	ldi	r27, 0x42	; 66
     9b8:	89 83       	std	Y+1, r24	; 0x01
     9ba:	9a 83       	std	Y+2, r25	; 0x02
     9bc:	ab 83       	std	Y+3, r26	; 0x03
     9be:	bc 83       	std	Y+4, r27	; 0x04

000009c0 <.LBB18>:
	__tmp = ((F_CPU) / 4e3) * __ms;
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	4a e7       	ldi	r20, 0x7A	; 122
     9c6:	55 e4       	ldi	r21, 0x45	; 69
     9c8:	69 81       	ldd	r22, Y+1	; 0x01
     9ca:	7a 81       	ldd	r23, Y+2	; 0x02
     9cc:	8b 81       	ldd	r24, Y+3	; 0x03
     9ce:	9c 81       	ldd	r25, Y+4	; 0x04
     9d0:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     9d4:	6a a7       	std	Y+42, r22	; 0x2a
     9d6:	7b a7       	std	Y+43, r23	; 0x2b
     9d8:	8c a7       	std	Y+44, r24	; 0x2c
     9da:	9d a7       	std	Y+45, r25	; 0x2d
     9dc:	8a a5       	ldd	r24, Y+42	; 0x2a
     9de:	9b a5       	ldd	r25, Y+43	; 0x2b
     9e0:	ac a5       	ldd	r26, Y+44	; 0x2c
     9e2:	bd a5       	ldd	r27, Y+45	; 0x2d
     9e4:	8d 83       	std	Y+5, r24	; 0x05
     9e6:	9e 83       	std	Y+6, r25	; 0x06
     9e8:	af 83       	std	Y+7, r26	; 0x07
     9ea:	b8 87       	std	Y+8, r27	; 0x08

000009ec <.Loc.23>:
	if (__tmp < 1.0)
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	40 e8       	ldi	r20, 0x80	; 128
     9f2:	5f e3       	ldi	r21, 0x3F	; 63
     9f4:	6d 81       	ldd	r22, Y+5	; 0x05
     9f6:	7e 81       	ldd	r23, Y+6	; 0x06
     9f8:	8f 81       	ldd	r24, Y+7	; 0x07
     9fa:	98 85       	ldd	r25, Y+8	; 0x08
     9fc:	0e 94 0f 0c 	call	0x181e	; 0x181e <__cmpsf2>
     a00:	88 23       	and	r24, r24
     a02:	2c f4       	brge	.+10     	; 0xa0e <.L32>

00000a04 <.Loc.24>:
		__ticks = 1;
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	9a 87       	std	Y+10, r25	; 0x0a
     a0a:	89 87       	std	Y+9, r24	; 0x09
     a0c:	55 c0       	rjmp	.+170    	; 0xab8 <.L10>

00000a0e <.L32>:
	else if (__tmp > 65535)
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	3f ef       	ldi	r19, 0xFF	; 255
     a12:	4f e7       	ldi	r20, 0x7F	; 127
     a14:	57 e4       	ldi	r21, 0x47	; 71
     a16:	6d 81       	ldd	r22, Y+5	; 0x05
     a18:	7e 81       	ldd	r23, Y+6	; 0x06
     a1a:	8f 81       	ldd	r24, Y+7	; 0x07
     a1c:	98 85       	ldd	r25, Y+8	; 0x08
     a1e:	0e 94 cd 0c 	call	0x199a	; 0x199a <__gesf2>
     a22:	88 23       	and	r24, r24
     a24:	d9 f1       	breq	.+118    	; 0xa9c <.L33>
     a26:	d4 f1       	brlt	.+116    	; 0xa9c <.L33>

00000a28 <.Loc.26>:
		__ticks = (uint16_t) (__ms * 10.0);
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	40 e2       	ldi	r20, 0x20	; 32
     a2e:	51 e4       	ldi	r21, 0x41	; 65
     a30:	69 81       	ldd	r22, Y+1	; 0x01
     a32:	7a 81       	ldd	r23, Y+2	; 0x02
     a34:	8b 81       	ldd	r24, Y+3	; 0x03
     a36:	9c 81       	ldd	r25, Y+4	; 0x04
     a38:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     a3c:	6e a7       	std	Y+46, r22	; 0x2e
     a3e:	7f a7       	std	Y+47, r23	; 0x2f
     a40:	88 ab       	std	Y+48, r24	; 0x30
     a42:	99 ab       	std	Y+49, r25	; 0x31
     a44:	8e a5       	ldd	r24, Y+46	; 0x2e
     a46:	9f a5       	ldd	r25, Y+47	; 0x2f
     a48:	a8 a9       	ldd	r26, Y+48	; 0x30
     a4a:	b9 a9       	ldd	r27, Y+49	; 0x31
     a4c:	8a a3       	std	Y+34, r24	; 0x22
     a4e:	9b a3       	std	Y+35, r25	; 0x23
     a50:	ac a3       	std	Y+36, r26	; 0x24
     a52:	bd a3       	std	Y+37, r27	; 0x25

00000a54 <.Loc.27>:
     a54:	6a a1       	ldd	r22, Y+34	; 0x22
     a56:	7b a1       	ldd	r23, Y+35	; 0x23
     a58:	8c a1       	ldd	r24, Y+36	; 0x24
     a5a:	9d a1       	ldd	r25, Y+37	; 0x25
     a5c:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
     a60:	6a ab       	std	Y+50, r22	; 0x32
     a62:	7b ab       	std	Y+51, r23	; 0x33
     a64:	8c ab       	std	Y+52, r24	; 0x34
     a66:	9d ab       	std	Y+53, r25	; 0x35
     a68:	aa a9       	ldd	r26, Y+50	; 0x32
     a6a:	bb a9       	ldd	r27, Y+51	; 0x33
     a6c:	ba 87       	std	Y+10, r27	; 0x0a
     a6e:	a9 87       	std	Y+9, r26	; 0x09

00000a70 <.Loc.28>:
		while(__ticks)
     a70:	10 c0       	rjmp	.+32     	; 0xa92 <.L13>

00000a72 <.L14>:
     a72:	80 e9       	ldi	r24, 0x90	; 144
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	9c 87       	std	Y+12, r25	; 0x0c
     a78:	8b 87       	std	Y+11, r24	; 0x0b

00000a7a <.LBB20>:
     a7a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a7c:	9c 85       	ldd	r25, Y+12	; 0x0c

00000a7e <.L1^B5>:
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	f1 f7       	brne	.-4      	; 0xa7e <.L1^B5>
     a82:	9c 87       	std	Y+12, r25	; 0x0c
     a84:	8b 87       	std	Y+11, r24	; 0x0b

00000a86 <.Loc.30>:
	...

00000a88 <.LBE20>:
			__ticks --;
     a88:	89 85       	ldd	r24, Y+9	; 0x09
     a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	9a 87       	std	Y+10, r25	; 0x0a
     a90:	89 87       	std	Y+9, r24	; 0x09

00000a92 <.L13>:
		while(__ticks)
     a92:	89 85       	ldd	r24, Y+9	; 0x09
     a94:	9a 85       	ldd	r25, Y+10	; 0x0a
     a96:	00 97       	sbiw	r24, 0x00	; 0
     a98:	61 f7       	brne	.-40     	; 0xa72 <.L14>

00000a9a <.Loc.33>:
		return;
     a9a:	19 c0       	rjmp	.+50     	; 0xace <.L7>

00000a9c <.L33>:
		__ticks = (uint16_t)__tmp;
     a9c:	6d 81       	ldd	r22, Y+5	; 0x05
     a9e:	7e 81       	ldd	r23, Y+6	; 0x06
     aa0:	8f 81       	ldd	r24, Y+7	; 0x07
     aa2:	98 85       	ldd	r25, Y+8	; 0x08
     aa4:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
     aa8:	6e ab       	std	Y+54, r22	; 0x36
     aaa:	7f ab       	std	Y+55, r23	; 0x37
     aac:	88 af       	std	Y+56, r24	; 0x38
     aae:	99 af       	std	Y+57, r25	; 0x39
     ab0:	ee a9       	ldd	r30, Y+54	; 0x36
     ab2:	ff a9       	ldd	r31, Y+55	; 0x37
     ab4:	fa 87       	std	Y+10, r31	; 0x0a
     ab6:	e9 87       	std	Y+9, r30	; 0x09

00000ab8 <.L10>:
     ab8:	89 85       	ldd	r24, Y+9	; 0x09
     aba:	9a 85       	ldd	r25, Y+10	; 0x0a
     abc:	9e 87       	std	Y+14, r25	; 0x0e
     abe:	8d 87       	std	Y+13, r24	; 0x0d

00000ac0 <.LBB22>:
     ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ac2:	9e 85       	ldd	r25, Y+14	; 0x0e

00000ac4 <.L1^B6>:
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <.L1^B6>
     ac8:	9e 87       	std	Y+14, r25	; 0x0e
     aca:	8d 87       	std	Y+13, r24	; 0x0d

00000acc <.Loc.36>:
	...

00000ace <.L7>:
            _delay_ms(50);          // Simpele debounce-vertraging
        } if ((!wasPressed) & lpwm_active) { // Detecteer overgang van niet-ingedrukt naar ingedrukt
     ace:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <wasPressed.1>
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	99 23       	and	r25, r25
     ad6:	09 f0       	breq	.+2      	; 0xada <.L16>
     ad8:	80 e0       	ldi	r24, 0x00	; 0

00000ada <.L16>:
     ada:	28 2f       	mov	r18, r24
     adc:	30 e0       	ldi	r19, 0x00	; 0

00000ade <.Loc.38>:
     ade:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <lpwm_active>
     ae2:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <rpwm_active>
     ae6:	82 23       	and	r24, r18
     ae8:	93 23       	and	r25, r19

00000aea <.Loc.39>:
     aea:	00 97       	sbiw	r24, 0x00	; 0
     aec:	09 f4       	brne	.+2      	; 0xaf0 <.Loc.40>

00000aee <L0^A>:
     aee:	aa c0       	rjmp	.+340    	; 0xc44 <.L17>

00000af0 <.Loc.40>:
            pressCount -= 1; // Pas de teller aan op basis van de richting
     af0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <pressCount.0>
     af4:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <pressCount.0+0x1>
     af8:	01 97       	sbiw	r24, 0x01	; 1
     afa:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <pressCount.0+0x1>
     afe:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <pressCount.0>

00000b02 <.Loc.41>:
            wasPressed = 1;         // Markeer de knop als ingedrukt
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <wasPressed.1>
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	a8 e4       	ldi	r26, 0x48	; 72
     b0e:	b2 e4       	ldi	r27, 0x42	; 66
     b10:	8f 87       	std	Y+15, r24	; 0x0f
     b12:	98 8b       	std	Y+16, r25	; 0x10
     b14:	a9 8b       	std	Y+17, r26	; 0x11
     b16:	ba 8b       	std	Y+18, r27	; 0x12

00000b18 <.LBB24>:
	__tmp = ((F_CPU) / 4e3) * __ms;
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	4a e7       	ldi	r20, 0x7A	; 122
     b1e:	55 e4       	ldi	r21, 0x45	; 69
     b20:	6f 85       	ldd	r22, Y+15	; 0x0f
     b22:	78 89       	ldd	r23, Y+16	; 0x10
     b24:	89 89       	ldd	r24, Y+17	; 0x11
     b26:	9a 89       	ldd	r25, Y+18	; 0x12
     b28:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     b2c:	6a af       	std	Y+58, r22	; 0x3a
     b2e:	7b af       	std	Y+59, r23	; 0x3b
     b30:	8c af       	std	Y+60, r24	; 0x3c
     b32:	9d af       	std	Y+61, r25	; 0x3d
     b34:	8a ad       	ldd	r24, Y+58	; 0x3a
     b36:	9b ad       	ldd	r25, Y+59	; 0x3b
     b38:	ac ad       	ldd	r26, Y+60	; 0x3c
     b3a:	bd ad       	ldd	r27, Y+61	; 0x3d
     b3c:	8b 8b       	std	Y+19, r24	; 0x13
     b3e:	9c 8b       	std	Y+20, r25	; 0x14
     b40:	ad 8b       	std	Y+21, r26	; 0x15
     b42:	be 8b       	std	Y+22, r27	; 0x16

00000b44 <.Loc.43>:
	if (__tmp < 1.0)
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	40 e8       	ldi	r20, 0x80	; 128
     b4a:	5f e3       	ldi	r21, 0x3F	; 63
     b4c:	6b 89       	ldd	r22, Y+19	; 0x13
     b4e:	7c 89       	ldd	r23, Y+20	; 0x14
     b50:	8d 89       	ldd	r24, Y+21	; 0x15
     b52:	9e 89       	ldd	r25, Y+22	; 0x16
     b54:	0e 94 0f 0c 	call	0x181e	; 0x181e <__cmpsf2>
     b58:	88 23       	and	r24, r24
     b5a:	2c f4       	brge	.+10     	; 0xb66 <.L34>

00000b5c <.Loc.44>:
		__ticks = 1;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	98 8f       	std	Y+24, r25	; 0x18
     b62:	8f 8b       	std	Y+23, r24	; 0x17
     b64:	62 c0       	rjmp	.+196    	; 0xc2a <.L20>

00000b66 <.L34>:
	else if (__tmp > 65535)
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	3f ef       	ldi	r19, 0xFF	; 255
     b6a:	4f e7       	ldi	r20, 0x7F	; 127
     b6c:	57 e4       	ldi	r21, 0x47	; 71
     b6e:	6b 89       	ldd	r22, Y+19	; 0x13
     b70:	7c 89       	ldd	r23, Y+20	; 0x14
     b72:	8d 89       	ldd	r24, Y+21	; 0x15
     b74:	9e 89       	ldd	r25, Y+22	; 0x16
     b76:	0e 94 cd 0c 	call	0x199a	; 0x199a <__gesf2>
     b7a:	88 23       	and	r24, r24
     b7c:	09 f0       	breq	.+2      	; 0xb80 <L0^A>

00000b7e <L0^A>:
     b7e:	0c f4       	brge	.+2      	; 0xb82 <.Loc.46>

00000b80 <L0^A>:
     b80:	42 c0       	rjmp	.+132    	; 0xc06 <.L35>

00000b82 <.Loc.46>:
		__ticks = (uint16_t) (__ms * 10.0);
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	40 e2       	ldi	r20, 0x20	; 32
     b88:	51 e4       	ldi	r21, 0x41	; 65
     b8a:	6f 85       	ldd	r22, Y+15	; 0x0f
     b8c:	78 89       	ldd	r23, Y+16	; 0x10
     b8e:	89 89       	ldd	r24, Y+17	; 0x11
     b90:	9a 89       	ldd	r25, Y+18	; 0x12
     b92:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     b96:	22 96       	adiw	r28, 0x02	; 2
     b98:	6c af       	std	Y+60, r22	; 0x3c
     b9a:	7d af       	std	Y+61, r23	; 0x3d
     b9c:	8e af       	std	Y+62, r24	; 0x3e
     b9e:	9f af       	std	Y+63, r25	; 0x3f
     ba0:	22 97       	sbiw	r28, 0x02	; 2
     ba2:	22 96       	adiw	r28, 0x02	; 2
     ba4:	8c ad       	ldd	r24, Y+60	; 0x3c
     ba6:	9d ad       	ldd	r25, Y+61	; 0x3d
     ba8:	ae ad       	ldd	r26, Y+62	; 0x3e
     baa:	bf ad       	ldd	r27, Y+63	; 0x3f
     bac:	22 97       	sbiw	r28, 0x02	; 2
     bae:	8e a3       	std	Y+38, r24	; 0x26
     bb0:	9f a3       	std	Y+39, r25	; 0x27
     bb2:	a8 a7       	std	Y+40, r26	; 0x28
     bb4:	b9 a7       	std	Y+41, r27	; 0x29

00000bb6 <.Loc.47>:
     bb6:	6e a1       	ldd	r22, Y+38	; 0x26
     bb8:	7f a1       	ldd	r23, Y+39	; 0x27
     bba:	88 a5       	ldd	r24, Y+40	; 0x28
     bbc:	99 a5       	ldd	r25, Y+41	; 0x29
     bbe:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
     bc2:	26 96       	adiw	r28, 0x06	; 6
     bc4:	6c af       	std	Y+60, r22	; 0x3c
     bc6:	7d af       	std	Y+61, r23	; 0x3d
     bc8:	8e af       	std	Y+62, r24	; 0x3e
     bca:	9f af       	std	Y+63, r25	; 0x3f
     bcc:	26 97       	sbiw	r28, 0x06	; 6
     bce:	24 96       	adiw	r28, 0x04	; 4
     bd0:	ae ad       	ldd	r26, Y+62	; 0x3e
     bd2:	bf ad       	ldd	r27, Y+63	; 0x3f
     bd4:	24 97       	sbiw	r28, 0x04	; 4
     bd6:	b8 8f       	std	Y+24, r27	; 0x18
     bd8:	af 8b       	std	Y+23, r26	; 0x17

00000bda <.Loc.48>:
		while(__ticks)
     bda:	10 c0       	rjmp	.+32     	; 0xbfc <.L23>

00000bdc <.L24>:
     bdc:	80 e9       	ldi	r24, 0x90	; 144
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	9a 8f       	std	Y+26, r25	; 0x1a
     be2:	89 8f       	std	Y+25, r24	; 0x19

00000be4 <.LBB26>:
     be4:	89 8d       	ldd	r24, Y+25	; 0x19
     be6:	9a 8d       	ldd	r25, Y+26	; 0x1a

00000be8 <.L1^B7>:
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <.L1^B7>
     bec:	9a 8f       	std	Y+26, r25	; 0x1a
     bee:	89 8f       	std	Y+25, r24	; 0x19

00000bf0 <.Loc.50>:
	...

00000bf2 <.LBE26>:
			__ticks --;
     bf2:	8f 89       	ldd	r24, Y+23	; 0x17
     bf4:	98 8d       	ldd	r25, Y+24	; 0x18
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	98 8f       	std	Y+24, r25	; 0x18
     bfa:	8f 8b       	std	Y+23, r24	; 0x17

00000bfc <.L23>:
		while(__ticks)
     bfc:	8f 89       	ldd	r24, Y+23	; 0x17
     bfe:	98 8d       	ldd	r25, Y+24	; 0x18
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	61 f7       	brne	.-40     	; 0xbdc <.L24>

00000c04 <.Loc.53>:
		return;
     c04:	1f c0       	rjmp	.+62     	; 0xc44 <.L17>

00000c06 <.L35>:
		__ticks = (uint16_t)__tmp;
     c06:	6b 89       	ldd	r22, Y+19	; 0x13
     c08:	7c 89       	ldd	r23, Y+20	; 0x14
     c0a:	8d 89       	ldd	r24, Y+21	; 0x15
     c0c:	9e 89       	ldd	r25, Y+22	; 0x16
     c0e:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
     c12:	2a 96       	adiw	r28, 0x0a	; 10
     c14:	6c af       	std	Y+60, r22	; 0x3c
     c16:	7d af       	std	Y+61, r23	; 0x3d
     c18:	8e af       	std	Y+62, r24	; 0x3e
     c1a:	9f af       	std	Y+63, r25	; 0x3f
     c1c:	2a 97       	sbiw	r28, 0x0a	; 10
     c1e:	28 96       	adiw	r28, 0x08	; 8
     c20:	ee ad       	ldd	r30, Y+62	; 0x3e
     c22:	ff ad       	ldd	r31, Y+63	; 0x3f
     c24:	28 97       	sbiw	r28, 0x08	; 8
     c26:	f8 8f       	std	Y+24, r31	; 0x18
     c28:	ef 8b       	std	Y+23, r30	; 0x17

00000c2a <.L20>:
     c2a:	8f 89       	ldd	r24, Y+23	; 0x17
     c2c:	98 8d       	ldd	r25, Y+24	; 0x18
     c2e:	9c 8f       	std	Y+28, r25	; 0x1c
     c30:	8b 8f       	std	Y+27, r24	; 0x1b

00000c32 <.LBB28>:
     c32:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c34:	9c 8d       	ldd	r25, Y+28	; 0x1c

00000c36 <.L1^B8>:
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <.L1^B8>
     c3a:	9c 8f       	std	Y+28, r25	; 0x1c
     c3c:	8b 8f       	std	Y+27, r24	; 0x1b

00000c3e <.Loc.56>:
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
#endif /* __AVR_TINY__ */
}
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <.L17>

00000c40 <.L5>:
            _delay_ms(50);          // Simpele debounce-vertraging
        }
    } else { // Knop is niet ingedrukt
        wasPressed = 0; // Reset de ingedrukte status
     c40:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <wasPressed.1>

00000c44 <.L17>:
    }

    // Zorg ervoor dat de teller niet negatief wordt als je dat wilt vermijden
    if (pressCount < 0) {
     c44:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <pressCount.0>
     c48:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <pressCount.0+0x1>

00000c4c <.Loc.59>:
     c4c:	99 23       	and	r25, r25
     c4e:	24 f4       	brge	.+8      	; 0xc58 <.L26>

00000c50 <.Loc.60>:
        pressCount = 0;
     c50:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <pressCount.0+0x1>
     c54:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <pressCount.0>

00000c58 <.L26>:
    }

    return pressCount; // Geef de tellerwaarde terug als unsigned integer
     c58:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <pressCount.0>
     c5c:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <pressCount.0+0x1>

00000c60 <.Loc.62>:
}
     c60:	c7 5b       	subi	r28, 0xB7	; 183
     c62:	df 4f       	sbci	r29, 0xFF	; 255
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	08 95       	ret

00000c74 <main>:
#include <avr/io.h>
#include <util/delay.h>

static uint16_t distanceCount = 0; // Houdt de afgelegde afstand bij

int main(void) {
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	00 d0       	rcall	.+0      	; 0xc7a <L0^A>

00000c7a <L0^A>:
     c7a:	0f 92       	push	r0
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62

00000c80 <.Loc.1>:
    initPortaalkraan(); // Initialiseer het systeem
     c80:	0e 94 bc 07 	call	0xf78	; 0xf78 <initPortaalkraan>

00000c84 <.Loc.2>:
    nulpuntPortaalkraan(); // Beweeg naar het nulpunt
     c84:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <nulpuntPortaalkraan>

00000c88 <.L3>:

    while (1) {
        int eindpunt = kiesCoordinaat();
     c88:	0e 94 4b 02 	call	0x496	; 0x496 <kiesCoordinaat>
     c8c:	9a 83       	std	Y+2, r25	; 0x02
     c8e:	89 83       	std	Y+1, r24	; 0x01

00000c90 <.Loc.4>:
        uint16_t distance = afstandPortaalkraan(); // Lees de huidige afstand
     c90:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <afstandPortaalkraan>
     c94:	9c 83       	std	Y+4, r25	; 0x04
     c96:	8b 83       	std	Y+3, r24	; 0x03

00000c98 <.Loc.5>:

        motorBeweegRechts(); // Beweeg de kraan naar rechts
     c98:	0e 94 d6 06 	call	0xdac	; 0xdac <motorBeweegRechts>

00000c9c <.Loc.6>:

        // Controleer of de afstand 10 eenheden is
        if (distance == eindpunt) {
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02

00000ca0 <.Loc.7>:
     ca0:	2b 81       	ldd	r18, Y+3	; 0x03
     ca2:	3c 81       	ldd	r19, Y+4	; 0x04
     ca4:	28 17       	cp	r18, r24
     ca6:	39 07       	cpc	r19, r25
     ca8:	79 f7       	brne	.-34     	; 0xc88 <.L3>

00000caa <.LBB3>:
            motorStop();       // Stop de motor
     caa:	0e 94 fd 06 	call	0xdfa	; 0xdfa <motorStop>

00000cae <.Loc.9>:
            pakPotplantOp();   // Pak de potplant op
     cae:	0e 94 2a 09 	call	0x1254	; 0x1254 <pakPotplantOp>

00000cb2 <.LBE2>:
    while (1) {
     cb2:	ea cf       	rjmp	.-44     	; 0xc88 <.L3>

00000cb4 <init_timer>:
 *        - Gebruik een prescaler van 64.
 *        - Stel een duty cycle in van 50%.
 *        - Schakel Compare Match A en Overflow interrupts in.
 */
void init_timer(void)
{
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62

00000cbc <.Loc.1>:
    // Zet Timer0 in Normal mode, Prescaler = 64
    TCCR0A = 0; // Normal mode
     cbc:	84 e4       	ldi	r24, 0x44	; 68
     cbe:	90 e0       	ldi	r25, 0x00	; 0

00000cc0 <.Loc.2>:
     cc0:	fc 01       	movw	r30, r24
     cc2:	10 82       	st	Z, r1

00000cc4 <.Loc.3>:
    TCCR0B = (0 << CS02) | (1 << CS01) | (1 << CS00); // Prescaler = 64
     cc4:	85 e4       	ldi	r24, 0x45	; 69
     cc6:	90 e0       	ldi	r25, 0x00	; 0

00000cc8 <.Loc.4>:
     cc8:	23 e0       	ldi	r18, 0x03	; 3
     cca:	fc 01       	movw	r30, r24
     ccc:	20 83       	st	Z, r18

00000cce <.Loc.5>:

    OCR0A = 127;  // Duty cycle van 50%
     cce:	87 e4       	ldi	r24, 0x47	; 71
     cd0:	90 e0       	ldi	r25, 0x00	; 0

00000cd2 <.Loc.6>:
     cd2:	2f e7       	ldi	r18, 0x7F	; 127
     cd4:	fc 01       	movw	r30, r24
     cd6:	20 83       	st	Z, r18

00000cd8 <.Loc.7>:
    TIMSK0 = (1 << OCIE0A) | (1 << TOIE0); // Schakel Compare Match A en Overflow interrupts in
     cd8:	8e e6       	ldi	r24, 0x6E	; 110
     cda:	90 e0       	ldi	r25, 0x00	; 0

00000cdc <.Loc.8>:
     cdc:	23 e0       	ldi	r18, 0x03	; 3
     cde:	fc 01       	movw	r30, r24
     ce0:	20 83       	st	Z, r18

00000ce2 <.Loc.9>:
}
     ce2:	00 00       	nop
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <init_pins>:
 *        - Stel motorbedieningspins (LPWM, RPWM) in als uitgangen en zet deze uit.
 *        - Stel pin 22 in als uitgang.
 *        - Stel PF1 in als invoer met pull-up weerstand (bijvoorbeeld voor een knop).
 */
void init_pins(void)
{
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62

00000cf2 <.Loc.11>:
    // Debug LED instellen
    DDRB |= (1 << PB6);
     cf2:	84 e2       	ldi	r24, 0x24	; 36
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 81       	ld	r18, Z
     cfa:	84 e2       	ldi	r24, 0x24	; 36
     cfc:	90 e0       	ldi	r25, 0x00	; 0

00000cfe <.Loc.12>:
     cfe:	20 64       	ori	r18, 0x40	; 64
     d00:	fc 01       	movw	r30, r24
     d02:	20 83       	st	Z, r18

00000d04 <.Loc.13>:

    // Motorbedieningspins (LPWM, RPWM) instellen als uitgangen, standaard uitgeschakeld
    DDRL |= (1 << LPWM) | (1 << RPWM);
     d04:	8a e0       	ldi	r24, 0x0A	; 10
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	fc 01       	movw	r30, r24
     d0a:	20 81       	ld	r18, Z
     d0c:	8a e0       	ldi	r24, 0x0A	; 10
     d0e:	91 e0       	ldi	r25, 0x01	; 1

00000d10 <.Loc.14>:
     d10:	28 62       	ori	r18, 0x28	; 40
     d12:	fc 01       	movw	r30, r24
     d14:	20 83       	st	Z, r18

00000d16 <.Loc.15>:
    PORTL &= ~(1 << LPWM) & ~(1 << RPWM);
     d16:	8b e0       	ldi	r24, 0x0B	; 11
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	fc 01       	movw	r30, r24
     d1c:	20 81       	ld	r18, Z

00000d1e <.Loc.16>:
     d1e:	8b e0       	ldi	r24, 0x0B	; 11
     d20:	91 e0       	ldi	r25, 0x01	; 1

00000d22 <.Loc.17>:
     d22:	27 7d       	andi	r18, 0xD7	; 215
     d24:	fc 01       	movw	r30, r24
     d26:	20 83       	st	Z, r18

00000d28 <.Loc.18>:

    // Pin 22 (v5) instellen als uitgang
    DDRA |= (1 << vcc1);
     d28:	81 e2       	ldi	r24, 0x21	; 33
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	fc 01       	movw	r30, r24
     d2e:	20 81       	ld	r18, Z
     d30:	81 e2       	ldi	r24, 0x21	; 33
     d32:	90 e0       	ldi	r25, 0x00	; 0

00000d34 <.Loc.19>:
     d34:	21 60       	ori	r18, 0x01	; 1
     d36:	fc 01       	movw	r30, r24
     d38:	20 83       	st	Z, r18

00000d3a <.Loc.20>:
    DDRA |= (1 << vcc2);
     d3a:	81 e2       	ldi	r24, 0x21	; 33
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	fc 01       	movw	r30, r24
     d40:	20 81       	ld	r18, Z
     d42:	81 e2       	ldi	r24, 0x21	; 33
     d44:	90 e0       	ldi	r25, 0x00	; 0

00000d46 <.Loc.21>:
     d46:	22 60       	ori	r18, 0x02	; 2
     d48:	fc 01       	movw	r30, r24
     d4a:	20 83       	st	Z, r18

00000d4c <.Loc.22>:

    // PF1 (knop) instellen als invoer met pull-up weerstand
    DDRF &= ~(1 << PF1);  // PF1 als invoer
     d4c:	80 e3       	ldi	r24, 0x30	; 48
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	fc 01       	movw	r30, r24
     d52:	20 81       	ld	r18, Z

00000d54 <.Loc.23>:
     d54:	80 e3       	ldi	r24, 0x30	; 48
     d56:	90 e0       	ldi	r25, 0x00	; 0

00000d58 <.Loc.24>:
     d58:	2d 7f       	andi	r18, 0xFD	; 253
     d5a:	fc 01       	movw	r30, r24
     d5c:	20 83       	st	Z, r18

00000d5e <.Loc.25>:
    PORTF |= (1 << PF1);  // Pull-up weerstand inschakelen
     d5e:	81 e3       	ldi	r24, 0x31	; 49
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	fc 01       	movw	r30, r24
     d64:	20 81       	ld	r18, Z
     d66:	81 e3       	ldi	r24, 0x31	; 49
     d68:	90 e0       	ldi	r25, 0x00	; 0

00000d6a <.Loc.26>:
     d6a:	22 60       	ori	r18, 0x02	; 2
     d6c:	fc 01       	movw	r30, r24
     d6e:	20 83       	st	Z, r18

00000d70 <.Loc.27>:
}
     d70:	00 00       	nop
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <init>:
/**
 * @brief Initialiseer de motorbediening door pins en timers in te stellen.
 *        Schakel globale interrupts in.
 */
void init(void)
{
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62

00000d80 <.Loc.29>:
    init_pins();    // Pins initialiseren
     d80:	0e 94 75 06 	call	0xcea	; 0xcea <init_pins>

00000d84 <.Loc.30>:
    init_timer();   // Timer initialiseren
     d84:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <init_timer>

00000d88 <.Loc.31>:
    sei();          // Schakel globale interrupts in
     d88:	78 94       	sei

00000d8a <.Loc.32>:
}
     d8a:	00 00       	nop
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <motorBeweegLinks>:

/**
 * @brief Beweeg de motor naar links door LPWM te activeren en RPWM te deactiveren.
 */
void motorBeweegLinks(void)
{
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62

00000d9a <.Loc.34>:
    lpwm_active = 1; // LPWM inschakelen
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <lpwm_active>

00000da0 <.Loc.35>:
    rpwm_active = 0; // RPWM uitschakelen
     da0:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <rpwm_active>

00000da4 <.Loc.36>:
}
     da4:	00 00       	nop
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <motorBeweegRechts>:

/**
 * @brief Beweeg de motor naar rechts door RPWM te activeren en LPWM te deactiveren.
 */
void motorBeweegRechts(void)
{
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62

00000db4 <.Loc.38>:
    rpwm_active = 1; // RPWM inschakelen
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <rpwm_active>

00000dba <.Loc.39>:
    lpwm_active = 0; // LPWM uitschakelen
     dba:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <lpwm_active>

00000dbe <.Loc.40>:
}
     dbe:	00 00       	nop
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	08 95       	ret

00000dc6 <motorBeweegOmlaag>:

/**
 * @brief Beweeg de motor naar beneden door RPWM2 te activeren en LPWM2 te deactiveren.
 */
void motorBeweegOmlaag(void)
{
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62

00000dce <.Loc.42>:
    rpwm2_active = 1; // RPWM2 inschakelen
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <rpwm2_active>

00000dd4 <.Loc.43>:
    lpwm2_active = 0; // LPWM2 uitschakelen
     dd4:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <lpwm2_active>

00000dd8 <.Loc.44>:
}
     dd8:	00 00       	nop
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret

00000de0 <motorBeweegOmhoog>:

/**
 * @brief Beweeg de motor omhoog door LPWM2 te activeren en RPWM2 te deactiveren.
 */
void motorBeweegOmhoog(void)
{
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62

00000de8 <.Loc.46>:
    lpwm2_active = 1; // LPWM2 inschakelen
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <lpwm2_active>

00000dee <.Loc.47>:
    rpwm2_active = 0; // RPWM2 uitschakelen
     dee:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <rpwm2_active>

00000df2 <.Loc.48>:
}
     df2:	00 00       	nop
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <motorStop>:

/**
 * @brief Stop alle motoren door alle PWM-signalen uit te schakelen.
 */
void motorStop(void)
{
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62

00000e02 <.Loc.50>:
    lpwm_active = 0;  // LPWM uitschakelen
     e02:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <lpwm_active>

00000e06 <.Loc.51>:
    rpwm_active = 0;  // RPWM uitschakelen
     e06:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <rpwm_active>

00000e0a <.Loc.52>:
    lpwm2_active = 0; // LPWM2 uitschakelen
     e0a:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <lpwm2_active>

00000e0e <.Loc.53>:
    rpwm2_active = 0; // RPWM2 uitschakelen
     e0e:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <rpwm2_active>

00000e12 <.Loc.54>:

    // Zet alle motorpins uit
    PORTL &= ~(1 << LPWM) & ~(1 << RPWM) & ~(1 << LPWM2) & ~(1 << RPWM2);
     e12:	8b e0       	ldi	r24, 0x0B	; 11
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	fc 01       	movw	r30, r24
     e18:	20 81       	ld	r18, Z

00000e1a <.Loc.55>:
     e1a:	8b e0       	ldi	r24, 0x0B	; 11
     e1c:	91 e0       	ldi	r25, 0x01	; 1

00000e1e <.Loc.56>:
     e1e:	23 7c       	andi	r18, 0xC3	; 195
     e20:	fc 01       	movw	r30, r24
     e22:	20 83       	st	Z, r18

00000e24 <.Loc.57>:
}
     e24:	00 00       	nop
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	08 95       	ret

00000e2c <__vector_21>:
/**
 * @brief ISR (Interrupt Service Routine) voor Timer0 Compare Match A.
 *        Zet de actieve motorpins uit (PWM-signaal laag).
 */
ISR(TIMER0_COMPA_vect)
{
     e2c:	1f 92       	push	r1
     e2e:	0f 92       	push	r0
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	0f 92       	push	r0
     e34:	11 24       	eor	r1, r1
     e36:	0b b6       	in	r0, 0x3b	; 59
     e38:	0f 92       	push	r0
     e3a:	2f 93       	push	r18
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	ef 93       	push	r30
     e42:	ff 93       	push	r31
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62

00000e4c <.Loc.59>:
    if (lpwm_active)
     e4c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <lpwm_active>

00000e50 <.Loc.60>:
     e50:	88 23       	and	r24, r24
     e52:	49 f0       	breq	.+18     	; 0xe66 <.L10>

00000e54 <.Loc.61>:
    {
        PORTL &= ~(1 << LPWM); // LPWM uitschakelen
     e54:	8b e0       	ldi	r24, 0x0B	; 11
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	fc 01       	movw	r30, r24
     e5a:	20 81       	ld	r18, Z

00000e5c <.Loc.62>:
     e5c:	8b e0       	ldi	r24, 0x0B	; 11
     e5e:	91 e0       	ldi	r25, 0x01	; 1

00000e60 <.Loc.63>:
     e60:	2f 7d       	andi	r18, 0xDF	; 223
     e62:	fc 01       	movw	r30, r24
     e64:	20 83       	st	Z, r18

00000e66 <.L10>:
    }
    if (rpwm_active)
     e66:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <rpwm_active>

00000e6a <.Loc.65>:
     e6a:	88 23       	and	r24, r24
     e6c:	49 f0       	breq	.+18     	; 0xe80 <.L11>

00000e6e <.Loc.66>:
    {
        PORTL &= ~(1 << RPWM); // RPWM uitschakelen
     e6e:	8b e0       	ldi	r24, 0x0B	; 11
     e70:	91 e0       	ldi	r25, 0x01	; 1
     e72:	fc 01       	movw	r30, r24
     e74:	20 81       	ld	r18, Z

00000e76 <.Loc.67>:
     e76:	8b e0       	ldi	r24, 0x0B	; 11
     e78:	91 e0       	ldi	r25, 0x01	; 1

00000e7a <.Loc.68>:
     e7a:	27 7f       	andi	r18, 0xF7	; 247
     e7c:	fc 01       	movw	r30, r24
     e7e:	20 83       	st	Z, r18

00000e80 <.L11>:
    }
    if (lpwm2_active)
     e80:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <lpwm2_active>

00000e84 <.Loc.70>:
     e84:	88 23       	and	r24, r24
     e86:	49 f0       	breq	.+18     	; 0xe9a <.L12>

00000e88 <.Loc.71>:
    {
        PORTL &= ~(1 << LPWM2); // LPWM2 uitschakelen
     e88:	8b e0       	ldi	r24, 0x0B	; 11
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	fc 01       	movw	r30, r24
     e8e:	20 81       	ld	r18, Z

00000e90 <.Loc.72>:
     e90:	8b e0       	ldi	r24, 0x0B	; 11
     e92:	91 e0       	ldi	r25, 0x01	; 1

00000e94 <.Loc.73>:
     e94:	2f 7e       	andi	r18, 0xEF	; 239
     e96:	fc 01       	movw	r30, r24
     e98:	20 83       	st	Z, r18

00000e9a <.L12>:
    }
    if (rpwm2_active)
     e9a:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <rpwm2_active>

00000e9e <.Loc.75>:
     e9e:	88 23       	and	r24, r24
     ea0:	49 f0       	breq	.+18     	; 0xeb4 <.L14>

00000ea2 <.Loc.76>:
    {
        PORTL &= ~(1 << RPWM2); // RPWM2 uitschakelen
     ea2:	8b e0       	ldi	r24, 0x0B	; 11
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	fc 01       	movw	r30, r24
     ea8:	20 81       	ld	r18, Z

00000eaa <.Loc.77>:
     eaa:	8b e0       	ldi	r24, 0x0B	; 11
     eac:	91 e0       	ldi	r25, 0x01	; 1

00000eae <.Loc.78>:
     eae:	2b 7f       	andi	r18, 0xFB	; 251
     eb0:	fc 01       	movw	r30, r24
     eb2:	20 83       	st	Z, r18

00000eb4 <.L14>:
    }
}
     eb4:	00 00       	nop
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	ff 91       	pop	r31
     ebc:	ef 91       	pop	r30
     ebe:	9f 91       	pop	r25
     ec0:	8f 91       	pop	r24
     ec2:	2f 91       	pop	r18
     ec4:	0f 90       	pop	r0
     ec6:	0b be       	out	0x3b, r0	; 59
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <__vector_23>:
/**
 * @brief ISR (Interrupt Service Routine) voor Timer0 Overflow.
 *        Zet de actieve motorpins aan (PWM-signaal hoog).
 */
ISR(TIMER0_OVF_vect)
{
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	0b b6       	in	r0, 0x3b	; 59
     ede:	0f 92       	push	r0
     ee0:	2f 93       	push	r18
     ee2:	8f 93       	push	r24
     ee4:	9f 93       	push	r25
     ee6:	ef 93       	push	r30
     ee8:	ff 93       	push	r31
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62

00000ef2 <.Loc.81>:
    if (lpwm_active)
     ef2:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <lpwm_active>

00000ef6 <.Loc.82>:
     ef6:	88 23       	and	r24, r24
     ef8:	49 f0       	breq	.+18     	; 0xf0c <.L16>

00000efa <.Loc.83>:
    {
        PORTL |= (1 << LPWM); // LPWM inschakelen
     efa:	8b e0       	ldi	r24, 0x0B	; 11
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	fc 01       	movw	r30, r24
     f00:	20 81       	ld	r18, Z
     f02:	8b e0       	ldi	r24, 0x0B	; 11
     f04:	91 e0       	ldi	r25, 0x01	; 1

00000f06 <.Loc.84>:
     f06:	20 62       	ori	r18, 0x20	; 32
     f08:	fc 01       	movw	r30, r24
     f0a:	20 83       	st	Z, r18

00000f0c <.L16>:
    }
    if (rpwm_active)
     f0c:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <rpwm_active>

00000f10 <.Loc.86>:
     f10:	88 23       	and	r24, r24
     f12:	49 f0       	breq	.+18     	; 0xf26 <.L17>

00000f14 <.Loc.87>:
    {
        PORTL |= (1 << RPWM); // RPWM inschakelen
     f14:	8b e0       	ldi	r24, 0x0B	; 11
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	fc 01       	movw	r30, r24
     f1a:	20 81       	ld	r18, Z
     f1c:	8b e0       	ldi	r24, 0x0B	; 11
     f1e:	91 e0       	ldi	r25, 0x01	; 1

00000f20 <.Loc.88>:
     f20:	28 60       	ori	r18, 0x08	; 8
     f22:	fc 01       	movw	r30, r24
     f24:	20 83       	st	Z, r18

00000f26 <.L17>:
    }
    if (lpwm2_active)
     f26:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <lpwm2_active>

00000f2a <.Loc.90>:
     f2a:	88 23       	and	r24, r24
     f2c:	49 f0       	breq	.+18     	; 0xf40 <.L18>

00000f2e <.Loc.91>:
    {
        PORTL |= (1 << LPWM2); // LPWM2 inschakelen
     f2e:	8b e0       	ldi	r24, 0x0B	; 11
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	fc 01       	movw	r30, r24
     f34:	20 81       	ld	r18, Z
     f36:	8b e0       	ldi	r24, 0x0B	; 11
     f38:	91 e0       	ldi	r25, 0x01	; 1

00000f3a <.Loc.92>:
     f3a:	20 61       	ori	r18, 0x10	; 16
     f3c:	fc 01       	movw	r30, r24
     f3e:	20 83       	st	Z, r18

00000f40 <.L18>:
    }
    if (rpwm2_active)
     f40:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <rpwm2_active>

00000f44 <.Loc.94>:
     f44:	88 23       	and	r24, r24
     f46:	49 f0       	breq	.+18     	; 0xf5a <.L20>

00000f48 <.Loc.95>:
    {
        PORTL |= (1 << RPWM2); // RPWM2 inschakelen
     f48:	8b e0       	ldi	r24, 0x0B	; 11
     f4a:	91 e0       	ldi	r25, 0x01	; 1
     f4c:	fc 01       	movw	r30, r24
     f4e:	20 81       	ld	r18, Z
     f50:	8b e0       	ldi	r24, 0x0B	; 11
     f52:	91 e0       	ldi	r25, 0x01	; 1

00000f54 <.Loc.96>:
     f54:	24 60       	ori	r18, 0x04	; 4
     f56:	fc 01       	movw	r30, r24
     f58:	20 83       	st	Z, r18

00000f5a <.L20>:
    }
}
     f5a:	00 00       	nop
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	2f 91       	pop	r18
     f6a:	0f 90       	pop	r0
     f6c:	0b be       	out	0x3b, r0	; 59
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti

00000f78 <initPortaalkraan>:
static uint16_t distanceCount = 0;

/**
 * Functie om de portaalkraan te initialiseren
 */
void initPortaalkraan(void) {
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62

00000f80 <.Loc.1>:
    init(); // Initialiseer motorbesturing
     f80:	0e 94 bc 06 	call	0xd78	; 0xd78 <init>

00000f84 <.Loc.2>:

    // Stel PB0, PB1, PB2 in als ingangen voor de limietschakelaars
    DDRB &= ~(1 << PB0) & ~(1 << PB1) & ~(1 << PB2);
     f84:	84 e2       	ldi	r24, 0x24	; 36
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	fc 01       	movw	r30, r24
     f8a:	20 81       	ld	r18, Z

00000f8c <.Loc.3>:
     f8c:	84 e2       	ldi	r24, 0x24	; 36
     f8e:	90 e0       	ldi	r25, 0x00	; 0

00000f90 <.Loc.4>:
     f90:	28 7f       	andi	r18, 0xF8	; 248
     f92:	fc 01       	movw	r30, r24
     f94:	20 83       	st	Z, r18

00000f96 <.Loc.5>:

    // Activeer pull-up weerstanden op PB0, PB1 en PB2
    PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2);
     f96:	85 e2       	ldi	r24, 0x25	; 37
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	fc 01       	movw	r30, r24
     f9c:	20 81       	ld	r18, Z
     f9e:	85 e2       	ldi	r24, 0x25	; 37
     fa0:	90 e0       	ldi	r25, 0x00	; 0

00000fa2 <.Loc.6>:
     fa2:	27 60       	ori	r18, 0x07	; 7
     fa4:	fc 01       	movw	r30, r24
     fa6:	20 83       	st	Z, r18

00000fa8 <.Loc.7>:
}
     fa8:	00 00       	nop
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	08 95       	ret

00000fb0 <nulpuntPortaalkraan>:

/**
 * Functie om het nulpunt van de portaalkraan te bepalen
 */
void nulpuntPortaalkraan(void) {
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	c4 54       	subi	r28, 0x44	; 68
     fba:	d1 09       	sbc	r29, r1
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61

00000fc6 <.Loc.9>:
    motorBeweegLinks(); // Beweeg de motor naar links richting het nulpunt
     fc6:	0e 94 c9 06 	call	0xd92	; 0xd92 <motorBeweegLinks>

00000fca <.Loc.10>:

    // Blijf bewegen totdat de limietschakelaar (PB0) is ingedrukt
    while (!isLimitSwitchPressed(PB0, &PORTB, &PINB)) {
     fca:	8f c0       	rjmp	.+286    	; 0x10ea <.L3>

00000fcc <.L12>:
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a0 e8       	ldi	r26, 0x80	; 128
     fd2:	bf e3       	ldi	r27, 0x3F	; 63
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	ab 83       	std	Y+3, r26	; 0x03
     fda:	bc 83       	std	Y+4, r27	; 0x04

00000fdc <.LBB42>:
	__tmp = ((F_CPU) / 4e3) * __ms;
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	4a e7       	ldi	r20, 0x7A	; 122
     fe2:	55 e4       	ldi	r21, 0x45	; 69
     fe4:	69 81       	ldd	r22, Y+1	; 0x01
     fe6:	7a 81       	ldd	r23, Y+2	; 0x02
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	9c 81       	ldd	r25, Y+4	; 0x04
     fec:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
     ff0:	6d a3       	std	Y+37, r22	; 0x25
     ff2:	7e a3       	std	Y+38, r23	; 0x26
     ff4:	8f a3       	std	Y+39, r24	; 0x27
     ff6:	98 a7       	std	Y+40, r25	; 0x28
     ff8:	8d a1       	ldd	r24, Y+37	; 0x25
     ffa:	9e a1       	ldd	r25, Y+38	; 0x26
     ffc:	af a1       	ldd	r26, Y+39	; 0x27
     ffe:	b8 a5       	ldd	r27, Y+40	; 0x28
    1000:	8d 83       	std	Y+5, r24	; 0x05
    1002:	9e 83       	std	Y+6, r25	; 0x06
    1004:	af 83       	std	Y+7, r26	; 0x07
    1006:	b8 87       	std	Y+8, r27	; 0x08

00001008 <.Loc.12>:
	if (__tmp < 1.0)
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	5f e3       	ldi	r21, 0x3F	; 63
    1010:	6d 81       	ldd	r22, Y+5	; 0x05
    1012:	7e 81       	ldd	r23, Y+6	; 0x06
    1014:	8f 81       	ldd	r24, Y+7	; 0x07
    1016:	98 85       	ldd	r25, Y+8	; 0x08
    1018:	0e 94 0f 0c 	call	0x181e	; 0x181e <__cmpsf2>
    101c:	88 23       	and	r24, r24
    101e:	2c f4       	brge	.+10     	; 0x102a <.L25>

00001020 <.Loc.13>:
		__ticks = 1;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	9a 87       	std	Y+10, r25	; 0x0a
    1026:	89 87       	std	Y+9, r24	; 0x09
    1028:	55 c0       	rjmp	.+170    	; 0x10d4 <.L6>

0000102a <.L25>:
	else if (__tmp > 65535)
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	3f ef       	ldi	r19, 0xFF	; 255
    102e:	4f e7       	ldi	r20, 0x7F	; 127
    1030:	57 e4       	ldi	r21, 0x47	; 71
    1032:	6d 81       	ldd	r22, Y+5	; 0x05
    1034:	7e 81       	ldd	r23, Y+6	; 0x06
    1036:	8f 81       	ldd	r24, Y+7	; 0x07
    1038:	98 85       	ldd	r25, Y+8	; 0x08
    103a:	0e 94 cd 0c 	call	0x199a	; 0x199a <__gesf2>
    103e:	88 23       	and	r24, r24
    1040:	d9 f1       	breq	.+118    	; 0x10b8 <.L26>
    1042:	d4 f1       	brlt	.+116    	; 0x10b8 <.L26>

00001044 <.Loc.15>:
		__ticks = (uint16_t) (__ms * 10.0);
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e2       	ldi	r20, 0x20	; 32
    104a:	51 e4       	ldi	r21, 0x41	; 65
    104c:	69 81       	ldd	r22, Y+1	; 0x01
    104e:	7a 81       	ldd	r23, Y+2	; 0x02
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
    1058:	69 a7       	std	Y+41, r22	; 0x29
    105a:	7a a7       	std	Y+42, r23	; 0x2a
    105c:	8b a7       	std	Y+43, r24	; 0x2b
    105e:	9c a7       	std	Y+44, r25	; 0x2c
    1060:	89 a5       	ldd	r24, Y+41	; 0x29
    1062:	9a a5       	ldd	r25, Y+42	; 0x2a
    1064:	ab a5       	ldd	r26, Y+43	; 0x2b
    1066:	bc a5       	ldd	r27, Y+44	; 0x2c
    1068:	8d 8f       	std	Y+29, r24	; 0x1d
    106a:	9e 8f       	std	Y+30, r25	; 0x1e
    106c:	af 8f       	std	Y+31, r26	; 0x1f
    106e:	b8 a3       	std	Y+32, r27	; 0x20

00001070 <.Loc.16>:
    1070:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1072:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1074:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1076:	98 a1       	ldd	r25, Y+32	; 0x20
    1078:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
    107c:	6d a7       	std	Y+45, r22	; 0x2d
    107e:	7e a7       	std	Y+46, r23	; 0x2e
    1080:	8f a7       	std	Y+47, r24	; 0x2f
    1082:	98 ab       	std	Y+48, r25	; 0x30
    1084:	ad a5       	ldd	r26, Y+45	; 0x2d
    1086:	be a5       	ldd	r27, Y+46	; 0x2e
    1088:	ba 87       	std	Y+10, r27	; 0x0a
    108a:	a9 87       	std	Y+9, r26	; 0x09

0000108c <.Loc.17>:
		while(__ticks)
    108c:	10 c0       	rjmp	.+32     	; 0x10ae <.L9>

0000108e <.L10>:
    108e:	80 e9       	ldi	r24, 0x90	; 144
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	9c 87       	std	Y+12, r25	; 0x0c
    1094:	8b 87       	std	Y+11, r24	; 0x0b

00001096 <.LBB44>:
	__asm__ volatile (
    1096:	8b 85       	ldd	r24, Y+11	; 0x0b
    1098:	9c 85       	ldd	r25, Y+12	; 0x0c

0000109a <.L1^B1>:
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <.L1^B1>
    109e:	9c 87       	std	Y+12, r25	; 0x0c
    10a0:	8b 87       	std	Y+11, r24	; 0x0b

000010a2 <.Loc.19>:
	...

000010a4 <.LBE44>:
			__ticks --;
    10a4:	89 85       	ldd	r24, Y+9	; 0x09
    10a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	9a 87       	std	Y+10, r25	; 0x0a
    10ac:	89 87       	std	Y+9, r24	; 0x09

000010ae <.L9>:
		while(__ticks)
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	61 f7       	brne	.-40     	; 0x108e <.L10>

000010b6 <.Loc.22>:
		return;
    10b6:	19 c0       	rjmp	.+50     	; 0x10ea <.L3>

000010b8 <.L26>:
		__ticks = (uint16_t)__tmp;
    10b8:	6d 81       	ldd	r22, Y+5	; 0x05
    10ba:	7e 81       	ldd	r23, Y+6	; 0x06
    10bc:	8f 81       	ldd	r24, Y+7	; 0x07
    10be:	98 85       	ldd	r25, Y+8	; 0x08
    10c0:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
    10c4:	69 ab       	std	Y+49, r22	; 0x31
    10c6:	7a ab       	std	Y+50, r23	; 0x32
    10c8:	8b ab       	std	Y+51, r24	; 0x33
    10ca:	9c ab       	std	Y+52, r25	; 0x34
    10cc:	89 a9       	ldd	r24, Y+49	; 0x31
    10ce:	9a a9       	ldd	r25, Y+50	; 0x32
    10d0:	9a 87       	std	Y+10, r25	; 0x0a
    10d2:	89 87       	std	Y+9, r24	; 0x09

000010d4 <.L6>:
    10d4:	89 85       	ldd	r24, Y+9	; 0x09
    10d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d8:	9e 87       	std	Y+14, r25	; 0x0e
    10da:	8d 87       	std	Y+13, r24	; 0x0d

000010dc <.LBB46>:
    10dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10de:	9e 85       	ldd	r25, Y+14	; 0x0e

000010e0 <.L1^B2>:
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <.L1^B2>
    10e4:	9e 87       	std	Y+14, r25	; 0x0e
    10e6:	8d 87       	std	Y+13, r24	; 0x0d

000010e8 <.Loc.25>:
	...

000010ea <.L3>:
    10ea:	43 e2       	ldi	r20, 0x23	; 35
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	65 e2       	ldi	r22, 0x25	; 37
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	0e 94 41 04 	call	0x882	; 0x882 <isLimitSwitchPressed>

000010f8 <.Loc.27>:
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	09 f4       	brne	.+2      	; 0x10fe <.Loc.28>

000010fc <L0^A>:
    10fc:	67 cf       	rjmp	.-306    	; 0xfcc <.L12>

000010fe <.Loc.28>:
        _delay_ms(1); // Controleer elke milliseconde
    }

    motorStop(); // Stop de motor zodra het nulpunt is bereikt
    10fe:	0e 94 fd 06 	call	0xdfa	; 0xdfa <motorStop>

00001102 <.Loc.29>:
    motorBeweegRechts(); // Beweeg een klein stukje naar rechts
    1102:	0e 94 d6 06 	call	0xdac	; 0xdac <motorBeweegRechts>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a0 e2       	ldi	r26, 0x20	; 32
    110c:	b1 e4       	ldi	r27, 0x41	; 65
    110e:	8f 87       	std	Y+15, r24	; 0x0f
    1110:	98 8b       	std	Y+16, r25	; 0x10
    1112:	a9 8b       	std	Y+17, r26	; 0x11
    1114:	ba 8b       	std	Y+18, r27	; 0x12

00001116 <.LBB48>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	4a e7       	ldi	r20, 0x7A	; 122
    111c:	55 e4       	ldi	r21, 0x45	; 69
    111e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1120:	78 89       	ldd	r23, Y+16	; 0x10
    1122:	89 89       	ldd	r24, Y+17	; 0x11
    1124:	9a 89       	ldd	r25, Y+18	; 0x12
    1126:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
    112a:	6d ab       	std	Y+53, r22	; 0x35
    112c:	7e ab       	std	Y+54, r23	; 0x36
    112e:	8f ab       	std	Y+55, r24	; 0x37
    1130:	98 af       	std	Y+56, r25	; 0x38
    1132:	8d a9       	ldd	r24, Y+53	; 0x35
    1134:	9e a9       	ldd	r25, Y+54	; 0x36
    1136:	af a9       	ldd	r26, Y+55	; 0x37
    1138:	b8 ad       	ldd	r27, Y+56	; 0x38
    113a:	8b 8b       	std	Y+19, r24	; 0x13
    113c:	9c 8b       	std	Y+20, r25	; 0x14
    113e:	ad 8b       	std	Y+21, r26	; 0x15
    1140:	be 8b       	std	Y+22, r27	; 0x16

00001142 <.Loc.31>:
	if (__tmp < 1.0)
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e8       	ldi	r20, 0x80	; 128
    1148:	5f e3       	ldi	r21, 0x3F	; 63
    114a:	6b 89       	ldd	r22, Y+19	; 0x13
    114c:	7c 89       	ldd	r23, Y+20	; 0x14
    114e:	8d 89       	ldd	r24, Y+21	; 0x15
    1150:	9e 89       	ldd	r25, Y+22	; 0x16
    1152:	0e 94 0f 0c 	call	0x181e	; 0x181e <__cmpsf2>
    1156:	88 23       	and	r24, r24
    1158:	2c f4       	brge	.+10     	; 0x1164 <.L27>

0000115a <.Loc.32>:
		__ticks = 1;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	98 8f       	std	Y+24, r25	; 0x18
    1160:	8f 8b       	std	Y+23, r24	; 0x17
    1162:	5c c0       	rjmp	.+184    	; 0x121c <.L15>

00001164 <.L27>:
	else if (__tmp > 65535)
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	3f ef       	ldi	r19, 0xFF	; 255
    1168:	4f e7       	ldi	r20, 0x7F	; 127
    116a:	57 e4       	ldi	r21, 0x47	; 71
    116c:	6b 89       	ldd	r22, Y+19	; 0x13
    116e:	7c 89       	ldd	r23, Y+20	; 0x14
    1170:	8d 89       	ldd	r24, Y+21	; 0x15
    1172:	9e 89       	ldd	r25, Y+22	; 0x16
    1174:	0e 94 cd 0c 	call	0x199a	; 0x199a <__gesf2>
    1178:	88 23       	and	r24, r24
    117a:	09 f0       	breq	.+2      	; 0x117e <L0^A>

0000117c <L0^A>:
    117c:	0c f4       	brge	.+2      	; 0x1180 <.Loc.34>

0000117e <L0^A>:
    117e:	3c c0       	rjmp	.+120    	; 0x11f8 <.L28>

00001180 <.Loc.34>:
		__ticks = (uint16_t) (__ms * 10.0);
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e2       	ldi	r20, 0x20	; 32
    1186:	51 e4       	ldi	r21, 0x41	; 65
    1188:	6f 85       	ldd	r22, Y+15	; 0x0f
    118a:	78 89       	ldd	r23, Y+16	; 0x10
    118c:	89 89       	ldd	r24, Y+17	; 0x11
    118e:	9a 89       	ldd	r25, Y+18	; 0x12
    1190:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
    1194:	69 af       	std	Y+57, r22	; 0x39
    1196:	7a af       	std	Y+58, r23	; 0x3a
    1198:	8b af       	std	Y+59, r24	; 0x3b
    119a:	9c af       	std	Y+60, r25	; 0x3c
    119c:	89 ad       	ldd	r24, Y+57	; 0x39
    119e:	9a ad       	ldd	r25, Y+58	; 0x3a
    11a0:	ab ad       	ldd	r26, Y+59	; 0x3b
    11a2:	bc ad       	ldd	r27, Y+60	; 0x3c
    11a4:	89 a3       	std	Y+33, r24	; 0x21
    11a6:	9a a3       	std	Y+34, r25	; 0x22
    11a8:	ab a3       	std	Y+35, r26	; 0x23
    11aa:	bc a3       	std	Y+36, r27	; 0x24

000011ac <.Loc.35>:
    11ac:	69 a1       	ldd	r22, Y+33	; 0x21
    11ae:	7a a1       	ldd	r23, Y+34	; 0x22
    11b0:	8b a1       	ldd	r24, Y+35	; 0x23
    11b2:	9c a1       	ldd	r25, Y+36	; 0x24
    11b4:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
    11b8:	21 96       	adiw	r28, 0x01	; 1
    11ba:	6c af       	std	Y+60, r22	; 0x3c
    11bc:	7d af       	std	Y+61, r23	; 0x3d
    11be:	8e af       	std	Y+62, r24	; 0x3e
    11c0:	9f af       	std	Y+63, r25	; 0x3f
    11c2:	21 97       	sbiw	r28, 0x01	; 1
    11c4:	ad ad       	ldd	r26, Y+61	; 0x3d
    11c6:	be ad       	ldd	r27, Y+62	; 0x3e
    11c8:	b8 8f       	std	Y+24, r27	; 0x18
    11ca:	af 8b       	std	Y+23, r26	; 0x17

000011cc <.Loc.36>:
		while(__ticks)
    11cc:	10 c0       	rjmp	.+32     	; 0x11ee <.L18>

000011ce <.L19>:
    11ce:	80 e9       	ldi	r24, 0x90	; 144
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	9a 8f       	std	Y+26, r25	; 0x1a
    11d4:	89 8f       	std	Y+25, r24	; 0x19

000011d6 <.LBB50>:
    11d6:	89 8d       	ldd	r24, Y+25	; 0x19
    11d8:	9a 8d       	ldd	r25, Y+26	; 0x1a

000011da <.L1^B3>:
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <.L1^B3>
    11de:	9a 8f       	std	Y+26, r25	; 0x1a
    11e0:	89 8f       	std	Y+25, r24	; 0x19

000011e2 <.Loc.38>:
	...

000011e4 <.LBE50>:
			__ticks --;
    11e4:	8f 89       	ldd	r24, Y+23	; 0x17
    11e6:	98 8d       	ldd	r25, Y+24	; 0x18
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	98 8f       	std	Y+24, r25	; 0x18
    11ec:	8f 8b       	std	Y+23, r24	; 0x17

000011ee <.L18>:
		while(__ticks)
    11ee:	8f 89       	ldd	r24, Y+23	; 0x17
    11f0:	98 8d       	ldd	r25, Y+24	; 0x18
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	61 f7       	brne	.-40     	; 0x11ce <.L19>

000011f6 <.Loc.41>:
		return;
    11f6:	1d c0       	rjmp	.+58     	; 0x1232 <.L20>

000011f8 <.L28>:
		__ticks = (uint16_t)__tmp;
    11f8:	6b 89       	ldd	r22, Y+19	; 0x13
    11fa:	7c 89       	ldd	r23, Y+20	; 0x14
    11fc:	8d 89       	ldd	r24, Y+21	; 0x15
    11fe:	9e 89       	ldd	r25, Y+22	; 0x16
    1200:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
    1204:	25 96       	adiw	r28, 0x05	; 5
    1206:	6c af       	std	Y+60, r22	; 0x3c
    1208:	7d af       	std	Y+61, r23	; 0x3d
    120a:	8e af       	std	Y+62, r24	; 0x3e
    120c:	9f af       	std	Y+63, r25	; 0x3f
    120e:	25 97       	sbiw	r28, 0x05	; 5
    1210:	23 96       	adiw	r28, 0x03	; 3
    1212:	8e ad       	ldd	r24, Y+62	; 0x3e
    1214:	9f ad       	ldd	r25, Y+63	; 0x3f
    1216:	23 97       	sbiw	r28, 0x03	; 3
    1218:	98 8f       	std	Y+24, r25	; 0x18
    121a:	8f 8b       	std	Y+23, r24	; 0x17

0000121c <.L15>:
    121c:	8f 89       	ldd	r24, Y+23	; 0x17
    121e:	98 8d       	ldd	r25, Y+24	; 0x18
    1220:	9c 8f       	std	Y+28, r25	; 0x1c
    1222:	8b 8f       	std	Y+27, r24	; 0x1b

00001224 <.LBB52>:
    1224:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1226:	9c 8d       	ldd	r25, Y+28	; 0x1c

00001228 <.L1^B4>:
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	f1 f7       	brne	.-4      	; 0x1228 <.L1^B4>
    122c:	9c 8f       	std	Y+28, r25	; 0x1c
    122e:	8b 8f       	std	Y+27, r24	; 0x1b

00001230 <.Loc.44>:
	...

00001232 <.L20>:
    _delay_ms(10);       // Wacht 10 ms
    motorStop();         // Stop de motor
    1232:	0e 94 fd 06 	call	0xdfa	; 0xdfa <motorStop>

00001236 <.Loc.46>:

    distanceCount = 0;   // Reset de afstandsteller
    1236:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <distanceCount+0x1>
    123a:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <distanceCount>

0000123e <.Loc.47>:
}
    123e:	00 00       	nop
    1240:	cc 5b       	subi	r28, 0xBC	; 188
    1242:	df 4f       	sbci	r29, 0xFF	; 255
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <pakPotplantOp>:

/**
 * Functie om een potplant op te pakken
 */
void pakPotplantOp(void) {
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	c4 54       	subi	r28, 0x44	; 68
    125e:	d1 09       	sbc	r29, r1
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61

0000126a <.Loc.49>:
    portaalkraanMagneetAan(); // Activeer de magneet om de potplant op te pakken
    126a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <portaalkraanMagneetAan>

0000126e <.Loc.50>:
    motorBeweegOmlaag();      // Beweeg de motor naar beneden
    126e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <motorBeweegOmlaag>

00001272 <.Loc.51>:
    // Blijf bewegen totdat de onderste limietschakelaar (PB2) is ingedrukt
    while (!isLimitSwitchPressed(PB2, &PORTB, &PINB)) {
    1272:	8f c0       	rjmp	.+286    	; 0x1392 <.L30>

00001274 <.L39>:
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	a0 e8       	ldi	r26, 0x80	; 128
    127a:	bf e3       	ldi	r27, 0x3F	; 63
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	9a 83       	std	Y+2, r25	; 0x02
    1280:	ab 83       	std	Y+3, r26	; 0x03
    1282:	bc 83       	std	Y+4, r27	; 0x04

00001284 <.LBB54>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4a e7       	ldi	r20, 0x7A	; 122
    128a:	55 e4       	ldi	r21, 0x45	; 69
    128c:	69 81       	ldd	r22, Y+1	; 0x01
    128e:	7a 81       	ldd	r23, Y+2	; 0x02
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
    1298:	6d a3       	std	Y+37, r22	; 0x25
    129a:	7e a3       	std	Y+38, r23	; 0x26
    129c:	8f a3       	std	Y+39, r24	; 0x27
    129e:	98 a7       	std	Y+40, r25	; 0x28
    12a0:	8d a1       	ldd	r24, Y+37	; 0x25
    12a2:	9e a1       	ldd	r25, Y+38	; 0x26
    12a4:	af a1       	ldd	r26, Y+39	; 0x27
    12a6:	b8 a5       	ldd	r27, Y+40	; 0x28
    12a8:	8d 83       	std	Y+5, r24	; 0x05
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	af 83       	std	Y+7, r26	; 0x07
    12ae:	b8 87       	std	Y+8, r27	; 0x08

000012b0 <.Loc.53>:
	if (__tmp < 1.0)
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e8       	ldi	r20, 0x80	; 128
    12b6:	5f e3       	ldi	r21, 0x3F	; 63
    12b8:	6d 81       	ldd	r22, Y+5	; 0x05
    12ba:	7e 81       	ldd	r23, Y+6	; 0x06
    12bc:	8f 81       	ldd	r24, Y+7	; 0x07
    12be:	98 85       	ldd	r25, Y+8	; 0x08
    12c0:	0e 94 0f 0c 	call	0x181e	; 0x181e <__cmpsf2>
    12c4:	88 23       	and	r24, r24
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <.L54>

000012c8 <.Loc.54>:
		__ticks = 1;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9a 87       	std	Y+10, r25	; 0x0a
    12ce:	89 87       	std	Y+9, r24	; 0x09
    12d0:	55 c0       	rjmp	.+170    	; 0x137c <.L33>

000012d2 <.L54>:
	else if (__tmp > 65535)
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	3f ef       	ldi	r19, 0xFF	; 255
    12d6:	4f e7       	ldi	r20, 0x7F	; 127
    12d8:	57 e4       	ldi	r21, 0x47	; 71
    12da:	6d 81       	ldd	r22, Y+5	; 0x05
    12dc:	7e 81       	ldd	r23, Y+6	; 0x06
    12de:	8f 81       	ldd	r24, Y+7	; 0x07
    12e0:	98 85       	ldd	r25, Y+8	; 0x08
    12e2:	0e 94 cd 0c 	call	0x199a	; 0x199a <__gesf2>
    12e6:	88 23       	and	r24, r24
    12e8:	d9 f1       	breq	.+118    	; 0x1360 <.L55>
    12ea:	d4 f1       	brlt	.+116    	; 0x1360 <.L55>

000012ec <.Loc.56>:
		__ticks = (uint16_t) (__ms * 10.0);
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e2       	ldi	r20, 0x20	; 32
    12f2:	51 e4       	ldi	r21, 0x41	; 65
    12f4:	69 81       	ldd	r22, Y+1	; 0x01
    12f6:	7a 81       	ldd	r23, Y+2	; 0x02
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
    1300:	69 a7       	std	Y+41, r22	; 0x29
    1302:	7a a7       	std	Y+42, r23	; 0x2a
    1304:	8b a7       	std	Y+43, r24	; 0x2b
    1306:	9c a7       	std	Y+44, r25	; 0x2c
    1308:	89 a5       	ldd	r24, Y+41	; 0x29
    130a:	9a a5       	ldd	r25, Y+42	; 0x2a
    130c:	ab a5       	ldd	r26, Y+43	; 0x2b
    130e:	bc a5       	ldd	r27, Y+44	; 0x2c
    1310:	8d 8f       	std	Y+29, r24	; 0x1d
    1312:	9e 8f       	std	Y+30, r25	; 0x1e
    1314:	af 8f       	std	Y+31, r26	; 0x1f
    1316:	b8 a3       	std	Y+32, r27	; 0x20

00001318 <.Loc.57>:
    1318:	6d 8d       	ldd	r22, Y+29	; 0x1d
    131a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    131c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    131e:	98 a1       	ldd	r25, Y+32	; 0x20
    1320:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
    1324:	6d a7       	std	Y+45, r22	; 0x2d
    1326:	7e a7       	std	Y+46, r23	; 0x2e
    1328:	8f a7       	std	Y+47, r24	; 0x2f
    132a:	98 ab       	std	Y+48, r25	; 0x30
    132c:	ad a5       	ldd	r26, Y+45	; 0x2d
    132e:	be a5       	ldd	r27, Y+46	; 0x2e
    1330:	ba 87       	std	Y+10, r27	; 0x0a
    1332:	a9 87       	std	Y+9, r26	; 0x09

00001334 <.Loc.58>:
		while(__ticks)
    1334:	10 c0       	rjmp	.+32     	; 0x1356 <.L36>

00001336 <.L37>:
    1336:	80 e9       	ldi	r24, 0x90	; 144
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	9c 87       	std	Y+12, r25	; 0x0c
    133c:	8b 87       	std	Y+11, r24	; 0x0b

0000133e <.LBB56>:
    133e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1340:	9c 85       	ldd	r25, Y+12	; 0x0c

00001342 <.L1^B5>:
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	f1 f7       	brne	.-4      	; 0x1342 <.L1^B5>
    1346:	9c 87       	std	Y+12, r25	; 0x0c
    1348:	8b 87       	std	Y+11, r24	; 0x0b

0000134a <.Loc.60>:
	...

0000134c <.LBE56>:
			__ticks --;
    134c:	89 85       	ldd	r24, Y+9	; 0x09
    134e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	9a 87       	std	Y+10, r25	; 0x0a
    1354:	89 87       	std	Y+9, r24	; 0x09

00001356 <.L36>:
		while(__ticks)
    1356:	89 85       	ldd	r24, Y+9	; 0x09
    1358:	9a 85       	ldd	r25, Y+10	; 0x0a
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	61 f7       	brne	.-40     	; 0x1336 <.L37>

0000135e <.Loc.63>:
		return;
    135e:	19 c0       	rjmp	.+50     	; 0x1392 <.L30>

00001360 <.L55>:
		__ticks = (uint16_t)__tmp;
    1360:	6d 81       	ldd	r22, Y+5	; 0x05
    1362:	7e 81       	ldd	r23, Y+6	; 0x06
    1364:	8f 81       	ldd	r24, Y+7	; 0x07
    1366:	98 85       	ldd	r25, Y+8	; 0x08
    1368:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
    136c:	69 ab       	std	Y+49, r22	; 0x31
    136e:	7a ab       	std	Y+50, r23	; 0x32
    1370:	8b ab       	std	Y+51, r24	; 0x33
    1372:	9c ab       	std	Y+52, r25	; 0x34
    1374:	89 a9       	ldd	r24, Y+49	; 0x31
    1376:	9a a9       	ldd	r25, Y+50	; 0x32
    1378:	9a 87       	std	Y+10, r25	; 0x0a
    137a:	89 87       	std	Y+9, r24	; 0x09

0000137c <.L33>:
    137c:	89 85       	ldd	r24, Y+9	; 0x09
    137e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1380:	9e 87       	std	Y+14, r25	; 0x0e
    1382:	8d 87       	std	Y+13, r24	; 0x0d

00001384 <.LBB58>:
    1384:	8d 85       	ldd	r24, Y+13	; 0x0d
    1386:	9e 85       	ldd	r25, Y+14	; 0x0e

00001388 <.L1^B6>:
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <.L1^B6>
    138c:	9e 87       	std	Y+14, r25	; 0x0e
    138e:	8d 87       	std	Y+13, r24	; 0x0d

00001390 <.Loc.66>:
	...

00001392 <.L30>:
    1392:	43 e2       	ldi	r20, 0x23	; 35
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	65 e2       	ldi	r22, 0x25	; 37
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	82 e0       	ldi	r24, 0x02	; 2
    139c:	0e 94 41 04 	call	0x882	; 0x882 <isLimitSwitchPressed>

000013a0 <.Loc.68>:
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <.Loc.69>

000013a4 <L0^A>:
    13a4:	67 cf       	rjmp	.-306    	; 0x1274 <.L39>

000013a6 <.Loc.69>:
        _delay_ms(1); // Controleer elke milliseconde
    }
    motorStop();
    13a6:	0e 94 fd 06 	call	0xdfa	; 0xdfa <motorStop>

000013aa <.Loc.70>:
    portaalkraanMagneetAan();
    13aa:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <portaalkraanMagneetAan>

000013ae <.Loc.71>:
    motorBeweegOmhoog();
    13ae:	0e 94 f0 06 	call	0xde0	; 0xde0 <motorBeweegOmhoog>

000013b2 <.Loc.72>:
    while (!isLimitSwitchPressed(PB3, &PORTB, &PINB)) {
    13b2:	96 c0       	rjmp	.+300    	; 0x14e0 <.L40>

000013b4 <.L49>:
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a0 e8       	ldi	r26, 0x80	; 128
    13ba:	bf e3       	ldi	r27, 0x3F	; 63
    13bc:	8f 87       	std	Y+15, r24	; 0x0f
    13be:	98 8b       	std	Y+16, r25	; 0x10
    13c0:	a9 8b       	std	Y+17, r26	; 0x11
    13c2:	ba 8b       	std	Y+18, r27	; 0x12

000013c4 <.LBB60>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	4a e7       	ldi	r20, 0x7A	; 122
    13ca:	55 e4       	ldi	r21, 0x45	; 69
    13cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    13ce:	78 89       	ldd	r23, Y+16	; 0x10
    13d0:	89 89       	ldd	r24, Y+17	; 0x11
    13d2:	9a 89       	ldd	r25, Y+18	; 0x12
    13d4:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
    13d8:	6d ab       	std	Y+53, r22	; 0x35
    13da:	7e ab       	std	Y+54, r23	; 0x36
    13dc:	8f ab       	std	Y+55, r24	; 0x37
    13de:	98 af       	std	Y+56, r25	; 0x38
    13e0:	8d a9       	ldd	r24, Y+53	; 0x35
    13e2:	9e a9       	ldd	r25, Y+54	; 0x36
    13e4:	af a9       	ldd	r26, Y+55	; 0x37
    13e6:	b8 ad       	ldd	r27, Y+56	; 0x38
    13e8:	8b 8b       	std	Y+19, r24	; 0x13
    13ea:	9c 8b       	std	Y+20, r25	; 0x14
    13ec:	ad 8b       	std	Y+21, r26	; 0x15
    13ee:	be 8b       	std	Y+22, r27	; 0x16

000013f0 <.Loc.74>:
	if (__tmp < 1.0)
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e8       	ldi	r20, 0x80	; 128
    13f6:	5f e3       	ldi	r21, 0x3F	; 63
    13f8:	6b 89       	ldd	r22, Y+19	; 0x13
    13fa:	7c 89       	ldd	r23, Y+20	; 0x14
    13fc:	8d 89       	ldd	r24, Y+21	; 0x15
    13fe:	9e 89       	ldd	r25, Y+22	; 0x16
    1400:	0e 94 0f 0c 	call	0x181e	; 0x181e <__cmpsf2>
    1404:	88 23       	and	r24, r24
    1406:	2c f4       	brge	.+10     	; 0x1412 <.L56>

00001408 <.Loc.75>:
		__ticks = 1;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	98 8f       	std	Y+24, r25	; 0x18
    140e:	8f 8b       	std	Y+23, r24	; 0x17
    1410:	5c c0       	rjmp	.+184    	; 0x14ca <.L43>

00001412 <.L56>:
	else if (__tmp > 65535)
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	3f ef       	ldi	r19, 0xFF	; 255
    1416:	4f e7       	ldi	r20, 0x7F	; 127
    1418:	57 e4       	ldi	r21, 0x47	; 71
    141a:	6b 89       	ldd	r22, Y+19	; 0x13
    141c:	7c 89       	ldd	r23, Y+20	; 0x14
    141e:	8d 89       	ldd	r24, Y+21	; 0x15
    1420:	9e 89       	ldd	r25, Y+22	; 0x16
    1422:	0e 94 cd 0c 	call	0x199a	; 0x199a <__gesf2>
    1426:	88 23       	and	r24, r24
    1428:	09 f0       	breq	.+2      	; 0x142c <L0^A>

0000142a <L0^A>:
    142a:	0c f4       	brge	.+2      	; 0x142e <.Loc.77>

0000142c <L0^A>:
    142c:	3c c0       	rjmp	.+120    	; 0x14a6 <.L57>

0000142e <.Loc.77>:
		__ticks = (uint16_t) (__ms * 10.0);
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e2       	ldi	r20, 0x20	; 32
    1434:	51 e4       	ldi	r21, 0x41	; 65
    1436:	6f 85       	ldd	r22, Y+15	; 0x0f
    1438:	78 89       	ldd	r23, Y+16	; 0x10
    143a:	89 89       	ldd	r24, Y+17	; 0x11
    143c:	9a 89       	ldd	r25, Y+18	; 0x12
    143e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
    1442:	69 af       	std	Y+57, r22	; 0x39
    1444:	7a af       	std	Y+58, r23	; 0x3a
    1446:	8b af       	std	Y+59, r24	; 0x3b
    1448:	9c af       	std	Y+60, r25	; 0x3c
    144a:	89 ad       	ldd	r24, Y+57	; 0x39
    144c:	9a ad       	ldd	r25, Y+58	; 0x3a
    144e:	ab ad       	ldd	r26, Y+59	; 0x3b
    1450:	bc ad       	ldd	r27, Y+60	; 0x3c
    1452:	89 a3       	std	Y+33, r24	; 0x21
    1454:	9a a3       	std	Y+34, r25	; 0x22
    1456:	ab a3       	std	Y+35, r26	; 0x23
    1458:	bc a3       	std	Y+36, r27	; 0x24

0000145a <.Loc.78>:
    145a:	69 a1       	ldd	r22, Y+33	; 0x21
    145c:	7a a1       	ldd	r23, Y+34	; 0x22
    145e:	8b a1       	ldd	r24, Y+35	; 0x23
    1460:	9c a1       	ldd	r25, Y+36	; 0x24
    1462:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
    1466:	21 96       	adiw	r28, 0x01	; 1
    1468:	6c af       	std	Y+60, r22	; 0x3c
    146a:	7d af       	std	Y+61, r23	; 0x3d
    146c:	8e af       	std	Y+62, r24	; 0x3e
    146e:	9f af       	std	Y+63, r25	; 0x3f
    1470:	21 97       	sbiw	r28, 0x01	; 1
    1472:	ad ad       	ldd	r26, Y+61	; 0x3d
    1474:	be ad       	ldd	r27, Y+62	; 0x3e
    1476:	b8 8f       	std	Y+24, r27	; 0x18
    1478:	af 8b       	std	Y+23, r26	; 0x17

0000147a <.Loc.79>:
		while(__ticks)
    147a:	10 c0       	rjmp	.+32     	; 0x149c <.L46>

0000147c <.L47>:
    147c:	80 e9       	ldi	r24, 0x90	; 144
    147e:	91 e0       	ldi	r25, 0x01	; 1
    1480:	9a 8f       	std	Y+26, r25	; 0x1a
    1482:	89 8f       	std	Y+25, r24	; 0x19

00001484 <.LBB62>:
    1484:	89 8d       	ldd	r24, Y+25	; 0x19
    1486:	9a 8d       	ldd	r25, Y+26	; 0x1a

00001488 <.L1^B7>:
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	f1 f7       	brne	.-4      	; 0x1488 <.L1^B7>
    148c:	9a 8f       	std	Y+26, r25	; 0x1a
    148e:	89 8f       	std	Y+25, r24	; 0x19

00001490 <.Loc.81>:
	...

00001492 <.LBE62>:
			__ticks --;
    1492:	8f 89       	ldd	r24, Y+23	; 0x17
    1494:	98 8d       	ldd	r25, Y+24	; 0x18
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	98 8f       	std	Y+24, r25	; 0x18
    149a:	8f 8b       	std	Y+23, r24	; 0x17

0000149c <.L46>:
		while(__ticks)
    149c:	8f 89       	ldd	r24, Y+23	; 0x17
    149e:	98 8d       	ldd	r25, Y+24	; 0x18
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	61 f7       	brne	.-40     	; 0x147c <.L47>

000014a4 <.Loc.84>:
		return;
    14a4:	1d c0       	rjmp	.+58     	; 0x14e0 <.L40>

000014a6 <.L57>:
		__ticks = (uint16_t)__tmp;
    14a6:	6b 89       	ldd	r22, Y+19	; 0x13
    14a8:	7c 89       	ldd	r23, Y+20	; 0x14
    14aa:	8d 89       	ldd	r24, Y+21	; 0x15
    14ac:	9e 89       	ldd	r25, Y+22	; 0x16
    14ae:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
    14b2:	25 96       	adiw	r28, 0x05	; 5
    14b4:	6c af       	std	Y+60, r22	; 0x3c
    14b6:	7d af       	std	Y+61, r23	; 0x3d
    14b8:	8e af       	std	Y+62, r24	; 0x3e
    14ba:	9f af       	std	Y+63, r25	; 0x3f
    14bc:	25 97       	sbiw	r28, 0x05	; 5
    14be:	23 96       	adiw	r28, 0x03	; 3
    14c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    14c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    14c4:	23 97       	sbiw	r28, 0x03	; 3
    14c6:	98 8f       	std	Y+24, r25	; 0x18
    14c8:	8f 8b       	std	Y+23, r24	; 0x17

000014ca <.L43>:
    14ca:	8f 89       	ldd	r24, Y+23	; 0x17
    14cc:	98 8d       	ldd	r25, Y+24	; 0x18
    14ce:	9c 8f       	std	Y+28, r25	; 0x1c
    14d0:	8b 8f       	std	Y+27, r24	; 0x1b

000014d2 <.LBB64>:
    14d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d4:	9c 8d       	ldd	r25, Y+28	; 0x1c

000014d6 <.L1^B8>:
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <.L1^B8>
    14da:	9c 8f       	std	Y+28, r25	; 0x1c
    14dc:	8b 8f       	std	Y+27, r24	; 0x1b

000014de <.Loc.87>:
	...

000014e0 <.L40>:
    14e0:	43 e2       	ldi	r20, 0x23	; 35
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	65 e2       	ldi	r22, 0x25	; 37
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	83 e0       	ldi	r24, 0x03	; 3
    14ea:	0e 94 41 04 	call	0x882	; 0x882 <isLimitSwitchPressed>

000014ee <.Loc.89>:
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <.Loc.90>

000014f2 <L0^A>:
    14f2:	60 cf       	rjmp	.-320    	; 0x13b4 <.L49>

000014f4 <.Loc.90>:
        _delay_ms(1); // Controleer elke milliseconde
    }
    motorStop();
    14f4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <motorStop>

000014f8 <.Loc.91>:
}
    14f8:	00 00       	nop
    14fa:	cc 5b       	subi	r28, 0xBC	; 188
    14fc:	df 4f       	sbci	r29, 0xFF	; 255
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	08 95       	ret

0000150e <zetPotplantNeer>:

void zetPotplantNeer(void) {
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	c4 54       	subi	r28, 0x44	; 68
    1518:	d1 09       	sbc	r29, r1
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61

00001524 <.Loc.93>:
    motorBeweegOmlaag();      // Beweeg de motor naar beneden
    1524:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <motorBeweegOmlaag>

00001528 <.Loc.94>:
    // Blijf bewegen totdat de onderste limietschakelaar (PB2) is ingedrukt
    while (!isLimitSwitchPressed(PB2, &PORTB, &PINB)) {
    1528:	8f c0       	rjmp	.+286    	; 0x1648 <.L59>

0000152a <.L68>:
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	a0 e8       	ldi	r26, 0x80	; 128
    1530:	bf e3       	ldi	r27, 0x3F	; 63
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	9a 83       	std	Y+2, r25	; 0x02
    1536:	ab 83       	std	Y+3, r26	; 0x03
    1538:	bc 83       	std	Y+4, r27	; 0x04

0000153a <.LBB66>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	4a e7       	ldi	r20, 0x7A	; 122
    1540:	55 e4       	ldi	r21, 0x45	; 69
    1542:	69 81       	ldd	r22, Y+1	; 0x01
    1544:	7a 81       	ldd	r23, Y+2	; 0x02
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
    154e:	6d a3       	std	Y+37, r22	; 0x25
    1550:	7e a3       	std	Y+38, r23	; 0x26
    1552:	8f a3       	std	Y+39, r24	; 0x27
    1554:	98 a7       	std	Y+40, r25	; 0x28
    1556:	8d a1       	ldd	r24, Y+37	; 0x25
    1558:	9e a1       	ldd	r25, Y+38	; 0x26
    155a:	af a1       	ldd	r26, Y+39	; 0x27
    155c:	b8 a5       	ldd	r27, Y+40	; 0x28
    155e:	8d 83       	std	Y+5, r24	; 0x05
    1560:	9e 83       	std	Y+6, r25	; 0x06
    1562:	af 83       	std	Y+7, r26	; 0x07
    1564:	b8 87       	std	Y+8, r27	; 0x08

00001566 <.Loc.96>:
	if (__tmp < 1.0)
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e8       	ldi	r20, 0x80	; 128
    156c:	5f e3       	ldi	r21, 0x3F	; 63
    156e:	6d 81       	ldd	r22, Y+5	; 0x05
    1570:	7e 81       	ldd	r23, Y+6	; 0x06
    1572:	8f 81       	ldd	r24, Y+7	; 0x07
    1574:	98 85       	ldd	r25, Y+8	; 0x08
    1576:	0e 94 0f 0c 	call	0x181e	; 0x181e <__cmpsf2>
    157a:	88 23       	and	r24, r24
    157c:	2c f4       	brge	.+10     	; 0x1588 <.L83>

0000157e <.Loc.97>:
		__ticks = 1;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9a 87       	std	Y+10, r25	; 0x0a
    1584:	89 87       	std	Y+9, r24	; 0x09
    1586:	55 c0       	rjmp	.+170    	; 0x1632 <.L62>

00001588 <.L83>:
	else if (__tmp > 65535)
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	3f ef       	ldi	r19, 0xFF	; 255
    158c:	4f e7       	ldi	r20, 0x7F	; 127
    158e:	57 e4       	ldi	r21, 0x47	; 71
    1590:	6d 81       	ldd	r22, Y+5	; 0x05
    1592:	7e 81       	ldd	r23, Y+6	; 0x06
    1594:	8f 81       	ldd	r24, Y+7	; 0x07
    1596:	98 85       	ldd	r25, Y+8	; 0x08
    1598:	0e 94 cd 0c 	call	0x199a	; 0x199a <__gesf2>
    159c:	88 23       	and	r24, r24
    159e:	d9 f1       	breq	.+118    	; 0x1616 <.L84>
    15a0:	d4 f1       	brlt	.+116    	; 0x1616 <.L84>

000015a2 <.Loc.99>:
		__ticks = (uint16_t) (__ms * 10.0);
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e2       	ldi	r20, 0x20	; 32
    15a8:	51 e4       	ldi	r21, 0x41	; 65
    15aa:	69 81       	ldd	r22, Y+1	; 0x01
    15ac:	7a 81       	ldd	r23, Y+2	; 0x02
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
    15b6:	69 a7       	std	Y+41, r22	; 0x29
    15b8:	7a a7       	std	Y+42, r23	; 0x2a
    15ba:	8b a7       	std	Y+43, r24	; 0x2b
    15bc:	9c a7       	std	Y+44, r25	; 0x2c
    15be:	89 a5       	ldd	r24, Y+41	; 0x29
    15c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    15c2:	ab a5       	ldd	r26, Y+43	; 0x2b
    15c4:	bc a5       	ldd	r27, Y+44	; 0x2c
    15c6:	8d 8f       	std	Y+29, r24	; 0x1d
    15c8:	9e 8f       	std	Y+30, r25	; 0x1e
    15ca:	af 8f       	std	Y+31, r26	; 0x1f
    15cc:	b8 a3       	std	Y+32, r27	; 0x20

000015ce <.Loc.100>:
    15ce:	6d 8d       	ldd	r22, Y+29	; 0x1d
    15d0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    15d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15d4:	98 a1       	ldd	r25, Y+32	; 0x20
    15d6:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
    15da:	6d a7       	std	Y+45, r22	; 0x2d
    15dc:	7e a7       	std	Y+46, r23	; 0x2e
    15de:	8f a7       	std	Y+47, r24	; 0x2f
    15e0:	98 ab       	std	Y+48, r25	; 0x30
    15e2:	ad a5       	ldd	r26, Y+45	; 0x2d
    15e4:	be a5       	ldd	r27, Y+46	; 0x2e
    15e6:	ba 87       	std	Y+10, r27	; 0x0a
    15e8:	a9 87       	std	Y+9, r26	; 0x09

000015ea <.Loc.101>:
		while(__ticks)
    15ea:	10 c0       	rjmp	.+32     	; 0x160c <.L65>

000015ec <.L66>:
    15ec:	80 e9       	ldi	r24, 0x90	; 144
    15ee:	91 e0       	ldi	r25, 0x01	; 1
    15f0:	9c 87       	std	Y+12, r25	; 0x0c
    15f2:	8b 87       	std	Y+11, r24	; 0x0b

000015f4 <.LBB68>:
    15f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15f6:	9c 85       	ldd	r25, Y+12	; 0x0c

000015f8 <.L1^B9>:
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <.L1^B9>
    15fc:	9c 87       	std	Y+12, r25	; 0x0c
    15fe:	8b 87       	std	Y+11, r24	; 0x0b

00001600 <.Loc.103>:
	...

00001602 <.LBE68>:
			__ticks --;
    1602:	89 85       	ldd	r24, Y+9	; 0x09
    1604:	9a 85       	ldd	r25, Y+10	; 0x0a
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	9a 87       	std	Y+10, r25	; 0x0a
    160a:	89 87       	std	Y+9, r24	; 0x09

0000160c <.L65>:
		while(__ticks)
    160c:	89 85       	ldd	r24, Y+9	; 0x09
    160e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	61 f7       	brne	.-40     	; 0x15ec <.L66>

00001614 <.Loc.106>:
		return;
    1614:	19 c0       	rjmp	.+50     	; 0x1648 <.L59>

00001616 <.L84>:
		__ticks = (uint16_t)__tmp;
    1616:	6d 81       	ldd	r22, Y+5	; 0x05
    1618:	7e 81       	ldd	r23, Y+6	; 0x06
    161a:	8f 81       	ldd	r24, Y+7	; 0x07
    161c:	98 85       	ldd	r25, Y+8	; 0x08
    161e:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
    1622:	69 ab       	std	Y+49, r22	; 0x31
    1624:	7a ab       	std	Y+50, r23	; 0x32
    1626:	8b ab       	std	Y+51, r24	; 0x33
    1628:	9c ab       	std	Y+52, r25	; 0x34
    162a:	89 a9       	ldd	r24, Y+49	; 0x31
    162c:	9a a9       	ldd	r25, Y+50	; 0x32
    162e:	9a 87       	std	Y+10, r25	; 0x0a
    1630:	89 87       	std	Y+9, r24	; 0x09

00001632 <.L62>:
    1632:	89 85       	ldd	r24, Y+9	; 0x09
    1634:	9a 85       	ldd	r25, Y+10	; 0x0a
    1636:	9e 87       	std	Y+14, r25	; 0x0e
    1638:	8d 87       	std	Y+13, r24	; 0x0d

0000163a <.LBB70>:
    163a:	8d 85       	ldd	r24, Y+13	; 0x0d
    163c:	9e 85       	ldd	r25, Y+14	; 0x0e

0000163e <.L1^B10>:
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <.L1^B10>
    1642:	9e 87       	std	Y+14, r25	; 0x0e
    1644:	8d 87       	std	Y+13, r24	; 0x0d

00001646 <.Loc.109>:
	...

00001648 <.L59>:
    1648:	43 e2       	ldi	r20, 0x23	; 35
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	65 e2       	ldi	r22, 0x25	; 37
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	0e 94 41 04 	call	0x882	; 0x882 <isLimitSwitchPressed>

00001656 <.Loc.111>:
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	09 f4       	brne	.+2      	; 0x165c <.Loc.112>

0000165a <L0^A>:
    165a:	67 cf       	rjmp	.-306    	; 0x152a <.L68>

0000165c <.Loc.112>:
        _delay_ms(1); // Controleer elke milliseconde
    }
    motorStop();
    165c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <motorStop>

00001660 <.Loc.113>:
    portaalkraanMagneetUit();
    1660:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <portaalkraanMagneetUit>

00001664 <.Loc.114>:
    motorBeweegOmhoog();
    1664:	0e 94 f0 06 	call	0xde0	; 0xde0 <motorBeweegOmhoog>

00001668 <.Loc.115>:
    while (!isLimitSwitchPressed(PB3, &PORTB, &PINB)) {
    1668:	96 c0       	rjmp	.+300    	; 0x1796 <.L69>

0000166a <.L78>:
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	a0 e8       	ldi	r26, 0x80	; 128
    1670:	bf e3       	ldi	r27, 0x3F	; 63
    1672:	8f 87       	std	Y+15, r24	; 0x0f
    1674:	98 8b       	std	Y+16, r25	; 0x10
    1676:	a9 8b       	std	Y+17, r26	; 0x11
    1678:	ba 8b       	std	Y+18, r27	; 0x12

0000167a <.LBB72>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	4a e7       	ldi	r20, 0x7A	; 122
    1680:	55 e4       	ldi	r21, 0x45	; 69
    1682:	6f 85       	ldd	r22, Y+15	; 0x0f
    1684:	78 89       	ldd	r23, Y+16	; 0x10
    1686:	89 89       	ldd	r24, Y+17	; 0x11
    1688:	9a 89       	ldd	r25, Y+18	; 0x12
    168a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
    168e:	6d ab       	std	Y+53, r22	; 0x35
    1690:	7e ab       	std	Y+54, r23	; 0x36
    1692:	8f ab       	std	Y+55, r24	; 0x37
    1694:	98 af       	std	Y+56, r25	; 0x38
    1696:	8d a9       	ldd	r24, Y+53	; 0x35
    1698:	9e a9       	ldd	r25, Y+54	; 0x36
    169a:	af a9       	ldd	r26, Y+55	; 0x37
    169c:	b8 ad       	ldd	r27, Y+56	; 0x38
    169e:	8b 8b       	std	Y+19, r24	; 0x13
    16a0:	9c 8b       	std	Y+20, r25	; 0x14
    16a2:	ad 8b       	std	Y+21, r26	; 0x15
    16a4:	be 8b       	std	Y+22, r27	; 0x16

000016a6 <.Loc.117>:
	if (__tmp < 1.0)
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e8       	ldi	r20, 0x80	; 128
    16ac:	5f e3       	ldi	r21, 0x3F	; 63
    16ae:	6b 89       	ldd	r22, Y+19	; 0x13
    16b0:	7c 89       	ldd	r23, Y+20	; 0x14
    16b2:	8d 89       	ldd	r24, Y+21	; 0x15
    16b4:	9e 89       	ldd	r25, Y+22	; 0x16
    16b6:	0e 94 0f 0c 	call	0x181e	; 0x181e <__cmpsf2>
    16ba:	88 23       	and	r24, r24
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <.L85>

000016be <.Loc.118>:
		__ticks = 1;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	98 8f       	std	Y+24, r25	; 0x18
    16c4:	8f 8b       	std	Y+23, r24	; 0x17
    16c6:	5c c0       	rjmp	.+184    	; 0x1780 <.L72>

000016c8 <.L85>:
	else if (__tmp > 65535)
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	3f ef       	ldi	r19, 0xFF	; 255
    16cc:	4f e7       	ldi	r20, 0x7F	; 127
    16ce:	57 e4       	ldi	r21, 0x47	; 71
    16d0:	6b 89       	ldd	r22, Y+19	; 0x13
    16d2:	7c 89       	ldd	r23, Y+20	; 0x14
    16d4:	8d 89       	ldd	r24, Y+21	; 0x15
    16d6:	9e 89       	ldd	r25, Y+22	; 0x16
    16d8:	0e 94 cd 0c 	call	0x199a	; 0x199a <__gesf2>
    16dc:	88 23       	and	r24, r24
    16de:	09 f0       	breq	.+2      	; 0x16e2 <L0^A>

000016e0 <L0^A>:
    16e0:	0c f4       	brge	.+2      	; 0x16e4 <.Loc.120>

000016e2 <L0^A>:
    16e2:	3c c0       	rjmp	.+120    	; 0x175c <.L86>

000016e4 <.Loc.120>:
		__ticks = (uint16_t) (__ms * 10.0);
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e2       	ldi	r20, 0x20	; 32
    16ea:	51 e4       	ldi	r21, 0x41	; 65
    16ec:	6f 85       	ldd	r22, Y+15	; 0x0f
    16ee:	78 89       	ldd	r23, Y+16	; 0x10
    16f0:	89 89       	ldd	r24, Y+17	; 0x11
    16f2:	9a 89       	ldd	r25, Y+18	; 0x12
    16f4:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsf3>
    16f8:	69 af       	std	Y+57, r22	; 0x39
    16fa:	7a af       	std	Y+58, r23	; 0x3a
    16fc:	8b af       	std	Y+59, r24	; 0x3b
    16fe:	9c af       	std	Y+60, r25	; 0x3c
    1700:	89 ad       	ldd	r24, Y+57	; 0x39
    1702:	9a ad       	ldd	r25, Y+58	; 0x3a
    1704:	ab ad       	ldd	r26, Y+59	; 0x3b
    1706:	bc ad       	ldd	r27, Y+60	; 0x3c
    1708:	89 a3       	std	Y+33, r24	; 0x21
    170a:	9a a3       	std	Y+34, r25	; 0x22
    170c:	ab a3       	std	Y+35, r26	; 0x23
    170e:	bc a3       	std	Y+36, r27	; 0x24

00001710 <.Loc.121>:
    1710:	69 a1       	ldd	r22, Y+33	; 0x21
    1712:	7a a1       	ldd	r23, Y+34	; 0x22
    1714:	8b a1       	ldd	r24, Y+35	; 0x23
    1716:	9c a1       	ldd	r25, Y+36	; 0x24
    1718:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
    171c:	21 96       	adiw	r28, 0x01	; 1
    171e:	6c af       	std	Y+60, r22	; 0x3c
    1720:	7d af       	std	Y+61, r23	; 0x3d
    1722:	8e af       	std	Y+62, r24	; 0x3e
    1724:	9f af       	std	Y+63, r25	; 0x3f
    1726:	21 97       	sbiw	r28, 0x01	; 1
    1728:	ad ad       	ldd	r26, Y+61	; 0x3d
    172a:	be ad       	ldd	r27, Y+62	; 0x3e
    172c:	b8 8f       	std	Y+24, r27	; 0x18
    172e:	af 8b       	std	Y+23, r26	; 0x17

00001730 <.Loc.122>:
		while(__ticks)
    1730:	10 c0       	rjmp	.+32     	; 0x1752 <.L75>

00001732 <.L76>:
    1732:	80 e9       	ldi	r24, 0x90	; 144
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	9a 8f       	std	Y+26, r25	; 0x1a
    1738:	89 8f       	std	Y+25, r24	; 0x19

0000173a <.LBB74>:
    173a:	89 8d       	ldd	r24, Y+25	; 0x19
    173c:	9a 8d       	ldd	r25, Y+26	; 0x1a

0000173e <.L1^B11>:
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <.L1^B11>
    1742:	9a 8f       	std	Y+26, r25	; 0x1a
    1744:	89 8f       	std	Y+25, r24	; 0x19

00001746 <.Loc.124>:
	...

00001748 <.LBE74>:
			__ticks --;
    1748:	8f 89       	ldd	r24, Y+23	; 0x17
    174a:	98 8d       	ldd	r25, Y+24	; 0x18
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	98 8f       	std	Y+24, r25	; 0x18
    1750:	8f 8b       	std	Y+23, r24	; 0x17

00001752 <.L75>:
		while(__ticks)
    1752:	8f 89       	ldd	r24, Y+23	; 0x17
    1754:	98 8d       	ldd	r25, Y+24	; 0x18
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	61 f7       	brne	.-40     	; 0x1732 <.L76>

0000175a <.Loc.127>:
		return;
    175a:	1d c0       	rjmp	.+58     	; 0x1796 <.L69>

0000175c <.L86>:
		__ticks = (uint16_t)__tmp;
    175c:	6b 89       	ldd	r22, Y+19	; 0x13
    175e:	7c 89       	ldd	r23, Y+20	; 0x14
    1760:	8d 89       	ldd	r24, Y+21	; 0x15
    1762:	9e 89       	ldd	r25, Y+22	; 0x16
    1764:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
    1768:	25 96       	adiw	r28, 0x05	; 5
    176a:	6c af       	std	Y+60, r22	; 0x3c
    176c:	7d af       	std	Y+61, r23	; 0x3d
    176e:	8e af       	std	Y+62, r24	; 0x3e
    1770:	9f af       	std	Y+63, r25	; 0x3f
    1772:	25 97       	sbiw	r28, 0x05	; 5
    1774:	23 96       	adiw	r28, 0x03	; 3
    1776:	8e ad       	ldd	r24, Y+62	; 0x3e
    1778:	9f ad       	ldd	r25, Y+63	; 0x3f
    177a:	23 97       	sbiw	r28, 0x03	; 3
    177c:	98 8f       	std	Y+24, r25	; 0x18
    177e:	8f 8b       	std	Y+23, r24	; 0x17

00001780 <.L72>:
    1780:	8f 89       	ldd	r24, Y+23	; 0x17
    1782:	98 8d       	ldd	r25, Y+24	; 0x18
    1784:	9c 8f       	std	Y+28, r25	; 0x1c
    1786:	8b 8f       	std	Y+27, r24	; 0x1b

00001788 <.LBB76>:
    1788:	8b 8d       	ldd	r24, Y+27	; 0x1b
    178a:	9c 8d       	ldd	r25, Y+28	; 0x1c

0000178c <.L1^B12>:
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <.L1^B12>
    1790:	9c 8f       	std	Y+28, r25	; 0x1c
    1792:	8b 8f       	std	Y+27, r24	; 0x1b

00001794 <.Loc.130>:
	...

00001796 <.L69>:
    1796:	43 e2       	ldi	r20, 0x23	; 35
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	65 e2       	ldi	r22, 0x25	; 37
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	83 e0       	ldi	r24, 0x03	; 3
    17a0:	0e 94 41 04 	call	0x882	; 0x882 <isLimitSwitchPressed>

000017a4 <.Loc.132>:
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	09 f4       	brne	.+2      	; 0x17aa <.Loc.133>

000017a8 <L0^A>:
    17a8:	60 cf       	rjmp	.-320    	; 0x166a <.L78>

000017aa <.Loc.133>:
        _delay_ms(1); // Controleer elke milliseconde
    }
    motorStop();
    17aa:	0e 94 fd 06 	call	0xdfa	; 0xdfa <motorStop>

000017ae <.Loc.134>:
}
    17ae:	00 00       	nop
    17b0:	cc 5b       	subi	r28, 0xBC	; 188
    17b2:	df 4f       	sbci	r29, 0xFF	; 255
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	08 95       	ret

000017c4 <afstandPortaalkraan>:

/**
 * Functie om de afgelegde afstand van de portaalkraan op te vragen
 * @return De totale afstand (aantal limietschakelaar-activeringen)
 */
uint16_t afstandPortaalkraan(void) {
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62

000017cc <.Loc.136>:
    return countLimitSwitchPresses(PB1, &PORTB, &PINB); // Geef het totaal aantal limietschakelaar-activeringen terug
    17cc:	43 e2       	ldi	r20, 0x23	; 35
    17ce:	50 e0       	ldi	r21, 0x00	; 0
    17d0:	65 e2       	ldi	r22, 0x25	; 37
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	0e 94 82 04 	call	0x904	; 0x904 <countLimitSwitchPresses>

000017da <.Loc.137>:
}
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	08 95       	ret

000017e0 <portaalkraanMagneetAan>:

/**
 * Functie om de magneet van de portaalkraan aan te zetten
 */
void portaalkraanMagneetAan(void) {
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62

000017e8 <.Loc.139>:
    // Deze functie activeert de magneet, implementatie ontbreekt
}
    17e8:	00 00       	nop
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	08 95       	ret

000017f0 <portaalkraanMagneetUit>:

/**
 * Functie om de magneet van de portaalkraan aan te zetten
 */
void portaalkraanMagneetUit(void) {
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62

000017f8 <.Loc.141>:
    // Deze functie activeert de magneet, implementatie ontbreekt
}
    17f8:	00 00       	nop
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	08 95       	ret

00001800 <__umulhisi3>:
    1800:	a2 9f       	mul	r26, r18

00001802 <.Loc.1>:
    1802:	b0 01       	movw	r22, r0

00001804 <.Loc.2>:
    1804:	b3 9f       	mul	r27, r19

00001806 <.Loc.3>:
    1806:	c0 01       	movw	r24, r0

00001808 <.Loc.4>:
    1808:	a3 9f       	mul	r26, r19

0000180a <.Loc.5>:
    180a:	70 0d       	add	r23, r0

0000180c <.Loc.6>:
    180c:	81 1d       	adc	r24, r1

0000180e <.Loc.7>:
    180e:	11 24       	eor	r1, r1

00001810 <.Loc.8>:
    1810:	91 1d       	adc	r25, r1

00001812 <.Loc.9>:
    1812:	b2 9f       	mul	r27, r18

00001814 <.Loc.10>:
    1814:	70 0d       	add	r23, r0

00001816 <.Loc.11>:
    1816:	81 1d       	adc	r24, r1

00001818 <.Loc.12>:
    1818:	11 24       	eor	r1, r1

0000181a <.Loc.13>:
    181a:	91 1d       	adc	r25, r1

0000181c <.Loc.14>:
    181c:	08 95       	ret

0000181e <__cmpsf2>:
    181e:	0e 94 80 0c 	call	0x1900	; 0x1900 <__fp_cmp>
    1822:	08 f4       	brcc	.+2      	; 0x1826 <.L1^B1>
    1824:	81 e0       	ldi	r24, 0x01	; 1

00001826 <.L1^B1>:
    1826:	08 95       	ret

00001828 <__fixunssfsi>:
    1828:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fp_splitA>
    182c:	88 f0       	brcs	.+34     	; 0x1850 <.L_err>
    182e:	9f 57       	subi	r25, 0x7F	; 127
    1830:	98 f0       	brcs	.+38     	; 0x1858 <.L_zr>
    1832:	b9 2f       	mov	r27, r25
    1834:	99 27       	eor	r25, r25
    1836:	b7 51       	subi	r27, 0x17	; 23
    1838:	b0 f0       	brcs	.+44     	; 0x1866 <.L4^B1>
    183a:	e1 f0       	breq	.+56     	; 0x1874 <.L_sign>

0000183c <.L1^B1>:
    183c:	66 0f       	add	r22, r22
    183e:	77 1f       	adc	r23, r23
    1840:	88 1f       	adc	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	1a f0       	brmi	.+6      	; 0x184c <.L2^B1>
    1846:	ba 95       	dec	r27
    1848:	c9 f7       	brne	.-14     	; 0x183c <.L1^B1>
    184a:	14 c0       	rjmp	.+40     	; 0x1874 <.L_sign>

0000184c <.L2^B1>:
    184c:	b1 30       	cpi	r27, 0x01	; 1
    184e:	91 f0       	breq	.+36     	; 0x1874 <.L_sign>

00001850 <.L_err>:
    1850:	0e 94 c6 0c 	call	0x198c	; 0x198c <__fp_zero>
    1854:	b1 e0       	ldi	r27, 0x01	; 1
    1856:	08 95       	ret

00001858 <.L_zr>:
    1858:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__fp_zero>

0000185c <.L3^B1>:
    185c:	67 2f       	mov	r22, r23
    185e:	78 2f       	mov	r23, r24
    1860:	88 27       	eor	r24, r24
    1862:	b8 5f       	subi	r27, 0xF8	; 248
    1864:	39 f0       	breq	.+14     	; 0x1874 <.L_sign>

00001866 <.L4^B1>:
    1866:	b9 3f       	cpi	r27, 0xF9	; 249
    1868:	cc f3       	brlt	.-14     	; 0x185c <.L3^B1>

0000186a <.L5^B1>:
    186a:	86 95       	lsr	r24
    186c:	77 95       	ror	r23
    186e:	67 95       	ror	r22
    1870:	b3 95       	inc	r27
    1872:	d9 f7       	brne	.-10     	; 0x186a <.L5^B1>

00001874 <.L_sign>:
    1874:	3e f4       	brtc	.+14     	; 0x1884 <.L6^B1>
    1876:	90 95       	com	r25
    1878:	80 95       	com	r24
    187a:	70 95       	com	r23
    187c:	61 95       	neg	r22
    187e:	7f 4f       	sbci	r23, 0xFF	; 255
    1880:	8f 4f       	sbci	r24, 0xFF	; 255
    1882:	9f 4f       	sbci	r25, 0xFF	; 255

00001884 <.L6^B1>:
    1884:	08 95       	ret

00001886 <__floatunsisf>:
    1886:	e8 94       	clt
    1888:	09 c0       	rjmp	.+18     	; 0x189c <.L1^B1>

0000188a <__floatsisf>:
    188a:	97 fb       	bst	r25, 7
    188c:	3e f4       	brtc	.+14     	; 0x189c <.L1^B1>
    188e:	90 95       	com	r25
    1890:	80 95       	com	r24
    1892:	70 95       	com	r23
    1894:	61 95       	neg	r22
    1896:	7f 4f       	sbci	r23, 0xFF	; 255
    1898:	8f 4f       	sbci	r24, 0xFF	; 255
    189a:	9f 4f       	sbci	r25, 0xFF	; 255

0000189c <.L1^B1>:
    189c:	99 23       	and	r25, r25
    189e:	a9 f0       	breq	.+42     	; 0x18ca <.L4^B1>
    18a0:	f9 2f       	mov	r31, r25
    18a2:	96 e9       	ldi	r25, 0x96	; 150
    18a4:	bb 27       	eor	r27, r27

000018a6 <.L2^B1>:
    18a6:	93 95       	inc	r25
    18a8:	f6 95       	lsr	r31
    18aa:	87 95       	ror	r24
    18ac:	77 95       	ror	r23
    18ae:	67 95       	ror	r22
    18b0:	b7 95       	ror	r27
    18b2:	f1 11       	cpse	r31, r1
    18b4:	f8 cf       	rjmp	.-16     	; 0x18a6 <.L2^B1>
    18b6:	fa f4       	brpl	.+62     	; 0x18f6 <.L_pack>
    18b8:	bb 0f       	add	r27, r27
    18ba:	11 f4       	brne	.+4      	; 0x18c0 <.L3^B1>
    18bc:	60 ff       	sbrs	r22, 0
    18be:	1b c0       	rjmp	.+54     	; 0x18f6 <.L_pack>

000018c0 <.L3^B1>:
    18c0:	6f 5f       	subi	r22, 0xFF	; 255
    18c2:	7f 4f       	sbci	r23, 0xFF	; 255
    18c4:	8f 4f       	sbci	r24, 0xFF	; 255
    18c6:	9f 4f       	sbci	r25, 0xFF	; 255
    18c8:	16 c0       	rjmp	.+44     	; 0x18f6 <.L_pack>

000018ca <.L4^B1>:
    18ca:	88 23       	and	r24, r24
    18cc:	11 f0       	breq	.+4      	; 0x18d2 <.L5^B1>
    18ce:	96 e9       	ldi	r25, 0x96	; 150
    18d0:	11 c0       	rjmp	.+34     	; 0x18f4 <.L8^B1>

000018d2 <.L5^B1>:
    18d2:	77 23       	and	r23, r23
    18d4:	21 f0       	breq	.+8      	; 0x18de <.L6^B1>
    18d6:	9e e8       	ldi	r25, 0x8E	; 142
    18d8:	87 2f       	mov	r24, r23
    18da:	76 2f       	mov	r23, r22
    18dc:	05 c0       	rjmp	.+10     	; 0x18e8 <.L7^B1>

000018de <.L6^B1>:
    18de:	66 23       	and	r22, r22
    18e0:	71 f0       	breq	.+28     	; 0x18fe <.L9^B1>
    18e2:	96 e8       	ldi	r25, 0x86	; 134
    18e4:	86 2f       	mov	r24, r22
    18e6:	70 e0       	ldi	r23, 0x00	; 0

000018e8 <.L7^B1>:
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	2a f0       	brmi	.+10     	; 0x18f6 <.L_pack>

000018ec <.L10^B1>:
    18ec:	9a 95       	dec	r25
    18ee:	66 0f       	add	r22, r22
    18f0:	77 1f       	adc	r23, r23
    18f2:	88 1f       	adc	r24, r24

000018f4 <.L8^B1>:
    18f4:	da f7       	brpl	.-10     	; 0x18ec <.L10^B1>

000018f6 <.L_pack>:
    18f6:	88 0f       	add	r24, r24
    18f8:	96 95       	lsr	r25
    18fa:	87 95       	ror	r24
    18fc:	97 f9       	bld	r25, 7

000018fe <.L9^B1>:
    18fe:	08 95       	ret

00001900 <__fp_cmp>:
    1900:	99 0f       	add	r25, r25
    1902:	00 08       	sbc	r0, r0
    1904:	55 0f       	add	r21, r21
    1906:	aa 0b       	sbc	r26, r26
    1908:	e0 e8       	ldi	r30, 0x80	; 128
    190a:	fe ef       	ldi	r31, 0xFE	; 254
    190c:	16 16       	cp	r1, r22
    190e:	17 06       	cpc	r1, r23
    1910:	e8 07       	cpc	r30, r24
    1912:	f9 07       	cpc	r31, r25
    1914:	c0 f0       	brcs	.+48     	; 0x1946 <.L9^B1>
    1916:	12 16       	cp	r1, r18
    1918:	13 06       	cpc	r1, r19
    191a:	e4 07       	cpc	r30, r20
    191c:	f5 07       	cpc	r31, r21
    191e:	98 f0       	brcs	.+38     	; 0x1946 <.L9^B1>
    1920:	62 1b       	sub	r22, r18
    1922:	73 0b       	sbc	r23, r19
    1924:	84 0b       	sbc	r24, r20
    1926:	95 0b       	sbc	r25, r21
    1928:	39 f4       	brne	.+14     	; 0x1938 <.L1^B1>
    192a:	0a 26       	eor	r0, r26
    192c:	61 f0       	breq	.+24     	; 0x1946 <.L9^B1>
    192e:	23 2b       	or	r18, r19
    1930:	24 2b       	or	r18, r20
    1932:	25 2b       	or	r18, r21
    1934:	21 f4       	brne	.+8      	; 0x193e <.L2^B1>
    1936:	08 95       	ret

00001938 <.L1^B1>:
    1938:	0a 26       	eor	r0, r26
    193a:	09 f4       	brne	.+2      	; 0x193e <.L2^B1>
    193c:	a1 40       	sbci	r26, 0x01	; 1

0000193e <.L2^B1>:
    193e:	a6 95       	lsr	r26
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	81 1d       	adc	r24, r1
    1944:	81 1d       	adc	r24, r1

00001946 <.L9^B1>:
    1946:	08 95       	ret

00001948 <__fp_split3>:
    1948:	57 fd       	sbrc	r21, 7
    194a:	90 58       	subi	r25, 0x80	; 128
    194c:	44 0f       	add	r20, r20
    194e:	55 1f       	adc	r21, r21
    1950:	59 f0       	breq	.+22     	; 0x1968 <.L4^B1>
    1952:	5f 3f       	cpi	r21, 0xFF	; 255
    1954:	71 f0       	breq	.+28     	; 0x1972 <.L5^B1>

00001956 <.L1^B1>:
    1956:	47 95       	ror	r20

00001958 <__fp_splitA>:
    1958:	88 0f       	add	r24, r24
    195a:	97 fb       	bst	r25, 7
    195c:	99 1f       	adc	r25, r25
    195e:	61 f0       	breq	.+24     	; 0x1978 <.L6^B1>
    1960:	9f 3f       	cpi	r25, 0xFF	; 255
    1962:	79 f0       	breq	.+30     	; 0x1982 <.L7^B1>

00001964 <.L3^B1>:
    1964:	87 95       	ror	r24
    1966:	08 95       	ret

00001968 <.L4^B1>:
    1968:	12 16       	cp	r1, r18
    196a:	13 06       	cpc	r1, r19
    196c:	14 06       	cpc	r1, r20
    196e:	55 1f       	adc	r21, r21
    1970:	f2 cf       	rjmp	.-28     	; 0x1956 <.L1^B1>

00001972 <.L5^B1>:
    1972:	46 95       	lsr	r20
    1974:	f1 df       	rcall	.-30     	; 0x1958 <__fp_splitA>
    1976:	08 c0       	rjmp	.+16     	; 0x1988 <.L8^B1>

00001978 <.L6^B1>:
    1978:	16 16       	cp	r1, r22
    197a:	17 06       	cpc	r1, r23
    197c:	18 06       	cpc	r1, r24
    197e:	99 1f       	adc	r25, r25
    1980:	f1 cf       	rjmp	.-30     	; 0x1964 <.L3^B1>

00001982 <.L7^B1>:
    1982:	86 95       	lsr	r24
    1984:	71 05       	cpc	r23, r1
    1986:	61 05       	cpc	r22, r1

00001988 <.L8^B1>:
    1988:	08 94       	sec
    198a:	08 95       	ret

0000198c <__fp_zero>:
    198c:	e8 94       	clt

0000198e <__fp_szero>:
    198e:	bb 27       	eor	r27, r27
    1990:	66 27       	eor	r22, r22
    1992:	77 27       	eor	r23, r23
    1994:	cb 01       	movw	r24, r22
    1996:	97 f9       	bld	r25, 7
    1998:	08 95       	ret

0000199a <__gesf2>:
    199a:	0e 94 80 0c 	call	0x1900	; 0x1900 <__fp_cmp>
    199e:	08 f4       	brcc	.+2      	; 0x19a2 <.L1^B1>
    19a0:	8f ef       	ldi	r24, 0xFF	; 255

000019a2 <.L1^B1>:
    19a2:	08 95       	ret

000019a4 <__mulsf3>:
    19a4:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__mulsf3x>
    19a8:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__fp_round>

000019ac <.L^B1>:
    19ac:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fp_pscA>
    19b0:	38 f0       	brcs	.+14     	; 0x19c0 <.L1^B1>
    19b2:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__fp_pscB>
    19b6:	20 f0       	brcs	.+8      	; 0x19c0 <.L1^B1>
    19b8:	95 23       	and	r25, r21
    19ba:	11 f0       	breq	.+4      	; 0x19c0 <.L1^B1>
    19bc:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__fp_inf>

000019c0 <.L1^B1>:
    19c0:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__fp_nan>

000019c4 <.L2^B1>:
    19c4:	11 24       	eor	r1, r1
    19c6:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__fp_szero>

000019ca <__mulsf3x>:
    19ca:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__fp_split3>
    19ce:	70 f3       	brcs	.-36     	; 0x19ac <.L^B1>

000019d0 <__mulsf3_pse>:
    19d0:	95 9f       	mul	r25, r21
    19d2:	c1 f3       	breq	.-16     	; 0x19c4 <.L2^B1>
    19d4:	95 0f       	add	r25, r21
    19d6:	50 e0       	ldi	r21, 0x00	; 0
    19d8:	55 1f       	adc	r21, r21
    19da:	62 9f       	mul	r22, r18
    19dc:	f0 01       	movw	r30, r0
    19de:	72 9f       	mul	r23, r18
    19e0:	bb 27       	eor	r27, r27
    19e2:	f0 0d       	add	r31, r0
    19e4:	b1 1d       	adc	r27, r1
    19e6:	63 9f       	mul	r22, r19
    19e8:	aa 27       	eor	r26, r26
    19ea:	f0 0d       	add	r31, r0
    19ec:	b1 1d       	adc	r27, r1
    19ee:	aa 1f       	adc	r26, r26
    19f0:	64 9f       	mul	r22, r20
    19f2:	66 27       	eor	r22, r22
    19f4:	b0 0d       	add	r27, r0
    19f6:	a1 1d       	adc	r26, r1
    19f8:	66 1f       	adc	r22, r22
    19fa:	82 9f       	mul	r24, r18
    19fc:	22 27       	eor	r18, r18
    19fe:	b0 0d       	add	r27, r0
    1a00:	a1 1d       	adc	r26, r1
    1a02:	62 1f       	adc	r22, r18
    1a04:	73 9f       	mul	r23, r19
    1a06:	b0 0d       	add	r27, r0
    1a08:	a1 1d       	adc	r26, r1
    1a0a:	62 1f       	adc	r22, r18
    1a0c:	83 9f       	mul	r24, r19
    1a0e:	a0 0d       	add	r26, r0
    1a10:	61 1d       	adc	r22, r1
    1a12:	22 1f       	adc	r18, r18
    1a14:	74 9f       	mul	r23, r20
    1a16:	33 27       	eor	r19, r19
    1a18:	a0 0d       	add	r26, r0
    1a1a:	61 1d       	adc	r22, r1
    1a1c:	23 1f       	adc	r18, r19
    1a1e:	84 9f       	mul	r24, r20
    1a20:	60 0d       	add	r22, r0
    1a22:	21 1d       	adc	r18, r1
    1a24:	82 2f       	mov	r24, r18
    1a26:	76 2f       	mov	r23, r22
    1a28:	6a 2f       	mov	r22, r26
    1a2a:	11 24       	eor	r1, r1
    1a2c:	9f 57       	subi	r25, 0x7F	; 127
    1a2e:	50 40       	sbci	r21, 0x00	; 0
    1a30:	9a f0       	brmi	.+38     	; 0x1a58 <.L13^B1>
    1a32:	f1 f0       	breq	.+60     	; 0x1a70 <.L15^B1>

00001a34 <.L10^B1>:
    1a34:	88 23       	and	r24, r24
    1a36:	4a f0       	brmi	.+18     	; 0x1a4a <.L11^B1>
    1a38:	ee 0f       	add	r30, r30
    1a3a:	ff 1f       	adc	r31, r31
    1a3c:	bb 1f       	adc	r27, r27
    1a3e:	66 1f       	adc	r22, r22
    1a40:	77 1f       	adc	r23, r23
    1a42:	88 1f       	adc	r24, r24
    1a44:	91 50       	subi	r25, 0x01	; 1
    1a46:	50 40       	sbci	r21, 0x00	; 0
    1a48:	a9 f7       	brne	.-22     	; 0x1a34 <.L10^B1>

00001a4a <.L11^B1>:
    1a4a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a4c:	51 05       	cpc	r21, r1
    1a4e:	80 f0       	brcs	.+32     	; 0x1a70 <.L15^B1>
    1a50:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__fp_inf>

00001a54 <.L12^B1>:
    1a54:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__fp_szero>

00001a58 <.L13^B1>:
    1a58:	5f 3f       	cpi	r21, 0xFF	; 255
    1a5a:	e4 f3       	brlt	.-8      	; 0x1a54 <.L12^B1>
    1a5c:	98 3e       	cpi	r25, 0xE8	; 232
    1a5e:	d4 f3       	brlt	.-12     	; 0x1a54 <.L12^B1>

00001a60 <.L14^B1>:
    1a60:	86 95       	lsr	r24
    1a62:	77 95       	ror	r23
    1a64:	67 95       	ror	r22
    1a66:	b7 95       	ror	r27
    1a68:	f7 95       	ror	r31
    1a6a:	e7 95       	ror	r30
    1a6c:	9f 5f       	subi	r25, 0xFF	; 255
    1a6e:	c1 f7       	brne	.-16     	; 0x1a60 <.L14^B1>

00001a70 <.L15^B1>:
    1a70:	fe 2b       	or	r31, r30
    1a72:	88 0f       	add	r24, r24
    1a74:	91 1d       	adc	r25, r1
    1a76:	96 95       	lsr	r25
    1a78:	87 95       	ror	r24
    1a7a:	97 f9       	bld	r25, 7
    1a7c:	08 95       	ret

00001a7e <__fp_inf>:
    1a7e:	97 f9       	bld	r25, 7
    1a80:	9f 67       	ori	r25, 0x7F	; 127
    1a82:	80 e8       	ldi	r24, 0x80	; 128
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	08 95       	ret

00001a8a <__fp_nan>:
    1a8a:	9f ef       	ldi	r25, 0xFF	; 255
    1a8c:	80 ec       	ldi	r24, 0xC0	; 192
    1a8e:	08 95       	ret

00001a90 <__fp_pscA>:
    1a90:	00 24       	eor	r0, r0
    1a92:	0a 94       	dec	r0
    1a94:	16 16       	cp	r1, r22
    1a96:	17 06       	cpc	r1, r23
    1a98:	18 06       	cpc	r1, r24
    1a9a:	09 06       	cpc	r0, r25
    1a9c:	08 95       	ret

00001a9e <__fp_pscB>:
    1a9e:	00 24       	eor	r0, r0
    1aa0:	0a 94       	dec	r0
    1aa2:	12 16       	cp	r1, r18
    1aa4:	13 06       	cpc	r1, r19
    1aa6:	14 06       	cpc	r1, r20
    1aa8:	05 06       	cpc	r0, r21
    1aaa:	08 95       	ret

00001aac <__fp_round>:
    1aac:	09 2e       	mov	r0, r25
    1aae:	03 94       	inc	r0
    1ab0:	00 0c       	add	r0, r0
    1ab2:	11 f4       	brne	.+4      	; 0x1ab8 <.L1^B1>
    1ab4:	88 23       	and	r24, r24
    1ab6:	52 f0       	brmi	.+20     	; 0x1acc <.L3^B1>

00001ab8 <.L1^B1>:
    1ab8:	bb 0f       	add	r27, r27
    1aba:	40 f4       	brcc	.+16     	; 0x1acc <.L3^B1>
    1abc:	bf 2b       	or	r27, r31
    1abe:	11 f4       	brne	.+4      	; 0x1ac4 <.L2^B1>
    1ac0:	60 ff       	sbrs	r22, 0
    1ac2:	04 c0       	rjmp	.+8      	; 0x1acc <.L3^B1>

00001ac4 <.L2^B1>:
    1ac4:	6f 5f       	subi	r22, 0xFF	; 255
    1ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aca:	9f 4f       	sbci	r25, 0xFF	; 255

00001acc <.L3^B1>:
    1acc:	08 95       	ret

00001ace <_exit>:
    1ace:	f8 94       	cli

00001ad0 <__stop_program>:
    1ad0:	ff cf       	rjmp	.-2      	; 0x1ad0 <__stop_program>
