
bin\Debug\Portaalkraan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000ba6  00000c5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ba6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800200  00800200  00000c5a  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000c5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000c5d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c70  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000000d8  00000000  00000000  00000cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00001345  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000fa5  00000000  00000000  000020cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000008ae  00000000  00000000  00003072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000002b0  00000000  00000000  00003920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000006b3  00000000  00000000  00003bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 0000019a  00000000  00000000  00004283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__vector_21>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__vector_23>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.Loc.5>

000000fc <.Loc.4>:
  fc:	1d 92       	st	X+, r1

000000fe <.Loc.5>:
  fe:	ab 30       	cpi	r26, 0x0B	; 11

00000100 <.Loc.6>:
 100:	b2 07       	cpc	r27, r18

00000102 <.Loc.7>:
 102:	e1 f7       	brne	.-8      	; 0xfc <.Loc.4>

00000104 <L0^A>:
 104:	0e 94 b0 01 	call	0x360	; 0x360 <main>
 108:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <isLimitSwitchPressed>:
#include "LimitSwitch.h"
#include <util/delay.h> // For debouncing delay

int isLimitSwitchPressed(uint8_t inputPin, volatile uint8_t *inputPort, volatile uint8_t *pinReg) {
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	00 d0       	rcall	.+0      	; 0x116 <L0^A>

00000116 <L0^A>:
 116:	0f 92       	push	r0
 118:	0f 92       	push	r0
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	7b 83       	std	Y+3, r23	; 0x03
 122:	6a 83       	std	Y+2, r22	; 0x02
 124:	5d 83       	std	Y+5, r21	; 0x05
 126:	4c 83       	std	Y+4, r20	; 0x04

00000128 <.Loc.1>:
    // Configure the input pin with pull-up resistor
    *inputPort |= (1 << inputPin); // Enable pull-up resistor
 128:	8a 81       	ldd	r24, Y+2	; 0x02
 12a:	9b 81       	ldd	r25, Y+3	; 0x03
 12c:	fc 01       	movw	r30, r24
 12e:	80 81       	ld	r24, Z
 130:	48 2f       	mov	r20, r24

00000132 <.Loc.2>:
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	28 2f       	mov	r18, r24
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <.L2^B1>

0000013e <.L1^B1>:
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25

00000142 <.L2^B1>:
 142:	2a 95       	dec	r18
 144:	e2 f7       	brpl	.-8      	; 0x13e <.L1^B1>

00000146 <.Loc.3>:
 146:	84 2b       	or	r24, r20
 148:	28 2f       	mov	r18, r24
 14a:	8a 81       	ldd	r24, Y+2	; 0x02
 14c:	9b 81       	ldd	r25, Y+3	; 0x03
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18

00000152 <.Loc.4>:

    // Check if the button is pressed
    if (!(*pinReg & (1 << inputPin))) { // Input pin LOW (button pressed)
 152:	8c 81       	ldd	r24, Y+4	; 0x04
 154:	9d 81       	ldd	r25, Y+5	; 0x05
 156:	fc 01       	movw	r30, r24
 158:	80 81       	ld	r24, Z
 15a:	88 2f       	mov	r24, r24
 15c:	90 e0       	ldi	r25, 0x00	; 0

0000015e <.Loc.5>:
 15e:	29 81       	ldd	r18, Y+1	; 0x01
 160:	22 2f       	mov	r18, r18
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	02 2e       	mov	r0, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <.L2^B2>

00000168 <.L1^B2>:
 168:	95 95       	asr	r25
 16a:	87 95       	ror	r24

0000016c <.L2^B2>:
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <.L1^B2>
 170:	81 70       	andi	r24, 0x01	; 1
 172:	99 27       	eor	r25, r25

00000174 <.Loc.6>:
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	19 f4       	brne	.+6      	; 0x17e <.L2>

00000178 <.Loc.7>:
        return 1; // Button is pressed
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <.L3>

0000017e <.L2>:
    } else { // Input pin HIGH (button not pressed)
        return 0; // Button is not pressed
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0

00000182 <.L3>:
    }
}
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <countLimitSwitchPresses>:

uint16_t countLimitSwitchPresses(uint8_t inputPin, volatile uint8_t *inputPort, volatile uint8_t *pinReg) {
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	a7 97       	sbiw	r28, 0x27	; 39
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
 1a6:	8f 87       	std	Y+15, r24	; 0x0f
 1a8:	79 8b       	std	Y+17, r23	; 0x11
 1aa:	68 8b       	std	Y+16, r22	; 0x10
 1ac:	5b 8b       	std	Y+19, r21	; 0x13
 1ae:	4a 8b       	std	Y+18, r20	; 0x12

000001b0 <.Loc.11>:
    static uint16_t pressCount = 0; // Persistent count of presses
    static uint8_t wasPressed = 0; // Tracks the previous state of the button

    // Configure the input pin with pull-up resistor
    *inputPort |= (1 << inputPin); // Enable pull-up resistor
 1b0:	88 89       	ldd	r24, Y+16	; 0x10
 1b2:	99 89       	ldd	r25, Y+17	; 0x11
 1b4:	dc 01       	movw	r26, r24
 1b6:	8c 91       	ld	r24, X
 1b8:	48 2f       	mov	r20, r24

000001ba <.Loc.12>:
 1ba:	8f 85       	ldd	r24, Y+15	; 0x0f
 1bc:	28 2f       	mov	r18, r24
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <.L2^B3>

000001c6 <.L1^B3>:
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25

000001ca <.L2^B3>:
 1ca:	2a 95       	dec	r18
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <.L1^B3>

000001ce <.Loc.13>:
 1ce:	84 2b       	or	r24, r20
 1d0:	28 2f       	mov	r18, r24
 1d2:	88 89       	ldd	r24, Y+16	; 0x10
 1d4:	99 89       	ldd	r25, Y+17	; 0x11
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18

000001da <.Loc.14>:

    // Check if the button is currently pressed
    if (!(*pinReg & (1 << inputPin))) { // Button is pressed
 1da:	8a 89       	ldd	r24, Y+18	; 0x12
 1dc:	9b 89       	ldd	r25, Y+19	; 0x13
 1de:	dc 01       	movw	r26, r24
 1e0:	8c 91       	ld	r24, X
 1e2:	88 2f       	mov	r24, r24
 1e4:	90 e0       	ldi	r25, 0x00	; 0

000001e6 <.Loc.15>:
 1e6:	2f 85       	ldd	r18, Y+15	; 0x0f
 1e8:	22 2f       	mov	r18, r18
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	02 2e       	mov	r0, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <.L2^B4>

000001f0 <.L1^B4>:
 1f0:	95 95       	asr	r25
 1f2:	87 95       	ror	r24

000001f4 <.L2^B4>:
 1f4:	0a 94       	dec	r0
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <.L1^B4>
 1f8:	81 70       	andi	r24, 0x01	; 1
 1fa:	99 27       	eor	r25, r25

000001fc <.Loc.16>:
 1fc:	00 97       	sbiw	r24, 0x00	; 0
 1fe:	09 f0       	breq	.+2      	; 0x202 <.Loc.17>

00000200 <L0^A>:
 200:	a0 c0       	rjmp	.+320    	; 0x342 <.L5>

00000202 <.Loc.17>:
        if (!wasPressed) { // Detect transition from not pressed to pressed
 202:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <wasPressed.1>

00000206 <.Loc.18>:
 206:	88 23       	and	r24, r24
 208:	09 f0       	breq	.+2      	; 0x20c <.Loc.19>

0000020a <L0^A>:
 20a:	9d c0       	rjmp	.+314    	; 0x346 <.L6>

0000020c <.Loc.19>:
            pressCount++;  // Increment the press count
 20c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pressCount.0>
 210:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pressCount.0+0x1>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <pressCount.0+0x1>
 21a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <pressCount.0>

0000021e <.Loc.20>:
            wasPressed = 1; // Mark the button as pressed
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <wasPressed.1>
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	a8 e4       	ldi	r26, 0x48	; 72
 22a:	b2 e4       	ldi	r27, 0x42	; 66
 22c:	89 83       	std	Y+1, r24	; 0x01
 22e:	9a 83       	std	Y+2, r25	; 0x02
 230:	ab 83       	std	Y+3, r26	; 0x03
 232:	bc 83       	std	Y+4, r27	; 0x04

00000234 <.LBB12>:

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	4a e7       	ldi	r20, 0x7A	; 122
 23a:	55 e4       	ldi	r21, 0x45	; 69
 23c:	69 81       	ldd	r22, Y+1	; 0x01
 23e:	7a 81       	ldd	r23, Y+2	; 0x02
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	9c 81       	ldd	r25, Y+4	; 0x04
 244:	0e 94 3c 05 	call	0xa78	; 0xa78 <__mulsf3>
 248:	68 8f       	std	Y+24, r22	; 0x18
 24a:	79 8f       	std	Y+25, r23	; 0x19
 24c:	8a 8f       	std	Y+26, r24	; 0x1a
 24e:	9b 8f       	std	Y+27, r25	; 0x1b
 250:	88 8d       	ldd	r24, Y+24	; 0x18
 252:	99 8d       	ldd	r25, Y+25	; 0x19
 254:	aa 8d       	ldd	r26, Y+26	; 0x1a
 256:	bb 8d       	ldd	r27, Y+27	; 0x1b
 258:	8d 83       	std	Y+5, r24	; 0x05
 25a:	9e 83       	std	Y+6, r25	; 0x06
 25c:	af 83       	std	Y+7, r26	; 0x07
 25e:	b8 87       	std	Y+8, r27	; 0x08

00000260 <.Loc.22>:
	if (__tmp < 1.0)
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	40 e8       	ldi	r20, 0x80	; 128
 266:	5f e3       	ldi	r21, 0x3F	; 63
 268:	6d 81       	ldd	r22, Y+5	; 0x05
 26a:	7e 81       	ldd	r23, Y+6	; 0x06
 26c:	8f 81       	ldd	r24, Y+7	; 0x07
 26e:	98 85       	ldd	r25, Y+8	; 0x08
 270:	0e 94 b6 04 	call	0x96c	; 0x96c <__cmpsf2>
 274:	88 23       	and	r24, r24
 276:	2c f4       	brge	.+10     	; 0x282 <.L18>

00000278 <.Loc.23>:
		__ticks = 1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	9a 87       	std	Y+10, r25	; 0x0a
 27e:	89 87       	std	Y+9, r24	; 0x09
 280:	55 c0       	rjmp	.+170    	; 0x32c <.L9>

00000282 <.L18>:
	else if (__tmp > 65535)
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	3f ef       	ldi	r19, 0xFF	; 255
 286:	4f e7       	ldi	r20, 0x7F	; 127
 288:	57 e4       	ldi	r21, 0x47	; 71
 28a:	6d 81       	ldd	r22, Y+5	; 0x05
 28c:	7e 81       	ldd	r23, Y+6	; 0x06
 28e:	8f 81       	ldd	r24, Y+7	; 0x07
 290:	98 85       	ldd	r25, Y+8	; 0x08
 292:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gesf2>
 296:	88 23       	and	r24, r24
 298:	d9 f1       	breq	.+118    	; 0x310 <.L19>
 29a:	d4 f1       	brlt	.+116    	; 0x310 <.L19>

0000029c <.Loc.25>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	40 e2       	ldi	r20, 0x20	; 32
 2a2:	51 e4       	ldi	r21, 0x41	; 65
 2a4:	69 81       	ldd	r22, Y+1	; 0x01
 2a6:	7a 81       	ldd	r23, Y+2	; 0x02
 2a8:	8b 81       	ldd	r24, Y+3	; 0x03
 2aa:	9c 81       	ldd	r25, Y+4	; 0x04
 2ac:	0e 94 3c 05 	call	0xa78	; 0xa78 <__mulsf3>
 2b0:	6c 8f       	std	Y+28, r22	; 0x1c
 2b2:	7d 8f       	std	Y+29, r23	; 0x1d
 2b4:	8e 8f       	std	Y+30, r24	; 0x1e
 2b6:	9f 8f       	std	Y+31, r25	; 0x1f
 2b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2ba:	9d 8d       	ldd	r25, Y+29	; 0x1d
 2bc:	ae 8d       	ldd	r26, Y+30	; 0x1e
 2be:	bf 8d       	ldd	r27, Y+31	; 0x1f
 2c0:	8c 8b       	std	Y+20, r24	; 0x14
 2c2:	9d 8b       	std	Y+21, r25	; 0x15
 2c4:	ae 8b       	std	Y+22, r26	; 0x16
 2c6:	bf 8b       	std	Y+23, r27	; 0x17

000002c8 <.Loc.26>:
 2c8:	6c 89       	ldd	r22, Y+20	; 0x14
 2ca:	7d 89       	ldd	r23, Y+21	; 0x15
 2cc:	8e 89       	ldd	r24, Y+22	; 0x16
 2ce:	9f 89       	ldd	r25, Y+23	; 0x17
 2d0:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
 2d4:	68 a3       	std	Y+32, r22	; 0x20
 2d6:	79 a3       	std	Y+33, r23	; 0x21
 2d8:	8a a3       	std	Y+34, r24	; 0x22
 2da:	9b a3       	std	Y+35, r25	; 0x23
 2dc:	a8 a1       	ldd	r26, Y+32	; 0x20
 2de:	b9 a1       	ldd	r27, Y+33	; 0x21
 2e0:	ba 87       	std	Y+10, r27	; 0x0a
 2e2:	a9 87       	std	Y+9, r26	; 0x09

000002e4 <.Loc.27>:
		while(__ticks)
 2e4:	10 c0       	rjmp	.+32     	; 0x306 <.L12>

000002e6 <.L13>:
 2e6:	80 e9       	ldi	r24, 0x90	; 144
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	9c 87       	std	Y+12, r25	; 0x0c
 2ec:	8b 87       	std	Y+11, r24	; 0x0b

000002ee <.LBB14>:
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
 2ee:	8b 85       	ldd	r24, Y+11	; 0x0b
 2f0:	9c 85       	ldd	r25, Y+12	; 0x0c

000002f2 <.L1^B5>:
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <.L1^B5>
 2f6:	9c 87       	std	Y+12, r25	; 0x0c
 2f8:	8b 87       	std	Y+11, r24	; 0x0b

000002fa <.Loc.29>:
	...

000002fc <.LBE14>:
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2fc:	89 85       	ldd	r24, Y+9	; 0x09
 2fe:	9a 85       	ldd	r25, Y+10	; 0x0a
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	9a 87       	std	Y+10, r25	; 0x0a
 304:	89 87       	std	Y+9, r24	; 0x09

00000306 <.L12>:
		while(__ticks)
 306:	89 85       	ldd	r24, Y+9	; 0x09
 308:	9a 85       	ldd	r25, Y+10	; 0x0a
 30a:	00 97       	sbiw	r24, 0x00	; 0
 30c:	61 f7       	brne	.-40     	; 0x2e6 <.L13>

0000030e <.Loc.32>:
		}
		return;
 30e:	1b c0       	rjmp	.+54     	; 0x346 <.L6>

00000310 <.L19>:
	}
	else
		__ticks = (uint16_t)__tmp;
 310:	6d 81       	ldd	r22, Y+5	; 0x05
 312:	7e 81       	ldd	r23, Y+6	; 0x06
 314:	8f 81       	ldd	r24, Y+7	; 0x07
 316:	98 85       	ldd	r25, Y+8	; 0x08
 318:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
 31c:	6c a3       	std	Y+36, r22	; 0x24
 31e:	7d a3       	std	Y+37, r23	; 0x25
 320:	8e a3       	std	Y+38, r24	; 0x26
 322:	9f a3       	std	Y+39, r25	; 0x27
 324:	ec a1       	ldd	r30, Y+36	; 0x24
 326:	fd a1       	ldd	r31, Y+37	; 0x25
 328:	fa 87       	std	Y+10, r31	; 0x0a
 32a:	e9 87       	std	Y+9, r30	; 0x09

0000032c <.L9>:
 32c:	89 85       	ldd	r24, Y+9	; 0x09
 32e:	9a 85       	ldd	r25, Y+10	; 0x0a
 330:	9e 87       	std	Y+14, r25	; 0x0e
 332:	8d 87       	std	Y+13, r24	; 0x0d

00000334 <.LBB16>:
 334:	8d 85       	ldd	r24, Y+13	; 0x0d
 336:	9e 85       	ldd	r25, Y+14	; 0x0e

00000338 <.L1^B6>:
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <.L1^B6>
 33c:	9e 87       	std	Y+14, r25	; 0x0e
 33e:	8d 87       	std	Y+13, r24	; 0x0d

00000340 <.Loc.35>:
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
#endif /* __AVR_TINY__ */
}
 340:	02 c0       	rjmp	.+4      	; 0x346 <.L6>

00000342 <.L5>:
            _delay_ms(50);  // Simple debounce delay
        }
    } else { // Button is not pressed
        wasPressed = 0; // Reset the pressed state
 342:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <wasPressed.1>

00000346 <.L6>:
    }

    return pressCount;
 346:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pressCount.0>
 34a:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pressCount.0+0x1>

0000034e <.Loc.38>:
}
 34e:	a7 96       	adiw	r28, 0x27	; 39
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <main>:
#include <avr/io.h>
#include <util/delay.h>

static uint16_t distanceCount = 0; // Tracks the distance traveled

int main(void) {
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	0f 92       	push	r0
 366:	0f 92       	push	r0
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62

0000036c <.Loc.1>:
    initPortaalkraan(); // Initialize the system
 36c:	0e 94 20 03 	call	0x640	; 0x640 <initPortaalkraan>

00000370 <.Loc.2>:
    nulpuntPortaalkraan();
 370:	0e 94 3c 03 	call	0x678	; 0x678 <nulpuntPortaalkraan>

00000374 <.L3>:
    while (1) {
        uint16_t distance = afstandPortaalkraan(); // Read distance
 374:	0e 94 8e 04 	call	0x91c	; 0x91c <afstandPortaalkraan>
 378:	9a 83       	std	Y+2, r25	; 0x02
 37a:	89 83       	std	Y+1, r24	; 0x01

0000037c <.Loc.4>:
        portaalkraanMagneet();               // Check magnet safety
 37c:	0e 94 9c 04 	call	0x938	; 0x938 <portaalkraanMagneet>

00000380 <.Loc.5>:
        motorBeweegRechts();
 380:	0e 94 3e 02 	call	0x47c	; 0x47c <motorBeweegRechts>

00000384 <.Loc.6>:
        // Optional: Use distance for further control
        if (distance > 10) {
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	9a 81       	ldd	r25, Y+2	; 0x02
 388:	8a 30       	cpi	r24, 0x0A	; 10
 38a:	91 05       	cpc	r25, r1
 38c:	99 f3       	breq	.-26     	; 0x374 <.L3>
 38e:	90 f3       	brcs	.-28     	; 0x374 <.L3>

00000390 <.LBB3>:
            motorStop();
 390:	0e 94 65 02 	call	0x4ca	; 0x4ca <motorStop>

00000394 <.LBE2>:
    while (1) {
 394:	ef cf       	rjmp	.-34     	; 0x374 <.L3>

00000396 <init_timer>:
volatile uint8_t rpwm_active = 0;
volatile uint8_t lpwm2_active = 0;
volatile uint8_t rpwm2_active = 0;

void init_timer(void)
{
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62

0000039e <.Loc.1>:
    // Set Normal mode, Pre-scaler = 64
    TCCR0A = 0;
 39e:	84 e4       	ldi	r24, 0x44	; 68
 3a0:	90 e0       	ldi	r25, 0x00	; 0

000003a2 <.Loc.2>:
 3a2:	fc 01       	movw	r30, r24
 3a4:	10 82       	st	Z, r1

000003a6 <.Loc.3>:
    TCCR0B = (0 << CS02) | (1 << CS01) | (1 << CS00);
 3a6:	85 e4       	ldi	r24, 0x45	; 69
 3a8:	90 e0       	ldi	r25, 0x00	; 0

000003aa <.Loc.4>:
 3aa:	23 e0       	ldi	r18, 0x03	; 3
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 83       	st	Z, r18

000003b0 <.Loc.5>:
    OCR0A = 127;  // 50% duty cycle
 3b0:	87 e4       	ldi	r24, 0x47	; 71
 3b2:	90 e0       	ldi	r25, 0x00	; 0

000003b4 <.Loc.6>:
 3b4:	2f e7       	ldi	r18, 0x7F	; 127
 3b6:	fc 01       	movw	r30, r24
 3b8:	20 83       	st	Z, r18

000003ba <.Loc.7>:
    TIMSK0 = (1 << OCIE0A) | (1 << TOIE0); // Enable Compare A and Overflow interrupts
 3ba:	8e e6       	ldi	r24, 0x6E	; 110
 3bc:	90 e0       	ldi	r25, 0x00	; 0

000003be <.Loc.8>:
 3be:	23 e0       	ldi	r18, 0x03	; 3
 3c0:	fc 01       	movw	r30, r24
 3c2:	20 83       	st	Z, r18

000003c4 <.Loc.9>:
}
 3c4:	00 00       	nop
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <init_pins>:

void init_pins(void)
{
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62

000003d4 <.Loc.11>:
    // Debug LED
    DDRB |= (1 << PB6);
 3d4:	84 e2       	ldi	r24, 0x24	; 36
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	fc 01       	movw	r30, r24
 3da:	20 81       	ld	r18, Z
 3dc:	84 e2       	ldi	r24, 0x24	; 36
 3de:	90 e0       	ldi	r25, 0x00	; 0

000003e0 <.Loc.12>:
 3e0:	20 64       	ori	r18, 0x40	; 64
 3e2:	fc 01       	movw	r30, r24
 3e4:	20 83       	st	Z, r18

000003e6 <.Loc.13>:

    // Motor control pins (LPWM, RPWM) as output, initially off
    DDRL |= (1 << LPWM) | (1 << RPWM);
 3e6:	8a e0       	ldi	r24, 0x0A	; 10
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 81       	ld	r18, Z
 3ee:	8a e0       	ldi	r24, 0x0A	; 10
 3f0:	91 e0       	ldi	r25, 0x01	; 1

000003f2 <.Loc.14>:
 3f2:	28 62       	ori	r18, 0x28	; 40
 3f4:	fc 01       	movw	r30, r24
 3f6:	20 83       	st	Z, r18

000003f8 <.Loc.15>:
    PORTL &= ~(1 << LPWM) & ~(1 << RPWM);
 3f8:	8b e0       	ldi	r24, 0x0B	; 11
 3fa:	91 e0       	ldi	r25, 0x01	; 1
 3fc:	fc 01       	movw	r30, r24
 3fe:	20 81       	ld	r18, Z

00000400 <.Loc.16>:
 400:	8b e0       	ldi	r24, 0x0B	; 11
 402:	91 e0       	ldi	r25, 0x01	; 1

00000404 <.Loc.17>:
 404:	27 7d       	andi	r18, 0xD7	; 215
 406:	fc 01       	movw	r30, r24
 408:	20 83       	st	Z, r18

0000040a <.Loc.18>:

    // Pin 22 as output
    DDRA |= (1 << v5);
 40a:	81 e2       	ldi	r24, 0x21	; 33
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	fc 01       	movw	r30, r24
 410:	20 81       	ld	r18, Z
 412:	81 e2       	ldi	r24, 0x21	; 33
 414:	90 e0       	ldi	r25, 0x00	; 0

00000416 <.Loc.19>:
 416:	21 60       	ori	r18, 0x01	; 1
 418:	fc 01       	movw	r30, r24
 41a:	20 83       	st	Z, r18

0000041c <.Loc.20>:

    // Button on PF1 with pull-up
    DDRF &= ~(1 << PF1);  // Set PF1 as input
 41c:	80 e3       	ldi	r24, 0x30	; 48
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	fc 01       	movw	r30, r24
 422:	20 81       	ld	r18, Z

00000424 <.Loc.21>:
 424:	80 e3       	ldi	r24, 0x30	; 48
 426:	90 e0       	ldi	r25, 0x00	; 0

00000428 <.Loc.22>:
 428:	2d 7f       	andi	r18, 0xFD	; 253
 42a:	fc 01       	movw	r30, r24
 42c:	20 83       	st	Z, r18

0000042e <.Loc.23>:
    PORTF |= (1 << PF1);  // Enable pull-up resistor
 42e:	81 e3       	ldi	r24, 0x31	; 49
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	fc 01       	movw	r30, r24
 434:	20 81       	ld	r18, Z
 436:	81 e3       	ldi	r24, 0x31	; 49
 438:	90 e0       	ldi	r25, 0x00	; 0

0000043a <.Loc.24>:
 43a:	22 60       	ori	r18, 0x02	; 2
 43c:	fc 01       	movw	r30, r24
 43e:	20 83       	st	Z, r18

00000440 <.Loc.25>:
}
 440:	00 00       	nop
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <init>:

void init(void)
{
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62

00000450 <.Loc.27>:
    init_pins();
 450:	0e 94 e6 01 	call	0x3cc	; 0x3cc <init_pins>

00000454 <.Loc.28>:
    init_timer();
 454:	0e 94 cb 01 	call	0x396	; 0x396 <init_timer>

00000458 <.Loc.29>:
    sei(); // Enable global interrupts
 458:	78 94       	sei

0000045a <.Loc.30>:
}
 45a:	00 00       	nop
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <motorBeweegLinks>:

void motorBeweegLinks(void)
{
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62

0000046a <.Loc.32>:
    lpwm_active = 1;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <lpwm_active>

00000470 <.Loc.33>:
    rpwm_active = 0;
 470:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <rpwm_active>

00000474 <.Loc.34>:
}
 474:	00 00       	nop
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <motorBeweegRechts>:

void motorBeweegRechts(void)
{
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62

00000484 <.Loc.36>:
    rpwm_active = 1;
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <rpwm_active>

0000048a <.Loc.37>:
    lpwm_active = 0;
 48a:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <lpwm_active>

0000048e <.Loc.38>:
}
 48e:	00 00       	nop
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <motorBeweegOmlaag>:

void motorBeweegOmlaag(void)
{
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62

0000049e <.Loc.40>:
    rpwm2_active = 1;
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <rpwm2_active>

000004a4 <.Loc.41>:
    lpwm2_active = 0;
 4a4:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <lpwm2_active>

000004a8 <.Loc.42>:
}
 4a8:	00 00       	nop
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

000004b0 <motorBeweegOmhoog>:

void motorBeweegOmhoog(void)
{
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	cd b7       	in	r28, 0x3d	; 61
 4b6:	de b7       	in	r29, 0x3e	; 62

000004b8 <.Loc.44>:
    lpwm2_active = 1;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <lpwm2_active>

000004be <.Loc.45>:
    rpwm2_active = 0;
 4be:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <rpwm2_active>

000004c2 <.Loc.46>:
}
 4c2:	00 00       	nop
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	08 95       	ret

000004ca <motorStop>:


void motorStop(void)
{
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	cd b7       	in	r28, 0x3d	; 61
 4d0:	de b7       	in	r29, 0x3e	; 62

000004d2 <.Loc.48>:
    lpwm_active = 0;
 4d2:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <lpwm_active>

000004d6 <.Loc.49>:
    rpwm_active = 0;
 4d6:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <rpwm_active>

000004da <.Loc.50>:

    PORTL &= ~(1 << LPWM) & ~(1 << RPWM) & ~(1 << LPWM2) & ~(1 << RPWM2); // Turn off all outputs
 4da:	8b e0       	ldi	r24, 0x0B	; 11
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	fc 01       	movw	r30, r24
 4e0:	20 81       	ld	r18, Z

000004e2 <.Loc.51>:
 4e2:	8b e0       	ldi	r24, 0x0B	; 11
 4e4:	91 e0       	ldi	r25, 0x01	; 1

000004e6 <.Loc.52>:
 4e6:	23 7c       	andi	r18, 0xC3	; 195
 4e8:	fc 01       	movw	r30, r24
 4ea:	20 83       	st	Z, r18

000004ec <.Loc.53>:
}
 4ec:	00 00       	nop
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
 4f4:	1f 92       	push	r1
 4f6:	0f 92       	push	r0
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	0f 92       	push	r0
 4fc:	11 24       	eor	r1, r1
 4fe:	0b b6       	in	r0, 0x3b	; 59
 500:	0f 92       	push	r0
 502:	2f 93       	push	r18
 504:	8f 93       	push	r24
 506:	9f 93       	push	r25
 508:	ef 93       	push	r30
 50a:	ff 93       	push	r31
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62

00000514 <.Loc.55>:
    if (lpwm_active)
 514:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <lpwm_active>

00000518 <.Loc.56>:
 518:	88 23       	and	r24, r24
 51a:	49 f0       	breq	.+18     	; 0x52e <.L10>

0000051c <.Loc.57>:
    {
        PORTL &= ~(1 << LPWM); // Turn off LPWM
 51c:	8b e0       	ldi	r24, 0x0B	; 11
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	fc 01       	movw	r30, r24
 522:	20 81       	ld	r18, Z

00000524 <.Loc.58>:
 524:	8b e0       	ldi	r24, 0x0B	; 11
 526:	91 e0       	ldi	r25, 0x01	; 1

00000528 <.Loc.59>:
 528:	2f 7d       	andi	r18, 0xDF	; 223
 52a:	fc 01       	movw	r30, r24
 52c:	20 83       	st	Z, r18

0000052e <.L10>:
    }
    if (rpwm_active)
 52e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <rpwm_active>

00000532 <.Loc.61>:
 532:	88 23       	and	r24, r24
 534:	49 f0       	breq	.+18     	; 0x548 <.L11>

00000536 <.Loc.62>:
    {
        PORTL &= ~(1 << RPWM); // Turn off RPWM
 536:	8b e0       	ldi	r24, 0x0B	; 11
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	fc 01       	movw	r30, r24
 53c:	20 81       	ld	r18, Z

0000053e <.Loc.63>:
 53e:	8b e0       	ldi	r24, 0x0B	; 11
 540:	91 e0       	ldi	r25, 0x01	; 1

00000542 <.Loc.64>:
 542:	27 7f       	andi	r18, 0xF7	; 247
 544:	fc 01       	movw	r30, r24
 546:	20 83       	st	Z, r18

00000548 <.L11>:
    }
    if (lpwm2_active)
 548:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <lpwm2_active>

0000054c <.Loc.66>:
 54c:	88 23       	and	r24, r24
 54e:	49 f0       	breq	.+18     	; 0x562 <.L12>

00000550 <.Loc.67>:
    {
        PORTL &= ~(1 << LPWM2);
 550:	8b e0       	ldi	r24, 0x0B	; 11
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	fc 01       	movw	r30, r24
 556:	20 81       	ld	r18, Z

00000558 <.Loc.68>:
 558:	8b e0       	ldi	r24, 0x0B	; 11
 55a:	91 e0       	ldi	r25, 0x01	; 1

0000055c <.Loc.69>:
 55c:	2f 7e       	andi	r18, 0xEF	; 239
 55e:	fc 01       	movw	r30, r24
 560:	20 83       	st	Z, r18

00000562 <.L12>:
    }
    if (rpwm2_active)
 562:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rpwm2_active>

00000566 <.Loc.71>:
 566:	88 23       	and	r24, r24
 568:	49 f0       	breq	.+18     	; 0x57c <.L14>

0000056a <.Loc.72>:
    {
        PORTL &= ~(1 << RPWM2);
 56a:	8b e0       	ldi	r24, 0x0B	; 11
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	fc 01       	movw	r30, r24
 570:	20 81       	ld	r18, Z

00000572 <.Loc.73>:
 572:	8b e0       	ldi	r24, 0x0B	; 11
 574:	91 e0       	ldi	r25, 0x01	; 1

00000576 <.Loc.74>:
 576:	2b 7f       	andi	r18, 0xFB	; 251
 578:	fc 01       	movw	r30, r24
 57a:	20 83       	st	Z, r18

0000057c <.L14>:
    }
}
 57c:	00 00       	nop
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	ff 91       	pop	r31
 584:	ef 91       	pop	r30
 586:	9f 91       	pop	r25
 588:	8f 91       	pop	r24
 58a:	2f 91       	pop	r18
 58c:	0f 90       	pop	r0
 58e:	0b be       	out	0x3b, r0	; 59
 590:	0f 90       	pop	r0
 592:	0f be       	out	0x3f, r0	; 63
 594:	0f 90       	pop	r0
 596:	1f 90       	pop	r1
 598:	18 95       	reti

0000059a <__vector_23>:

ISR(TIMER0_OVF_vect)
{
 59a:	1f 92       	push	r1
 59c:	0f 92       	push	r0
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	0f 92       	push	r0
 5a2:	11 24       	eor	r1, r1
 5a4:	0b b6       	in	r0, 0x3b	; 59
 5a6:	0f 92       	push	r0
 5a8:	2f 93       	push	r18
 5aa:	8f 93       	push	r24
 5ac:	9f 93       	push	r25
 5ae:	ef 93       	push	r30
 5b0:	ff 93       	push	r31
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62

000005ba <.Loc.77>:
    if (lpwm_active)
 5ba:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <lpwm_active>

000005be <.Loc.78>:
 5be:	88 23       	and	r24, r24
 5c0:	49 f0       	breq	.+18     	; 0x5d4 <.L16>

000005c2 <.Loc.79>:
    {
        PORTL |= (1 << LPWM); // Turn on LPWM
 5c2:	8b e0       	ldi	r24, 0x0B	; 11
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	fc 01       	movw	r30, r24
 5c8:	20 81       	ld	r18, Z
 5ca:	8b e0       	ldi	r24, 0x0B	; 11
 5cc:	91 e0       	ldi	r25, 0x01	; 1

000005ce <.Loc.80>:
 5ce:	20 62       	ori	r18, 0x20	; 32
 5d0:	fc 01       	movw	r30, r24
 5d2:	20 83       	st	Z, r18

000005d4 <.L16>:
    }
    if (rpwm_active)
 5d4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <rpwm_active>

000005d8 <.Loc.82>:
 5d8:	88 23       	and	r24, r24
 5da:	49 f0       	breq	.+18     	; 0x5ee <.L17>

000005dc <.Loc.83>:
    {
        PORTL |= (1 << RPWM); // Turn on RPWM
 5dc:	8b e0       	ldi	r24, 0x0B	; 11
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	fc 01       	movw	r30, r24
 5e2:	20 81       	ld	r18, Z
 5e4:	8b e0       	ldi	r24, 0x0B	; 11
 5e6:	91 e0       	ldi	r25, 0x01	; 1

000005e8 <.Loc.84>:
 5e8:	28 60       	ori	r18, 0x08	; 8
 5ea:	fc 01       	movw	r30, r24
 5ec:	20 83       	st	Z, r18

000005ee <.L17>:
    }
    if (lpwm2_active)
 5ee:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <lpwm2_active>

000005f2 <.Loc.86>:
 5f2:	88 23       	and	r24, r24
 5f4:	49 f0       	breq	.+18     	; 0x608 <.L18>

000005f6 <.Loc.87>:
    {
        PORTL |= (1 << LPWM2); // Turn on LPWM
 5f6:	8b e0       	ldi	r24, 0x0B	; 11
 5f8:	91 e0       	ldi	r25, 0x01	; 1
 5fa:	fc 01       	movw	r30, r24
 5fc:	20 81       	ld	r18, Z
 5fe:	8b e0       	ldi	r24, 0x0B	; 11
 600:	91 e0       	ldi	r25, 0x01	; 1

00000602 <.Loc.88>:
 602:	20 61       	ori	r18, 0x10	; 16
 604:	fc 01       	movw	r30, r24
 606:	20 83       	st	Z, r18

00000608 <.L18>:
    }
    if (rpwm2_active)
 608:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rpwm2_active>

0000060c <.Loc.90>:
 60c:	88 23       	and	r24, r24
 60e:	49 f0       	breq	.+18     	; 0x622 <.L20>

00000610 <.Loc.91>:
    {
        PORTL |= (1 << RPWM2); // Turn on RPWM
 610:	8b e0       	ldi	r24, 0x0B	; 11
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	fc 01       	movw	r30, r24
 616:	20 81       	ld	r18, Z
 618:	8b e0       	ldi	r24, 0x0B	; 11
 61a:	91 e0       	ldi	r25, 0x01	; 1

0000061c <.Loc.92>:
 61c:	24 60       	ori	r18, 0x04	; 4
 61e:	fc 01       	movw	r30, r24
 620:	20 83       	st	Z, r18

00000622 <.L20>:
    }
}
 622:	00 00       	nop
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	ff 91       	pop	r31
 62a:	ef 91       	pop	r30
 62c:	9f 91       	pop	r25
 62e:	8f 91       	pop	r24
 630:	2f 91       	pop	r18
 632:	0f 90       	pop	r0
 634:	0b be       	out	0x3b, r0	; 59
 636:	0f 90       	pop	r0
 638:	0f be       	out	0x3f, r0	; 63
 63a:	0f 90       	pop	r0
 63c:	1f 90       	pop	r1
 63e:	18 95       	reti

00000640 <initPortaalkraan>:
#include <avr/io.h>
#include <util/delay.h>

static uint16_t distanceCount = 0; // Tracks the distance traveled

void initPortaalkraan(void) {
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	cd b7       	in	r28, 0x3d	; 61
 646:	de b7       	in	r29, 0x3e	; 62

00000648 <.Loc.1>:
    // Initialize motor and limit switches
    init(); // Initialize motor control
 648:	0e 94 24 02 	call	0x448	; 0x448 <init>

0000064c <.Loc.2>:
    DDRB &= ~(1 << PB0) & ~(1 << PB1) & ~(1 << PB2); // PB0, PB1, PB2 as inputs for limit switches
 64c:	84 e2       	ldi	r24, 0x24	; 36
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	fc 01       	movw	r30, r24
 652:	20 81       	ld	r18, Z

00000654 <.Loc.3>:
 654:	84 e2       	ldi	r24, 0x24	; 36
 656:	90 e0       	ldi	r25, 0x00	; 0

00000658 <.Loc.4>:
 658:	28 7f       	andi	r18, 0xF8	; 248
 65a:	fc 01       	movw	r30, r24
 65c:	20 83       	st	Z, r18

0000065e <.Loc.5>:
    PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2);  // Enable pull-up resistors
 65e:	85 e2       	ldi	r24, 0x25	; 37
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	fc 01       	movw	r30, r24
 664:	20 81       	ld	r18, Z
 666:	85 e2       	ldi	r24, 0x25	; 37
 668:	90 e0       	ldi	r25, 0x00	; 0

0000066a <.Loc.6>:
 66a:	27 60       	ori	r18, 0x07	; 7
 66c:	fc 01       	movw	r30, r24
 66e:	20 83       	st	Z, r18

00000670 <.Loc.7>:
}
 670:	00 00       	nop
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	08 95       	ret

00000678 <nulpuntPortaalkraan>:

void nulpuntPortaalkraan(void) {
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	cd b7       	in	r28, 0x3d	; 61
 67e:	de b7       	in	r29, 0x3e	; 62
 680:	c4 54       	subi	r28, 0x44	; 68
 682:	d1 09       	sbc	r29, r1
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	f8 94       	cli
 688:	de bf       	out	0x3e, r29	; 62
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	cd bf       	out	0x3d, r28	; 61

0000068e <.Loc.9>:
    // Move motor until the zero-point limit switch (PB0) is triggered
    motorBeweegLinks(); // Move motor in one direction
 68e:	0e 94 31 02 	call	0x462	; 0x462 <motorBeweegLinks>

00000692 <.Loc.10>:
    while (!isLimitSwitchPressed(PB0, &PORTB, &PINB)) {
 692:	8f c0       	rjmp	.+286    	; 0x7b2 <.L3>

00000694 <.L12>:
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	a0 e2       	ldi	r26, 0x20	; 32
 69a:	b1 e4       	ldi	r27, 0x41	; 65
 69c:	89 83       	std	Y+1, r24	; 0x01
 69e:	9a 83       	std	Y+2, r25	; 0x02
 6a0:	ab 83       	std	Y+3, r26	; 0x03
 6a2:	bc 83       	std	Y+4, r27	; 0x04

000006a4 <.LBB18>:
	__tmp = ((F_CPU) / 4e3) * __ms;
 6a4:	20 e0       	ldi	r18, 0x00	; 0
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	4a e7       	ldi	r20, 0x7A	; 122
 6aa:	55 e4       	ldi	r21, 0x45	; 69
 6ac:	69 81       	ldd	r22, Y+1	; 0x01
 6ae:	7a 81       	ldd	r23, Y+2	; 0x02
 6b0:	8b 81       	ldd	r24, Y+3	; 0x03
 6b2:	9c 81       	ldd	r25, Y+4	; 0x04
 6b4:	0e 94 3c 05 	call	0xa78	; 0xa78 <__mulsf3>
 6b8:	6d a3       	std	Y+37, r22	; 0x25
 6ba:	7e a3       	std	Y+38, r23	; 0x26
 6bc:	8f a3       	std	Y+39, r24	; 0x27
 6be:	98 a7       	std	Y+40, r25	; 0x28
 6c0:	8d a1       	ldd	r24, Y+37	; 0x25
 6c2:	9e a1       	ldd	r25, Y+38	; 0x26
 6c4:	af a1       	ldd	r26, Y+39	; 0x27
 6c6:	b8 a5       	ldd	r27, Y+40	; 0x28
 6c8:	8d 83       	std	Y+5, r24	; 0x05
 6ca:	9e 83       	std	Y+6, r25	; 0x06
 6cc:	af 83       	std	Y+7, r26	; 0x07
 6ce:	b8 87       	std	Y+8, r27	; 0x08

000006d0 <.Loc.12>:
	if (__tmp < 1.0)
 6d0:	20 e0       	ldi	r18, 0x00	; 0
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	40 e8       	ldi	r20, 0x80	; 128
 6d6:	5f e3       	ldi	r21, 0x3F	; 63
 6d8:	6d 81       	ldd	r22, Y+5	; 0x05
 6da:	7e 81       	ldd	r23, Y+6	; 0x06
 6dc:	8f 81       	ldd	r24, Y+7	; 0x07
 6de:	98 85       	ldd	r25, Y+8	; 0x08
 6e0:	0e 94 b6 04 	call	0x96c	; 0x96c <__cmpsf2>
 6e4:	88 23       	and	r24, r24
 6e6:	2c f4       	brge	.+10     	; 0x6f2 <.L25>

000006e8 <.Loc.13>:
		__ticks = 1;
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	9a 87       	std	Y+10, r25	; 0x0a
 6ee:	89 87       	std	Y+9, r24	; 0x09
 6f0:	55 c0       	rjmp	.+170    	; 0x79c <.L6>

000006f2 <.L25>:
	else if (__tmp > 65535)
 6f2:	20 e0       	ldi	r18, 0x00	; 0
 6f4:	3f ef       	ldi	r19, 0xFF	; 255
 6f6:	4f e7       	ldi	r20, 0x7F	; 127
 6f8:	57 e4       	ldi	r21, 0x47	; 71
 6fa:	6d 81       	ldd	r22, Y+5	; 0x05
 6fc:	7e 81       	ldd	r23, Y+6	; 0x06
 6fe:	8f 81       	ldd	r24, Y+7	; 0x07
 700:	98 85       	ldd	r25, Y+8	; 0x08
 702:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gesf2>
 706:	88 23       	and	r24, r24
 708:	d9 f1       	breq	.+118    	; 0x780 <.L26>
 70a:	d4 f1       	brlt	.+116    	; 0x780 <.L26>

0000070c <.Loc.15>:
		__ticks = (uint16_t) (__ms * 10.0);
 70c:	20 e0       	ldi	r18, 0x00	; 0
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	40 e2       	ldi	r20, 0x20	; 32
 712:	51 e4       	ldi	r21, 0x41	; 65
 714:	69 81       	ldd	r22, Y+1	; 0x01
 716:	7a 81       	ldd	r23, Y+2	; 0x02
 718:	8b 81       	ldd	r24, Y+3	; 0x03
 71a:	9c 81       	ldd	r25, Y+4	; 0x04
 71c:	0e 94 3c 05 	call	0xa78	; 0xa78 <__mulsf3>
 720:	69 a7       	std	Y+41, r22	; 0x29
 722:	7a a7       	std	Y+42, r23	; 0x2a
 724:	8b a7       	std	Y+43, r24	; 0x2b
 726:	9c a7       	std	Y+44, r25	; 0x2c
 728:	89 a5       	ldd	r24, Y+41	; 0x29
 72a:	9a a5       	ldd	r25, Y+42	; 0x2a
 72c:	ab a5       	ldd	r26, Y+43	; 0x2b
 72e:	bc a5       	ldd	r27, Y+44	; 0x2c
 730:	8d 8f       	std	Y+29, r24	; 0x1d
 732:	9e 8f       	std	Y+30, r25	; 0x1e
 734:	af 8f       	std	Y+31, r26	; 0x1f
 736:	b8 a3       	std	Y+32, r27	; 0x20

00000738 <.Loc.16>:
 738:	6d 8d       	ldd	r22, Y+29	; 0x1d
 73a:	7e 8d       	ldd	r23, Y+30	; 0x1e
 73c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 73e:	98 a1       	ldd	r25, Y+32	; 0x20
 740:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
 744:	6d a7       	std	Y+45, r22	; 0x2d
 746:	7e a7       	std	Y+46, r23	; 0x2e
 748:	8f a7       	std	Y+47, r24	; 0x2f
 74a:	98 ab       	std	Y+48, r25	; 0x30
 74c:	ad a5       	ldd	r26, Y+45	; 0x2d
 74e:	be a5       	ldd	r27, Y+46	; 0x2e
 750:	ba 87       	std	Y+10, r27	; 0x0a
 752:	a9 87       	std	Y+9, r26	; 0x09

00000754 <.Loc.17>:
		while(__ticks)
 754:	10 c0       	rjmp	.+32     	; 0x776 <.L9>

00000756 <.L10>:
 756:	80 e9       	ldi	r24, 0x90	; 144
 758:	91 e0       	ldi	r25, 0x01	; 1
 75a:	9c 87       	std	Y+12, r25	; 0x0c
 75c:	8b 87       	std	Y+11, r24	; 0x0b

0000075e <.LBB20>:
	__asm__ volatile (
 75e:	8b 85       	ldd	r24, Y+11	; 0x0b
 760:	9c 85       	ldd	r25, Y+12	; 0x0c

00000762 <.L1^B1>:
 762:	01 97       	sbiw	r24, 0x01	; 1
 764:	f1 f7       	brne	.-4      	; 0x762 <.L1^B1>
 766:	9c 87       	std	Y+12, r25	; 0x0c
 768:	8b 87       	std	Y+11, r24	; 0x0b

0000076a <.Loc.19>:
	...

0000076c <.LBE20>:
			__ticks --;
 76c:	89 85       	ldd	r24, Y+9	; 0x09
 76e:	9a 85       	ldd	r25, Y+10	; 0x0a
 770:	01 97       	sbiw	r24, 0x01	; 1
 772:	9a 87       	std	Y+10, r25	; 0x0a
 774:	89 87       	std	Y+9, r24	; 0x09

00000776 <.L9>:
		while(__ticks)
 776:	89 85       	ldd	r24, Y+9	; 0x09
 778:	9a 85       	ldd	r25, Y+10	; 0x0a
 77a:	00 97       	sbiw	r24, 0x00	; 0
 77c:	61 f7       	brne	.-40     	; 0x756 <.L10>

0000077e <.Loc.22>:
		return;
 77e:	19 c0       	rjmp	.+50     	; 0x7b2 <.L3>

00000780 <.L26>:
		__ticks = (uint16_t)__tmp;
 780:	6d 81       	ldd	r22, Y+5	; 0x05
 782:	7e 81       	ldd	r23, Y+6	; 0x06
 784:	8f 81       	ldd	r24, Y+7	; 0x07
 786:	98 85       	ldd	r25, Y+8	; 0x08
 788:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
 78c:	69 ab       	std	Y+49, r22	; 0x31
 78e:	7a ab       	std	Y+50, r23	; 0x32
 790:	8b ab       	std	Y+51, r24	; 0x33
 792:	9c ab       	std	Y+52, r25	; 0x34
 794:	89 a9       	ldd	r24, Y+49	; 0x31
 796:	9a a9       	ldd	r25, Y+50	; 0x32
 798:	9a 87       	std	Y+10, r25	; 0x0a
 79a:	89 87       	std	Y+9, r24	; 0x09

0000079c <.L6>:
 79c:	89 85       	ldd	r24, Y+9	; 0x09
 79e:	9a 85       	ldd	r25, Y+10	; 0x0a
 7a0:	9e 87       	std	Y+14, r25	; 0x0e
 7a2:	8d 87       	std	Y+13, r24	; 0x0d

000007a4 <.LBB22>:
 7a4:	8d 85       	ldd	r24, Y+13	; 0x0d
 7a6:	9e 85       	ldd	r25, Y+14	; 0x0e

000007a8 <.L1^B2>:
 7a8:	01 97       	sbiw	r24, 0x01	; 1
 7aa:	f1 f7       	brne	.-4      	; 0x7a8 <.L1^B2>
 7ac:	9e 87       	std	Y+14, r25	; 0x0e
 7ae:	8d 87       	std	Y+13, r24	; 0x0d

000007b0 <.Loc.25>:
	...

000007b2 <.L3>:
 7b2:	43 e2       	ldi	r20, 0x23	; 35
 7b4:	50 e0       	ldi	r21, 0x00	; 0
 7b6:	65 e2       	ldi	r22, 0x25	; 37
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	0e 94 88 00 	call	0x110	; 0x110 <isLimitSwitchPressed>

000007c0 <.Loc.27>:
 7c0:	00 97       	sbiw	r24, 0x00	; 0
 7c2:	09 f4       	brne	.+2      	; 0x7c6 <.Loc.28>

000007c4 <L0^A>:
 7c4:	67 cf       	rjmp	.-306    	; 0x694 <.L12>

000007c6 <.Loc.28>:
        _delay_ms(10); // Check every 10ms
    }
    motorStop(); // Stop motor when zero point is reached
 7c6:	0e 94 65 02 	call	0x4ca	; 0x4ca <motorStop>

000007ca <.Loc.29>:
    motorBeweegRechts();
 7ca:	0e 94 3e 02 	call	0x47c	; 0x47c <motorBeweegRechts>
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	a0 e2       	ldi	r26, 0x20	; 32
 7d4:	b1 e4       	ldi	r27, 0x41	; 65
 7d6:	8f 87       	std	Y+15, r24	; 0x0f
 7d8:	98 8b       	std	Y+16, r25	; 0x10
 7da:	a9 8b       	std	Y+17, r26	; 0x11
 7dc:	ba 8b       	std	Y+18, r27	; 0x12

000007de <.LBB24>:
	__tmp = ((F_CPU) / 4e3) * __ms;
 7de:	20 e0       	ldi	r18, 0x00	; 0
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	4a e7       	ldi	r20, 0x7A	; 122
 7e4:	55 e4       	ldi	r21, 0x45	; 69
 7e6:	6f 85       	ldd	r22, Y+15	; 0x0f
 7e8:	78 89       	ldd	r23, Y+16	; 0x10
 7ea:	89 89       	ldd	r24, Y+17	; 0x11
 7ec:	9a 89       	ldd	r25, Y+18	; 0x12
 7ee:	0e 94 3c 05 	call	0xa78	; 0xa78 <__mulsf3>
 7f2:	6d ab       	std	Y+53, r22	; 0x35
 7f4:	7e ab       	std	Y+54, r23	; 0x36
 7f6:	8f ab       	std	Y+55, r24	; 0x37
 7f8:	98 af       	std	Y+56, r25	; 0x38
 7fa:	8d a9       	ldd	r24, Y+53	; 0x35
 7fc:	9e a9       	ldd	r25, Y+54	; 0x36
 7fe:	af a9       	ldd	r26, Y+55	; 0x37
 800:	b8 ad       	ldd	r27, Y+56	; 0x38
 802:	8b 8b       	std	Y+19, r24	; 0x13
 804:	9c 8b       	std	Y+20, r25	; 0x14
 806:	ad 8b       	std	Y+21, r26	; 0x15
 808:	be 8b       	std	Y+22, r27	; 0x16

0000080a <.Loc.31>:
	if (__tmp < 1.0)
 80a:	20 e0       	ldi	r18, 0x00	; 0
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	40 e8       	ldi	r20, 0x80	; 128
 810:	5f e3       	ldi	r21, 0x3F	; 63
 812:	6b 89       	ldd	r22, Y+19	; 0x13
 814:	7c 89       	ldd	r23, Y+20	; 0x14
 816:	8d 89       	ldd	r24, Y+21	; 0x15
 818:	9e 89       	ldd	r25, Y+22	; 0x16
 81a:	0e 94 b6 04 	call	0x96c	; 0x96c <__cmpsf2>
 81e:	88 23       	and	r24, r24
 820:	2c f4       	brge	.+10     	; 0x82c <.L27>

00000822 <.Loc.32>:
		__ticks = 1;
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	98 8f       	std	Y+24, r25	; 0x18
 828:	8f 8b       	std	Y+23, r24	; 0x17
 82a:	5c c0       	rjmp	.+184    	; 0x8e4 <.L15>

0000082c <.L27>:
	else if (__tmp > 65535)
 82c:	20 e0       	ldi	r18, 0x00	; 0
 82e:	3f ef       	ldi	r19, 0xFF	; 255
 830:	4f e7       	ldi	r20, 0x7F	; 127
 832:	57 e4       	ldi	r21, 0x47	; 71
 834:	6b 89       	ldd	r22, Y+19	; 0x13
 836:	7c 89       	ldd	r23, Y+20	; 0x14
 838:	8d 89       	ldd	r24, Y+21	; 0x15
 83a:	9e 89       	ldd	r25, Y+22	; 0x16
 83c:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gesf2>
 840:	88 23       	and	r24, r24
 842:	09 f0       	breq	.+2      	; 0x846 <L0^A>

00000844 <L0^A>:
 844:	0c f4       	brge	.+2      	; 0x848 <.Loc.34>

00000846 <L0^A>:
 846:	3c c0       	rjmp	.+120    	; 0x8c0 <.L28>

00000848 <.Loc.34>:
		__ticks = (uint16_t) (__ms * 10.0);
 848:	20 e0       	ldi	r18, 0x00	; 0
 84a:	30 e0       	ldi	r19, 0x00	; 0
 84c:	40 e2       	ldi	r20, 0x20	; 32
 84e:	51 e4       	ldi	r21, 0x41	; 65
 850:	6f 85       	ldd	r22, Y+15	; 0x0f
 852:	78 89       	ldd	r23, Y+16	; 0x10
 854:	89 89       	ldd	r24, Y+17	; 0x11
 856:	9a 89       	ldd	r25, Y+18	; 0x12
 858:	0e 94 3c 05 	call	0xa78	; 0xa78 <__mulsf3>
 85c:	69 af       	std	Y+57, r22	; 0x39
 85e:	7a af       	std	Y+58, r23	; 0x3a
 860:	8b af       	std	Y+59, r24	; 0x3b
 862:	9c af       	std	Y+60, r25	; 0x3c
 864:	89 ad       	ldd	r24, Y+57	; 0x39
 866:	9a ad       	ldd	r25, Y+58	; 0x3a
 868:	ab ad       	ldd	r26, Y+59	; 0x3b
 86a:	bc ad       	ldd	r27, Y+60	; 0x3c
 86c:	89 a3       	std	Y+33, r24	; 0x21
 86e:	9a a3       	std	Y+34, r25	; 0x22
 870:	ab a3       	std	Y+35, r26	; 0x23
 872:	bc a3       	std	Y+36, r27	; 0x24

00000874 <.Loc.35>:
 874:	69 a1       	ldd	r22, Y+33	; 0x21
 876:	7a a1       	ldd	r23, Y+34	; 0x22
 878:	8b a1       	ldd	r24, Y+35	; 0x23
 87a:	9c a1       	ldd	r25, Y+36	; 0x24
 87c:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
 880:	21 96       	adiw	r28, 0x01	; 1
 882:	6c af       	std	Y+60, r22	; 0x3c
 884:	7d af       	std	Y+61, r23	; 0x3d
 886:	8e af       	std	Y+62, r24	; 0x3e
 888:	9f af       	std	Y+63, r25	; 0x3f
 88a:	21 97       	sbiw	r28, 0x01	; 1
 88c:	ad ad       	ldd	r26, Y+61	; 0x3d
 88e:	be ad       	ldd	r27, Y+62	; 0x3e
 890:	b8 8f       	std	Y+24, r27	; 0x18
 892:	af 8b       	std	Y+23, r26	; 0x17

00000894 <.Loc.36>:
		while(__ticks)
 894:	10 c0       	rjmp	.+32     	; 0x8b6 <.L18>

00000896 <.L19>:
 896:	80 e9       	ldi	r24, 0x90	; 144
 898:	91 e0       	ldi	r25, 0x01	; 1
 89a:	9a 8f       	std	Y+26, r25	; 0x1a
 89c:	89 8f       	std	Y+25, r24	; 0x19

0000089e <.LBB26>:
 89e:	89 8d       	ldd	r24, Y+25	; 0x19
 8a0:	9a 8d       	ldd	r25, Y+26	; 0x1a

000008a2 <.L1^B3>:
 8a2:	01 97       	sbiw	r24, 0x01	; 1
 8a4:	f1 f7       	brne	.-4      	; 0x8a2 <.L1^B3>
 8a6:	9a 8f       	std	Y+26, r25	; 0x1a
 8a8:	89 8f       	std	Y+25, r24	; 0x19

000008aa <.Loc.38>:
	...

000008ac <.LBE26>:
			__ticks --;
 8ac:	8f 89       	ldd	r24, Y+23	; 0x17
 8ae:	98 8d       	ldd	r25, Y+24	; 0x18
 8b0:	01 97       	sbiw	r24, 0x01	; 1
 8b2:	98 8f       	std	Y+24, r25	; 0x18
 8b4:	8f 8b       	std	Y+23, r24	; 0x17

000008b6 <.L18>:
		while(__ticks)
 8b6:	8f 89       	ldd	r24, Y+23	; 0x17
 8b8:	98 8d       	ldd	r25, Y+24	; 0x18
 8ba:	00 97       	sbiw	r24, 0x00	; 0
 8bc:	61 f7       	brne	.-40     	; 0x896 <.L19>

000008be <.Loc.41>:
		return;
 8be:	1d c0       	rjmp	.+58     	; 0x8fa <.L20>

000008c0 <.L28>:
		__ticks = (uint16_t)__tmp;
 8c0:	6b 89       	ldd	r22, Y+19	; 0x13
 8c2:	7c 89       	ldd	r23, Y+20	; 0x14
 8c4:	8d 89       	ldd	r24, Y+21	; 0x15
 8c6:	9e 89       	ldd	r25, Y+22	; 0x16
 8c8:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
 8cc:	25 96       	adiw	r28, 0x05	; 5
 8ce:	6c af       	std	Y+60, r22	; 0x3c
 8d0:	7d af       	std	Y+61, r23	; 0x3d
 8d2:	8e af       	std	Y+62, r24	; 0x3e
 8d4:	9f af       	std	Y+63, r25	; 0x3f
 8d6:	25 97       	sbiw	r28, 0x05	; 5
 8d8:	23 96       	adiw	r28, 0x03	; 3
 8da:	8e ad       	ldd	r24, Y+62	; 0x3e
 8dc:	9f ad       	ldd	r25, Y+63	; 0x3f
 8de:	23 97       	sbiw	r28, 0x03	; 3
 8e0:	98 8f       	std	Y+24, r25	; 0x18
 8e2:	8f 8b       	std	Y+23, r24	; 0x17

000008e4 <.L15>:
 8e4:	8f 89       	ldd	r24, Y+23	; 0x17
 8e6:	98 8d       	ldd	r25, Y+24	; 0x18
 8e8:	9c 8f       	std	Y+28, r25	; 0x1c
 8ea:	8b 8f       	std	Y+27, r24	; 0x1b

000008ec <.LBB28>:
 8ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
 8ee:	9c 8d       	ldd	r25, Y+28	; 0x1c

000008f0 <.L1^B4>:
 8f0:	01 97       	sbiw	r24, 0x01	; 1
 8f2:	f1 f7       	brne	.-4      	; 0x8f0 <.L1^B4>
 8f4:	9c 8f       	std	Y+28, r25	; 0x1c
 8f6:	8b 8f       	std	Y+27, r24	; 0x1b

000008f8 <.Loc.44>:
	...

000008fa <.L20>:
    _delay_ms(10);
    motorStop();
 8fa:	0e 94 65 02 	call	0x4ca	; 0x4ca <motorStop>

000008fe <.Loc.46>:
    distanceCount = 0; // Reset the distance count
 8fe:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <distanceCount+0x1>
 902:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <distanceCount>

00000906 <.Loc.47>:
}
 906:	00 00       	nop
 908:	cc 5b       	subi	r28, 0xBC	; 188
 90a:	df 4f       	sbci	r29, 0xFF	; 255
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	f8 94       	cli
 910:	de bf       	out	0x3e, r29	; 62
 912:	0f be       	out	0x3f, r0	; 63
 914:	cd bf       	out	0x3d, r28	; 61
 916:	df 91       	pop	r29
 918:	cf 91       	pop	r28
 91a:	08 95       	ret

0000091c <afstandPortaalkraan>:

uint16_t afstandPortaalkraan(void) {
 91c:	cf 93       	push	r28
 91e:	df 93       	push	r29
 920:	cd b7       	in	r28, 0x3d	; 61
 922:	de b7       	in	r29, 0x3e	; 62

00000924 <.Loc.49>:
    return countLimitSwitchPresses(PB1, &PORTB, &PINB); // Return the total distance count
 924:	43 e2       	ldi	r20, 0x23	; 35
 926:	50 e0       	ldi	r21, 0x00	; 0
 928:	65 e2       	ldi	r22, 0x25	; 37
 92a:	70 e0       	ldi	r23, 0x00	; 0
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	0e 94 c9 00 	call	0x192	; 0x192 <countLimitSwitchPresses>

00000932 <.Loc.50>:
}
 932:	df 91       	pop	r29
 934:	cf 91       	pop	r28
 936:	08 95       	ret

00000938 <portaalkraanMagneet>:

void portaalkraanMagneet(void) {
 938:	cf 93       	push	r28
 93a:	df 93       	push	r29
 93c:	cd b7       	in	r28, 0x3d	; 61
 93e:	de b7       	in	r29, 0x3e	; 62

00000940 <.Loc.52>:
    // Check if the magnet safety limit switch (PB2) is triggered
    if (isLimitSwitchPressed(PB2, &PORTB, &PINB)) {
 940:	43 e2       	ldi	r20, 0x23	; 35
 942:	50 e0       	ldi	r21, 0x00	; 0
 944:	65 e2       	ldi	r22, 0x25	; 37
 946:	70 e0       	ldi	r23, 0x00	; 0
 948:	82 e0       	ldi	r24, 0x02	; 2
 94a:	0e 94 88 00 	call	0x110	; 0x110 <isLimitSwitchPressed>

0000094e <.Loc.53>:
 94e:	00 97       	sbiw	r24, 0x00	; 0
 950:	49 f0       	breq	.+18     	; 0x964 <.L33>

00000952 <.Loc.54>:
        // Add code to turn off the magnet here
        // Example: Setting a magnet control pin low
        PORTB &= ~(1 << PB4); // Assume PB4 controls the magnet
 952:	85 e2       	ldi	r24, 0x25	; 37
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	fc 01       	movw	r30, r24
 958:	20 81       	ld	r18, Z

0000095a <.Loc.55>:
 95a:	85 e2       	ldi	r24, 0x25	; 37
 95c:	90 e0       	ldi	r25, 0x00	; 0

0000095e <.Loc.56>:
 95e:	2f 7e       	andi	r18, 0xEF	; 239
 960:	fc 01       	movw	r30, r24
 962:	20 83       	st	Z, r18

00000964 <.L33>:
    }
}
 964:	00 00       	nop
 966:	df 91       	pop	r29
 968:	cf 91       	pop	r28
 96a:	08 95       	ret

0000096c <__cmpsf2>:
 96c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fp_cmp>
 970:	08 f4       	brcc	.+2      	; 0x974 <.L1^B1>
 972:	81 e0       	ldi	r24, 0x01	; 1

00000974 <.L1^B1>:
 974:	08 95       	ret

00000976 <__fixunssfsi>:
 976:	0e 94 16 05 	call	0xa2c	; 0xa2c <__fp_splitA>
 97a:	88 f0       	brcs	.+34     	; 0x99e <.L_err>
 97c:	9f 57       	subi	r25, 0x7F	; 127
 97e:	98 f0       	brcs	.+38     	; 0x9a6 <.L_zr>
 980:	b9 2f       	mov	r27, r25
 982:	99 27       	eor	r25, r25
 984:	b7 51       	subi	r27, 0x17	; 23
 986:	b0 f0       	brcs	.+44     	; 0x9b4 <.L4^B1>
 988:	e1 f0       	breq	.+56     	; 0x9c2 <.L_sign>

0000098a <.L1^B1>:
 98a:	66 0f       	add	r22, r22
 98c:	77 1f       	adc	r23, r23
 98e:	88 1f       	adc	r24, r24
 990:	99 1f       	adc	r25, r25
 992:	1a f0       	brmi	.+6      	; 0x99a <.L2^B1>
 994:	ba 95       	dec	r27
 996:	c9 f7       	brne	.-14     	; 0x98a <.L1^B1>
 998:	14 c0       	rjmp	.+40     	; 0x9c2 <.L_sign>

0000099a <.L2^B1>:
 99a:	b1 30       	cpi	r27, 0x01	; 1
 99c:	91 f0       	breq	.+36     	; 0x9c2 <.L_sign>

0000099e <.L_err>:
 99e:	0e 94 30 05 	call	0xa60	; 0xa60 <__fp_zero>
 9a2:	b1 e0       	ldi	r27, 0x01	; 1
 9a4:	08 95       	ret

000009a6 <.L_zr>:
 9a6:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_zero>

000009aa <.L3^B1>:
 9aa:	67 2f       	mov	r22, r23
 9ac:	78 2f       	mov	r23, r24
 9ae:	88 27       	eor	r24, r24
 9b0:	b8 5f       	subi	r27, 0xF8	; 248
 9b2:	39 f0       	breq	.+14     	; 0x9c2 <.L_sign>

000009b4 <.L4^B1>:
 9b4:	b9 3f       	cpi	r27, 0xF9	; 249
 9b6:	cc f3       	brlt	.-14     	; 0x9aa <.L3^B1>

000009b8 <.L5^B1>:
 9b8:	86 95       	lsr	r24
 9ba:	77 95       	ror	r23
 9bc:	67 95       	ror	r22
 9be:	b3 95       	inc	r27
 9c0:	d9 f7       	brne	.-10     	; 0x9b8 <.L5^B1>

000009c2 <.L_sign>:
 9c2:	3e f4       	brtc	.+14     	; 0x9d2 <.L6^B1>
 9c4:	90 95       	com	r25
 9c6:	80 95       	com	r24
 9c8:	70 95       	com	r23
 9ca:	61 95       	neg	r22
 9cc:	7f 4f       	sbci	r23, 0xFF	; 255
 9ce:	8f 4f       	sbci	r24, 0xFF	; 255
 9d0:	9f 4f       	sbci	r25, 0xFF	; 255

000009d2 <.L6^B1>:
 9d2:	08 95       	ret

000009d4 <__fp_cmp>:
 9d4:	99 0f       	add	r25, r25
 9d6:	00 08       	sbc	r0, r0
 9d8:	55 0f       	add	r21, r21
 9da:	aa 0b       	sbc	r26, r26
 9dc:	e0 e8       	ldi	r30, 0x80	; 128
 9de:	fe ef       	ldi	r31, 0xFE	; 254
 9e0:	16 16       	cp	r1, r22
 9e2:	17 06       	cpc	r1, r23
 9e4:	e8 07       	cpc	r30, r24
 9e6:	f9 07       	cpc	r31, r25
 9e8:	c0 f0       	brcs	.+48     	; 0xa1a <.L9^B1>
 9ea:	12 16       	cp	r1, r18
 9ec:	13 06       	cpc	r1, r19
 9ee:	e4 07       	cpc	r30, r20
 9f0:	f5 07       	cpc	r31, r21
 9f2:	98 f0       	brcs	.+38     	; 0xa1a <.L9^B1>
 9f4:	62 1b       	sub	r22, r18
 9f6:	73 0b       	sbc	r23, r19
 9f8:	84 0b       	sbc	r24, r20
 9fa:	95 0b       	sbc	r25, r21
 9fc:	39 f4       	brne	.+14     	; 0xa0c <.L1^B1>
 9fe:	0a 26       	eor	r0, r26
 a00:	61 f0       	breq	.+24     	; 0xa1a <.L9^B1>
 a02:	23 2b       	or	r18, r19
 a04:	24 2b       	or	r18, r20
 a06:	25 2b       	or	r18, r21
 a08:	21 f4       	brne	.+8      	; 0xa12 <.L2^B1>
 a0a:	08 95       	ret

00000a0c <.L1^B1>:
 a0c:	0a 26       	eor	r0, r26
 a0e:	09 f4       	brne	.+2      	; 0xa12 <.L2^B1>
 a10:	a1 40       	sbci	r26, 0x01	; 1

00000a12 <.L2^B1>:
 a12:	a6 95       	lsr	r26
 a14:	8f ef       	ldi	r24, 0xFF	; 255
 a16:	81 1d       	adc	r24, r1
 a18:	81 1d       	adc	r24, r1

00000a1a <.L9^B1>:
 a1a:	08 95       	ret

00000a1c <__fp_split3>:
 a1c:	57 fd       	sbrc	r21, 7
 a1e:	90 58       	subi	r25, 0x80	; 128
 a20:	44 0f       	add	r20, r20
 a22:	55 1f       	adc	r21, r21
 a24:	59 f0       	breq	.+22     	; 0xa3c <.L4^B1>
 a26:	5f 3f       	cpi	r21, 0xFF	; 255
 a28:	71 f0       	breq	.+28     	; 0xa46 <.L5^B1>

00000a2a <.L1^B1>:
 a2a:	47 95       	ror	r20

00000a2c <__fp_splitA>:
 a2c:	88 0f       	add	r24, r24
 a2e:	97 fb       	bst	r25, 7
 a30:	99 1f       	adc	r25, r25
 a32:	61 f0       	breq	.+24     	; 0xa4c <.L6^B1>
 a34:	9f 3f       	cpi	r25, 0xFF	; 255
 a36:	79 f0       	breq	.+30     	; 0xa56 <.L7^B1>

00000a38 <.L3^B1>:
 a38:	87 95       	ror	r24
 a3a:	08 95       	ret

00000a3c <.L4^B1>:
 a3c:	12 16       	cp	r1, r18
 a3e:	13 06       	cpc	r1, r19
 a40:	14 06       	cpc	r1, r20
 a42:	55 1f       	adc	r21, r21
 a44:	f2 cf       	rjmp	.-28     	; 0xa2a <.L1^B1>

00000a46 <.L5^B1>:
 a46:	46 95       	lsr	r20
 a48:	f1 df       	rcall	.-30     	; 0xa2c <__fp_splitA>
 a4a:	08 c0       	rjmp	.+16     	; 0xa5c <.L8^B1>

00000a4c <.L6^B1>:
 a4c:	16 16       	cp	r1, r22
 a4e:	17 06       	cpc	r1, r23
 a50:	18 06       	cpc	r1, r24
 a52:	99 1f       	adc	r25, r25
 a54:	f1 cf       	rjmp	.-30     	; 0xa38 <.L3^B1>

00000a56 <.L7^B1>:
 a56:	86 95       	lsr	r24
 a58:	71 05       	cpc	r23, r1
 a5a:	61 05       	cpc	r22, r1

00000a5c <.L8^B1>:
 a5c:	08 94       	sec
 a5e:	08 95       	ret

00000a60 <__fp_zero>:
 a60:	e8 94       	clt

00000a62 <__fp_szero>:
 a62:	bb 27       	eor	r27, r27
 a64:	66 27       	eor	r22, r22
 a66:	77 27       	eor	r23, r23
 a68:	cb 01       	movw	r24, r22
 a6a:	97 f9       	bld	r25, 7
 a6c:	08 95       	ret

00000a6e <__gesf2>:
 a6e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fp_cmp>
 a72:	08 f4       	brcc	.+2      	; 0xa76 <.L1^B1>
 a74:	8f ef       	ldi	r24, 0xFF	; 255

00000a76 <.L1^B1>:
 a76:	08 95       	ret

00000a78 <__mulsf3>:
 a78:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__mulsf3x>
 a7c:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_round>

00000a80 <.L^B1>:
 a80:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fp_pscA>
 a84:	38 f0       	brcs	.+14     	; 0xa94 <.L1^B1>
 a86:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fp_pscB>
 a8a:	20 f0       	brcs	.+8      	; 0xa94 <.L1^B1>
 a8c:	95 23       	and	r25, r21
 a8e:	11 f0       	breq	.+4      	; 0xa94 <.L1^B1>
 a90:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__fp_inf>

00000a94 <.L1^B1>:
 a94:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__fp_nan>

00000a98 <.L2^B1>:
 a98:	11 24       	eor	r1, r1
 a9a:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__fp_szero>

00000a9e <__mulsf3x>:
 a9e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fp_split3>
 aa2:	70 f3       	brcs	.-36     	; 0xa80 <.L^B1>

00000aa4 <__mulsf3_pse>:
 aa4:	95 9f       	mul	r25, r21
 aa6:	c1 f3       	breq	.-16     	; 0xa98 <.L2^B1>
 aa8:	95 0f       	add	r25, r21
 aaa:	50 e0       	ldi	r21, 0x00	; 0
 aac:	55 1f       	adc	r21, r21
 aae:	62 9f       	mul	r22, r18
 ab0:	f0 01       	movw	r30, r0
 ab2:	72 9f       	mul	r23, r18
 ab4:	bb 27       	eor	r27, r27
 ab6:	f0 0d       	add	r31, r0
 ab8:	b1 1d       	adc	r27, r1
 aba:	63 9f       	mul	r22, r19
 abc:	aa 27       	eor	r26, r26
 abe:	f0 0d       	add	r31, r0
 ac0:	b1 1d       	adc	r27, r1
 ac2:	aa 1f       	adc	r26, r26
 ac4:	64 9f       	mul	r22, r20
 ac6:	66 27       	eor	r22, r22
 ac8:	b0 0d       	add	r27, r0
 aca:	a1 1d       	adc	r26, r1
 acc:	66 1f       	adc	r22, r22
 ace:	82 9f       	mul	r24, r18
 ad0:	22 27       	eor	r18, r18
 ad2:	b0 0d       	add	r27, r0
 ad4:	a1 1d       	adc	r26, r1
 ad6:	62 1f       	adc	r22, r18
 ad8:	73 9f       	mul	r23, r19
 ada:	b0 0d       	add	r27, r0
 adc:	a1 1d       	adc	r26, r1
 ade:	62 1f       	adc	r22, r18
 ae0:	83 9f       	mul	r24, r19
 ae2:	a0 0d       	add	r26, r0
 ae4:	61 1d       	adc	r22, r1
 ae6:	22 1f       	adc	r18, r18
 ae8:	74 9f       	mul	r23, r20
 aea:	33 27       	eor	r19, r19
 aec:	a0 0d       	add	r26, r0
 aee:	61 1d       	adc	r22, r1
 af0:	23 1f       	adc	r18, r19
 af2:	84 9f       	mul	r24, r20
 af4:	60 0d       	add	r22, r0
 af6:	21 1d       	adc	r18, r1
 af8:	82 2f       	mov	r24, r18
 afa:	76 2f       	mov	r23, r22
 afc:	6a 2f       	mov	r22, r26
 afe:	11 24       	eor	r1, r1
 b00:	9f 57       	subi	r25, 0x7F	; 127
 b02:	50 40       	sbci	r21, 0x00	; 0
 b04:	9a f0       	brmi	.+38     	; 0xb2c <.L13^B1>
 b06:	f1 f0       	breq	.+60     	; 0xb44 <.L15^B1>

00000b08 <.L10^B1>:
 b08:	88 23       	and	r24, r24
 b0a:	4a f0       	brmi	.+18     	; 0xb1e <.L11^B1>
 b0c:	ee 0f       	add	r30, r30
 b0e:	ff 1f       	adc	r31, r31
 b10:	bb 1f       	adc	r27, r27
 b12:	66 1f       	adc	r22, r22
 b14:	77 1f       	adc	r23, r23
 b16:	88 1f       	adc	r24, r24
 b18:	91 50       	subi	r25, 0x01	; 1
 b1a:	50 40       	sbci	r21, 0x00	; 0
 b1c:	a9 f7       	brne	.-22     	; 0xb08 <.L10^B1>

00000b1e <.L11^B1>:
 b1e:	9e 3f       	cpi	r25, 0xFE	; 254
 b20:	51 05       	cpc	r21, r1
 b22:	80 f0       	brcs	.+32     	; 0xb44 <.L15^B1>
 b24:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__fp_inf>

00000b28 <.L12^B1>:
 b28:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__fp_szero>

00000b2c <.L13^B1>:
 b2c:	5f 3f       	cpi	r21, 0xFF	; 255
 b2e:	e4 f3       	brlt	.-8      	; 0xb28 <.L12^B1>
 b30:	98 3e       	cpi	r25, 0xE8	; 232
 b32:	d4 f3       	brlt	.-12     	; 0xb28 <.L12^B1>

00000b34 <.L14^B1>:
 b34:	86 95       	lsr	r24
 b36:	77 95       	ror	r23
 b38:	67 95       	ror	r22
 b3a:	b7 95       	ror	r27
 b3c:	f7 95       	ror	r31
 b3e:	e7 95       	ror	r30
 b40:	9f 5f       	subi	r25, 0xFF	; 255
 b42:	c1 f7       	brne	.-16     	; 0xb34 <.L14^B1>

00000b44 <.L15^B1>:
 b44:	fe 2b       	or	r31, r30
 b46:	88 0f       	add	r24, r24
 b48:	91 1d       	adc	r25, r1
 b4a:	96 95       	lsr	r25
 b4c:	87 95       	ror	r24
 b4e:	97 f9       	bld	r25, 7
 b50:	08 95       	ret

00000b52 <__fp_inf>:
 b52:	97 f9       	bld	r25, 7
 b54:	9f 67       	ori	r25, 0x7F	; 127
 b56:	80 e8       	ldi	r24, 0x80	; 128
 b58:	70 e0       	ldi	r23, 0x00	; 0
 b5a:	60 e0       	ldi	r22, 0x00	; 0
 b5c:	08 95       	ret

00000b5e <__fp_nan>:
 b5e:	9f ef       	ldi	r25, 0xFF	; 255
 b60:	80 ec       	ldi	r24, 0xC0	; 192
 b62:	08 95       	ret

00000b64 <__fp_pscA>:
 b64:	00 24       	eor	r0, r0
 b66:	0a 94       	dec	r0
 b68:	16 16       	cp	r1, r22
 b6a:	17 06       	cpc	r1, r23
 b6c:	18 06       	cpc	r1, r24
 b6e:	09 06       	cpc	r0, r25
 b70:	08 95       	ret

00000b72 <__fp_pscB>:
 b72:	00 24       	eor	r0, r0
 b74:	0a 94       	dec	r0
 b76:	12 16       	cp	r1, r18
 b78:	13 06       	cpc	r1, r19
 b7a:	14 06       	cpc	r1, r20
 b7c:	05 06       	cpc	r0, r21
 b7e:	08 95       	ret

00000b80 <__fp_round>:
 b80:	09 2e       	mov	r0, r25
 b82:	03 94       	inc	r0
 b84:	00 0c       	add	r0, r0
 b86:	11 f4       	brne	.+4      	; 0xb8c <.L1^B1>
 b88:	88 23       	and	r24, r24
 b8a:	52 f0       	brmi	.+20     	; 0xba0 <.L3^B1>

00000b8c <.L1^B1>:
 b8c:	bb 0f       	add	r27, r27
 b8e:	40 f4       	brcc	.+16     	; 0xba0 <.L3^B1>
 b90:	bf 2b       	or	r27, r31
 b92:	11 f4       	brne	.+4      	; 0xb98 <.L2^B1>
 b94:	60 ff       	sbrs	r22, 0
 b96:	04 c0       	rjmp	.+8      	; 0xba0 <.L3^B1>

00000b98 <.L2^B1>:
 b98:	6f 5f       	subi	r22, 0xFF	; 255
 b9a:	7f 4f       	sbci	r23, 0xFF	; 255
 b9c:	8f 4f       	sbci	r24, 0xFF	; 255
 b9e:	9f 4f       	sbci	r25, 0xFF	; 255

00000ba0 <.L3^B1>:
 ba0:	08 95       	ret

00000ba2 <_exit>:
 ba2:	f8 94       	cli

00000ba4 <__stop_program>:
 ba4:	ff cf       	rjmp	.-2      	; 0xba4 <__stop_program>
